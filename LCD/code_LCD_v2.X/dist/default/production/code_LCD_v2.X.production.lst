

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jun 08 13:42:03 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  0041                     _RD1	set	65
   172  0040                     _RD0	set	64
   173  0042                     _RD2	set	66
   174  0043                     _RD3	set	67
   175  0044                     _RD4	set	68
   176  0045                     _RD5	set	69
   177  0088                     _TRISD	set	136
   178                           
   179                           	psect	strings
   180  0003                     __pstrings:	
   181  0003                     stringtab:	
   182  0003                     __stringtab:	
   183  0003                     stringcode:	
   184                           ;	String table - string pointers are 1 byte each
   185                           
   186  0003                     stringdir:	
   187  0003  3000               	movlw	high stringdir
   188  0004  008A               	movwf	10
   189  0005  0804               	movf	4,w
   190  0006  0A84               	incf	4,f
   191  0007  0782               	addwf	2,f
   192  0008                     __stringbase:	
   193  0008  3400               	retlw	0
   194  0009                     __end_of__stringtab:	
   195  0009                     STR_1:	
   196  0009  344E               	retlw	78	;'N'
   197  000A  3468               	retlw	104	;'h'
   198  000B  3469               	retlw	105	;'i'
   199  000C  3465               	retlw	101	;'e'
   200  000D  3474               	retlw	116	;'t'
   201  000E  3420               	retlw	32	;' '
   202  000F  3464               	retlw	100	;'d'
   203  0010  346F               	retlw	111	;'o'
   204  0011  343A               	retlw	58	;':'
   205  0012  3420               	retlw	32	;' '
   206  0013  3400               	retlw	0
   207                           
   208                           ; #config settings
   209  0000                     
   210                           	psect	cinit
   211  07FC                     start_initialization:	
   212  07FC                     __initialization:	
   213  07FC                     end_of_initialization:	
   214                           ;End of C runtime variable initialization code
   215                           
   216  07FC                     __end_of__initialization:	
   217  07FC  0183               	clrf	3
   218  07FD  120A  118A  2EE9   	ljmp	_main	;jump to C main() function
   219                           
   220                           	psect	cstackCOMMON
   221  0070                     __pcstackCOMMON:	
   222  0070                     ?_Lcd_Write_High_Nibble:	
   223  0070                     ??_Lcd_Write_High_Nibble:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_Lcd_Write_Low_Nibble:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ??_Lcd_Write_Low_Nibble:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_Lcd_Cmd:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_Lcd_Init:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_Lcd_Chr_Cp:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_Lcd_Out_Cp:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_main:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     Lcd_Write_High_Nibble@b:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     Lcd_Write_Low_Nibble@b:	
   251                           ; 1 bytes @ 0x0
   252                           
   253                           
   254                           ; 1 bytes @ 0x0
   255  0070                     	ds	1
   256  0071                     ??_Lcd_Cmd:	
   257  0071                     ??_Lcd_Chr_Cp:	
   258                           ; 1 bytes @ 0x1
   259                           
   260                           
   261                           ; 1 bytes @ 0x1
   262  0071                     	ds	1
   263  0072                     Lcd_Chr_Cp@achar:	
   264                           
   265                           ; 1 bytes @ 0x2
   266  0072                     	ds	1
   267  0073                     ??_Lcd_Out_Cp:	
   268  0073                     Lcd_Cmd@cmd:	
   269                           ; 1 bytes @ 0x3
   270                           
   271                           
   272                           ; 1 bytes @ 0x3
   273  0073                     	ds	1
   274  0074                     ??_Lcd_Init:	
   275  0074                     Lcd_Out_Cp@str:	
   276                           ; 1 bytes @ 0x4
   277                           
   278                           
   279                           ; 1 bytes @ 0x4
   280  0074                     	ds	1
   281  0075                     Lcd_Out_Cp@i:	
   282                           
   283                           ; 1 bytes @ 0x5
   284  0075                     	ds	1
   285  0076                     ?_Lcd_Out:	
   286  0076                     Lcd_Out@column:	
   287                           ; 1 bytes @ 0x6
   288                           
   289                           
   290                           ; 1 bytes @ 0x6
   291  0076                     	ds	1
   292  0077                     Lcd_Out@text:	
   293                           
   294                           ; 1 bytes @ 0x7
   295  0077                     	ds	1
   296  0078                     ??_Lcd_Out:	
   297                           
   298                           ; 1 bytes @ 0x8
   299  0078                     	ds	1
   300  0079                     Lcd_Out@row:	
   301                           
   302                           ; 1 bytes @ 0x9
   303  0079                     	ds	1
   304  007A                     _Lcd_Out$62:	
   305                           
   306                           ; 2 bytes @ 0xA
   307  007A                     	ds	2
   308  007C                     Lcd_Out@add:	
   309                           
   310                           ; 1 bytes @ 0xC
   311  007C                     	ds	1
   312  007D                     ??_main:	
   313                           
   314                           ; 1 bytes @ 0xD
   315  007D                     	ds	1
   316                           
   317                           	psect	maintext
   318  06E9                     __pmaintext:	
   319 ;;
   320 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   321 ;;
   322 ;; *************** function _main *****************
   323 ;; Defined at:
   324 ;;		line 264 in file "main.c"
   325 ;; Parameters:    Size  Location     Type
   326 ;;		None
   327 ;; Auto vars:     Size  Location     Type
   328 ;;		None
   329 ;; Return value:  Size  Location     Type
   330 ;;                  1    wreg      void 
   331 ;; Registers used:
   332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   333 ;; Tracked objects:
   334 ;;		On entry : B00/0
   335 ;;		On exit  : 0/0
   336 ;;		Unchanged: 0/0
   337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   338 ;;      Params:         0       0       0       0       0
   339 ;;      Locals:         0       0       0       0       0
   340 ;;      Temps:          1       0       0       0       0
   341 ;;      Totals:         1       0       0       0       0
   342 ;;Total ram usage:        1 bytes
   343 ;; Hardware stack levels required when called:    4
   344 ;; This function calls:
   345 ;;		_Lcd_Init
   346 ;;		_Lcd_Out
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           
   353                           ;psect for function _main
   354  06E9                     _main:	
   355                           
   356                           ;main.c: 266:     TRISD = 0x00;
   357                           
   358                           ;incstack = 0
   359                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   360  06E9  1683               	bsf	3,5	;RP0=1, select bank1
   361  06EA  1303               	bcf	3,6	;RP1=0, select bank1
   362  06EB  0188               	clrf	8	;volatile
   363                           
   364                           ;main.c: 268:     Lcd_Init();
   365  06EC  120A  118A  2792  120A  118A  	fcall	_Lcd_Init
   366                           
   367                           ;main.c: 269:     Lcd_Out(1,1,"Nhiet do: ");
   368  06F1  01F6               	clrf	Lcd_Out@column
   369  06F2  0AF6               	incf	Lcd_Out@column,f
   370  06F3  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   371  06F4  00FD               	movwf	??_main
   372  06F5  087D               	movf	??_main,w
   373  06F6  00F7               	movwf	Lcd_Out@text
   374  06F7  3001               	movlw	1
   375  06F8  120A  118A  271B  120A  118A  	fcall	_Lcd_Out
   376  06FD                     l73:	
   377                           ;main.c: 270:     while(1)
   378                           
   379                           
   380                           ;main.c: 271:     {;main.c: 273:     }
   381  06FD  2EFD               	goto	l73
   382  06FE                     __end_of_main:	
   383                           
   384                           	psect	text1
   385  071B                     __ptext1:	
   386 ;; *************** function _Lcd_Out *****************
   387 ;; Defined at:
   388 ;;		line 225 in file "main.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;  row             1    wreg     unsigned char 
   391 ;;  column          1    6[COMMON] unsigned char 
   392 ;;  text            1    7[COMMON] PTR unsigned char 
   393 ;;		 -> STR_1(11), 
   394 ;; Auto vars:     Size  Location     Type
   395 ;;  row             1    9[COMMON] unsigned char 
   396 ;;  add             1   12[COMMON] unsigned char 
   397 ;; Return value:  Size  Location     Type
   398 ;;                  1    wreg      void 
   399 ;; Registers used:
   400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   401 ;; Tracked objects:
   402 ;;		On entry : 0/0
   403 ;;		On exit  : 0/0
   404 ;;		Unchanged: 0/0
   405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   406 ;;      Params:         2       0       0       0       0
   407 ;;      Locals:         4       0       0       0       0
   408 ;;      Temps:          1       0       0       0       0
   409 ;;      Totals:         7       0       0       0       0
   410 ;;Total ram usage:        7 bytes
   411 ;; Hardware stack levels used:    1
   412 ;; Hardware stack levels required when called:    3
   413 ;; This function calls:
   414 ;;		_Lcd_Cmd
   415 ;;		_Lcd_Out_Cp
   416 ;; This function is called by:
   417 ;;		_main
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           
   422                           ;psect for function _Lcd_Out
   423  071B                     _Lcd_Out:	
   424                           
   425                           ;incstack = 0
   426                           ; Regs used in _Lcd_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   427                           ;Lcd_Out@row stored from wreg
   428  071B  00F9               	movwf	Lcd_Out@row
   429                           
   430                           ;main.c: 225: void Lcd_Out(unsigned char row, unsigned char column,;main.c: 226:  unsign
      +                          ed char* text);main.c: 227: {;main.c: 228:  unsigned char add;;main.c: 229:  add = (row=
      +                          =1?0x80:0xC0);
   431  071C  0379               	decf	Lcd_Out@row,w
   432  071D  1903               	btfsc	3,2
   433  071E  2F21               	goto	l926
   434  071F  30C0               	movlw	192
   435  0720  2F22               	goto	L1
   436  0721                     l926:	
   437  0721  3080               	movlw	128
   438  0722                     L1:	
   439  0722  00FA               	movwf	_Lcd_Out$62
   440  0723  3000               	movlw	0
   441  0724  00FB               	movwf	_Lcd_Out$62+1
   442  0725  087A               	movf	_Lcd_Out$62,w
   443  0726  00F8               	movwf	??_Lcd_Out
   444  0727  0878               	movf	??_Lcd_Out,w
   445  0728  00FC               	movwf	Lcd_Out@add
   446                           
   447                           ;main.c: 230:  add += (column - 1);
   448  0729  0876               	movf	Lcd_Out@column,w
   449  072A  3EFF               	addlw	255
   450  072B  00F8               	movwf	??_Lcd_Out
   451  072C  0878               	movf	??_Lcd_Out,w
   452  072D  07FC               	addwf	Lcd_Out@add,f
   453                           
   454                           ;main.c: 231:  Lcd_Cmd(add);
   455  072E  087C               	movf	Lcd_Out@add,w
   456  072F  120A  118A  2758  120A  118A  	fcall	_Lcd_Cmd
   457                           
   458                           ;main.c: 232:  Lcd_Out_Cp(text);
   459  0734  0877               	movf	Lcd_Out@text,w
   460  0735  120A  118A  2739   	fcall	_Lcd_Out_Cp
   461  0738  0008               	return
   462  0739                     __end_of_Lcd_Out:	
   463                           
   464                           	psect	text2
   465  0739                     __ptext2:	
   466 ;; *************** function _Lcd_Out_Cp *****************
   467 ;; Defined at:
   468 ;;		line 210 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;  str             1    wreg     PTR unsigned char 
   471 ;;		 -> STR_1(11), 
   472 ;; Auto vars:     Size  Location     Type
   473 ;;  str             1    4[COMMON] PTR unsigned char 
   474 ;;		 -> STR_1(11), 
   475 ;;  i               1    5[COMMON] unsigned char 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         2       0       0       0       0
   487 ;;      Temps:          1       0       0       0       0
   488 ;;      Totals:         3       0       0       0       0
   489 ;;Total ram usage:        3 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; Hardware stack levels required when called:    2
   492 ;; This function calls:
   493 ;;		_Lcd_Chr_Cp
   494 ;; This function is called by:
   495 ;;		_Lcd_Out
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _Lcd_Out_Cp
   501  0739                     _Lcd_Out_Cp:	
   502                           
   503                           ;incstack = 0
   504                           ; Regs used in _Lcd_Out_Cp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   505                           ;Lcd_Out_Cp@str stored from wreg
   506  0739  00F4               	movwf	Lcd_Out_Cp@str
   507                           
   508                           ;main.c: 210: void Lcd_Out_Cp(unsigned char * str);main.c: 211: {;main.c: 212:  unsigned
      +                           char i = 0;
   509  073A  01F5               	clrf	Lcd_Out_Cp@i
   510  073B                     l880:	
   511                           ;main.c: 213:  while(str[i])
   512                           
   513                           
   514                           ;main.c: 213:  while(str[i])
   515  073B  0875               	movf	Lcd_Out_Cp@i,w
   516  073C  0774               	addwf	Lcd_Out_Cp@str,w
   517  073D  0084               	movwf	4
   518  073E  120A  118A  2003  120A  118A  	fcall	stringdir
   519  0743  3A00               	xorlw	0
   520  0744  1903               	btfsc	3,2
   521  0745  0008               	return
   522                           
   523                           ;main.c: 214:  {;main.c: 215:   Lcd_Chr_Cp(str[i]);
   524  0746  0875               	movf	Lcd_Out_Cp@i,w
   525  0747  0774               	addwf	Lcd_Out_Cp@str,w
   526  0748  0084               	movwf	4
   527  0749  120A  118A  2003  120A  118A  	fcall	stringdir
   528  074E  120A  118A  26FE  120A  118A  	fcall	_Lcd_Chr_Cp
   529                           
   530                           ;main.c: 216:    i++;
   531  0753  3001               	movlw	1
   532  0754  00F3               	movwf	??_Lcd_Out_Cp
   533  0755  0873               	movf	??_Lcd_Out_Cp,w
   534  0756  07F5               	addwf	Lcd_Out_Cp@i,f
   535  0757  2F3B               	goto	l880
   536  0758                     __end_of_Lcd_Out_Cp:	
   537                           
   538                           	psect	text3
   539  06FE                     __ptext3:	
   540 ;; *************** function _Lcd_Chr_Cp *****************
   541 ;; Defined at:
   542 ;;		line 175 in file "main.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  achar           1    wreg     unsigned char 
   545 ;; Auto vars:     Size  Location     Type
   546 ;;  achar           1    2[COMMON] unsigned char 
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, status,2, status,0, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   556 ;;      Params:         0       0       0       0       0
   557 ;;      Locals:         1       0       0       0       0
   558 ;;      Temps:          1       0       0       0       0
   559 ;;      Totals:         2       0       0       0       0
   560 ;;Total ram usage:        2 bytes
   561 ;; Hardware stack levels used:    1
   562 ;; Hardware stack levels required when called:    1
   563 ;; This function calls:
   564 ;;		_Lcd_Write_High_Nibble
   565 ;;		_Lcd_Write_Low_Nibble
   566 ;; This function is called by:
   567 ;;		_Lcd_Out_Cp
   568 ;;		_Lcd_Chr
   569 ;;		_Lcd_Custom_Chr
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573                           
   574                           ;psect for function _Lcd_Chr_Cp
   575  06FE                     _Lcd_Chr_Cp:	
   576                           
   577                           ;incstack = 0
   578                           ; Regs used in _Lcd_Chr_Cp: [wreg+status,2+status,0+pclath+cstack]
   579                           ;Lcd_Chr_Cp@achar stored from wreg
   580  06FE  00F2               	movwf	Lcd_Chr_Cp@achar
   581                           
   582                           ;main.c: 175: void Lcd_Chr_Cp(unsigned char achar);main.c: 176: {;main.c: 180:  RD0 = 1;
   583  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   584  0700  1303               	bcf	3,6	;RP1=0, select bank0
   585  0701  1408               	bsf	8,0	;volatile
   586                           
   587                           ;main.c: 181:  Lcd_Write_High_Nibble(achar);
   588  0702  0872               	movf	Lcd_Chr_Cp@achar,w
   589  0703  120A  118A  26D2  120A  118A  	fcall	_Lcd_Write_High_Nibble
   590                           
   591                           ;main.c: 182:  RD1 = 1;
   592  0708  1283               	bcf	3,5	;RP0=0, select bank0
   593  0709  1303               	bcf	3,6	;RP1=0, select bank0
   594  070A  1488               	bsf	8,1	;volatile
   595                           
   596                           ;main.c: 183:  RD1 = 0;
   597  070B  1088               	bcf	8,1	;volatile
   598                           
   599                           ;main.c: 185:  Lcd_Write_Low_Nibble(achar);
   600  070C  0872               	movf	Lcd_Chr_Cp@achar,w
   601  070D  120A  118A  26D9  120A  118A  	fcall	_Lcd_Write_Low_Nibble
   602                           
   603                           ;main.c: 186:  RD1 = 1;
   604  0712  1283               	bcf	3,5	;RP0=0, select bank0
   605  0713  1303               	bcf	3,6	;RP1=0, select bank0
   606  0714  1488               	bsf	8,1	;volatile
   607                           
   608                           ;main.c: 187:  RD1 = 0;
   609  0715  1088               	bcf	8,1	;volatile
   610                           
   611                           ;main.c: 192:  _delay((unsigned long)((37+4)*(20000000/4000000.0)));
   612  0716  3044               	movlw	68
   613  0717  00F1               	movwf	??_Lcd_Chr_Cp
   614  0718                     u177:	
   615  0718  0BF1               	decfsz	??_Lcd_Chr_Cp,f
   616  0719  2F18               	goto	u177
   617  071A  0008               	return
   618  071B                     __end_of_Lcd_Chr_Cp:	
   619                           
   620                           	psect	text4
   621  0792                     __ptext4:	
   622 ;; *************** function _Lcd_Init *****************
   623 ;; Defined at:
   624 ;;		line 126 in file "main.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;		None
   627 ;; Auto vars:     Size  Location     Type
   628 ;;		None
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   638 ;;      Params:         0       0       0       0       0
   639 ;;      Locals:         0       0       0       0       0
   640 ;;      Temps:          2       0       0       0       0
   641 ;;      Totals:         2       0       0       0       0
   642 ;;Total ram usage:        2 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:    2
   645 ;; This function calls:
   646 ;;		_Lcd_Cmd
   647 ;;		_Lcd_Write_Low_Nibble
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           
   654                           ;psect for function _Lcd_Init
   655  0792                     _Lcd_Init:	
   656                           
   657                           ;main.c: 128:  RD0 = 0;
   658                           
   659                           ;incstack = 0
   660                           ; Regs used in _Lcd_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   661  0792  1283               	bcf	3,5	;RP0=0, select bank0
   662  0793  1303               	bcf	3,6	;RP1=0, select bank0
   663  0794  1008               	bcf	8,0	;volatile
   664                           
   665                           ;main.c: 129:  RD1 = 0;
   666  0795  1088               	bcf	8,1	;volatile
   667                           
   668                           ;main.c: 134:  _delay((unsigned long)((20)*(20000000/4000.0)));
   669  0796  3082               	movlw	130
   670  0797  00F5               	movwf	??_Lcd_Init+1
   671  0798  30DD               	movlw	221
   672  0799  00F4               	movwf	??_Lcd_Init
   673  079A                     u187:	
   674  079A  0BF4               	decfsz	??_Lcd_Init,f
   675  079B  2F9A               	goto	u187
   676  079C  0BF5               	decfsz	??_Lcd_Init+1,f
   677  079D  2F9A               	goto	u187
   678  079E  2F9F               	nop2
   679                           
   680                           ;main.c: 136:  Lcd_Write_Low_Nibble(0x03);
   681  079F  3003               	movlw	3
   682  07A0  120A  118A  26D9  120A  118A  	fcall	_Lcd_Write_Low_Nibble
   683                           
   684                           ;main.c: 137:  RD1 = 1;
   685  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   686  07A6  1303               	bcf	3,6	;RP1=0, select bank0
   687  07A7  1488               	bsf	8,1	;volatile
   688                           
   689                           ;main.c: 138:  RD1 = 0;
   690  07A8  1088               	bcf	8,1	;volatile
   691                           
   692                           ;main.c: 139:     _delay((unsigned long)((5)*(20000000/4000.0)));
   693  07A9  3021               	movlw	33
   694  07AA  00F5               	movwf	??_Lcd_Init+1
   695  07AB  3076               	movlw	118
   696  07AC  00F4               	movwf	??_Lcd_Init
   697  07AD                     u197:	
   698  07AD  0BF4               	decfsz	??_Lcd_Init,f
   699  07AE  2FAD               	goto	u197
   700  07AF  0BF5               	decfsz	??_Lcd_Init+1,f
   701  07B0  2FAD               	goto	u197
   702  07B1  0000               	nop
   703                           
   704                           ;main.c: 141:  Lcd_Write_Low_Nibble(0x03);
   705  07B2  3003               	movlw	3
   706  07B3  120A  118A  26D9  120A  118A  	fcall	_Lcd_Write_Low_Nibble
   707                           
   708                           ;main.c: 142:  RD1 = 1;
   709  07B8  1283               	bcf	3,5	;RP0=0, select bank0
   710  07B9  1303               	bcf	3,6	;RP1=0, select bank0
   711  07BA  1488               	bsf	8,1	;volatile
   712                           
   713                           ;main.c: 143:  RD1 = 0;
   714  07BB  1088               	bcf	8,1	;volatile
   715                           
   716                           ;main.c: 144:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   717  07BC  30A6               	movlw	166
   718  07BD  00F4               	movwf	??_Lcd_Init
   719  07BE                     u207:	
   720  07BE  0BF4               	decfsz	??_Lcd_Init,f
   721  07BF  2FBE               	goto	u207
   722  07C0  0000               	nop
   723                           
   724                           ;main.c: 146:  Lcd_Write_Low_Nibble(0x03);
   725  07C1  3003               	movlw	3
   726  07C2  120A  118A  26D9  120A  118A  	fcall	_Lcd_Write_Low_Nibble
   727                           
   728                           ;main.c: 147:  RD1 = 1;
   729  07C7  1283               	bcf	3,5	;RP0=0, select bank0
   730  07C8  1303               	bcf	3,6	;RP1=0, select bank0
   731  07C9  1488               	bsf	8,1	;volatile
   732                           
   733                           ;main.c: 148:  RD1 = 0;
   734  07CA  1088               	bcf	8,1	;volatile
   735                           
   736                           ;main.c: 152:  _delay((unsigned long)((1)*(20000000/4000.0)));
   737  07CB  3007               	movlw	7
   738  07CC  00F5               	movwf	??_Lcd_Init+1
   739  07CD  307D               	movlw	125
   740  07CE  00F4               	movwf	??_Lcd_Init
   741  07CF                     u217:	
   742  07CF  0BF4               	decfsz	??_Lcd_Init,f
   743  07D0  2FCF               	goto	u217
   744  07D1  0BF5               	decfsz	??_Lcd_Init+1,f
   745  07D2  2FCF               	goto	u217
   746                           
   747                           ;main.c: 155:  Lcd_Write_Low_Nibble(0x02);
   748  07D3  3002               	movlw	2
   749  07D4  120A  118A  26D9  120A  118A  	fcall	_Lcd_Write_Low_Nibble
   750                           
   751                           ;main.c: 156:  RD1 = 1;
   752  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   753  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   754  07DB  1488               	bsf	8,1	;volatile
   755                           
   756                           ;main.c: 157:  RD1 = 0;
   757  07DC  1088               	bcf	8,1	;volatile
   758                           
   759                           ;main.c: 158:  _delay((unsigned long)((1)*(20000000/4000.0)));
   760  07DD  3007               	movlw	7
   761  07DE  00F5               	movwf	??_Lcd_Init+1
   762  07DF  307D               	movlw	125
   763  07E0  00F4               	movwf	??_Lcd_Init
   764  07E1                     u227:	
   765  07E1  0BF4               	decfsz	??_Lcd_Init,f
   766  07E2  2FE1               	goto	u227
   767  07E3  0BF5               	decfsz	??_Lcd_Init+1,f
   768  07E4  2FE1               	goto	u227
   769                           
   770                           ;main.c: 160:  Lcd_Cmd(0x28);
   771  07E5  3028               	movlw	40
   772  07E6  120A  118A  2758  120A  118A  	fcall	_Lcd_Cmd
   773                           
   774                           ;main.c: 161:  Lcd_Cmd(12);
   775  07EB  300C               	movlw	12
   776  07EC  120A  118A  2758  120A  118A  	fcall	_Lcd_Cmd
   777                           
   778                           ;main.c: 162:  Lcd_Cmd(1);
   779  07F1  3001               	movlw	1
   780  07F2  120A  118A  2758  120A  118A  	fcall	_Lcd_Cmd
   781                           
   782                           ;main.c: 163:  Lcd_Cmd(6);
   783  07F7  3006               	movlw	6
   784  07F8  120A  118A  2758   	fcall	_Lcd_Cmd
   785  07FB  0008               	return
   786  07FC                     __end_of_Lcd_Init:	
   787                           
   788                           	psect	text5
   789  0758                     __ptext5:	
   790 ;; *************** function _Lcd_Cmd *****************
   791 ;; Defined at:
   792 ;;		line 97 in file "main.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;  cmd             1    wreg     unsigned char 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  cmd             1    3[COMMON] unsigned char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   806 ;;      Params:         0       0       0       0       0
   807 ;;      Locals:         1       0       0       0       0
   808 ;;      Temps:          2       0       0       0       0
   809 ;;      Totals:         3       0       0       0       0
   810 ;;Total ram usage:        3 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    1
   813 ;; This function calls:
   814 ;;		_Lcd_Write_High_Nibble
   815 ;;		_Lcd_Write_Low_Nibble
   816 ;; This function is called by:
   817 ;;		_Lcd_Init
   818 ;;		_Lcd_Out
   819 ;;		_Lcd_Chr
   820 ;;		_Lcd_gotoxy
   821 ;;		_Lcd_Custom_Chr
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           
   826                           ;psect for function _Lcd_Cmd
   827  0758                     _Lcd_Cmd:	
   828                           
   829                           ;incstack = 0
   830                           ; Regs used in _Lcd_Cmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   831                           ;Lcd_Cmd@cmd stored from wreg
   832  0758  00F3               	movwf	Lcd_Cmd@cmd
   833                           
   834                           ;main.c: 97: void Lcd_Cmd(unsigned char cmd);main.c: 98: {;main.c: 102:  RD0 = 0;
   835  0759  1283               	bcf	3,5	;RP0=0, select bank0
   836  075A  1303               	bcf	3,6	;RP1=0, select bank0
   837  075B  1008               	bcf	8,0	;volatile
   838                           
   839                           ;main.c: 103:  Lcd_Write_High_Nibble(cmd);
   840  075C  0873               	movf	Lcd_Cmd@cmd,w
   841  075D  120A  118A  26D2  120A  118A  	fcall	_Lcd_Write_High_Nibble
   842                           
   843                           ;main.c: 104:  RD1 = 1;
   844  0762  1283               	bcf	3,5	;RP0=0, select bank0
   845  0763  1303               	bcf	3,6	;RP1=0, select bank0
   846  0764  1488               	bsf	8,1	;volatile
   847                           
   848                           ;main.c: 105:  RD1 = 0;
   849  0765  1088               	bcf	8,1	;volatile
   850                           
   851                           ;main.c: 107:  Lcd_Write_Low_Nibble(cmd);
   852  0766  0873               	movf	Lcd_Cmd@cmd,w
   853  0767  120A  118A  26D9  120A  118A  	fcall	_Lcd_Write_Low_Nibble
   854                           
   855                           ;main.c: 108:  RD1 = 1;
   856  076C  1283               	bcf	3,5	;RP0=0, select bank0
   857  076D  1303               	bcf	3,6	;RP1=0, select bank0
   858  076E  1488               	bsf	8,1	;volatile
   859                           
   860                           ;main.c: 109:  RD1 = 0;
   861  076F  1088               	bcf	8,1	;volatile
   862                           
   863                           ;main.c: 114:  switch(cmd)
   864  0770  2F81               	goto	l868
   865  0771                     l862:	
   866                           
   867                           ;main.c: 118:    _delay((unsigned long)((2)*(20000000/4000.0)));
   868  0771  300D               	movlw	13
   869  0772  00F2               	movwf	??_Lcd_Cmd+1
   870  0773  30FB               	movlw	251
   871  0774  00F1               	movwf	??_Lcd_Cmd
   872  0775                     u237:	
   873  0775  0BF1               	decfsz	??_Lcd_Cmd,f
   874  0776  2F75               	goto	u237
   875  0777  0BF2               	decfsz	??_Lcd_Cmd+1,f
   876  0778  2F75               	goto	u237
   877  0779  2F7A               	nop2
   878                           
   879                           ;main.c: 119:    break;
   880  077A  0008               	return
   881  077B                     l864:	
   882                           
   883                           ;main.c: 121:    _delay((unsigned long)((37)*(20000000/4000000.0)));
   884  077B  303D               	movlw	61
   885  077C  00F1               	movwf	??_Lcd_Cmd
   886  077D                     u247:	
   887  077D  0BF1               	decfsz	??_Lcd_Cmd,f
   888  077E  2F7D               	goto	u247
   889  077F  0000               	nop
   890                           
   891                           ;main.c: 122:    break;
   892  0780  0008               	return
   893  0781                     l868:	
   894  0781  0873               	movf	Lcd_Cmd@cmd,w
   895  0782  00F1               	movwf	??_Lcd_Cmd
   896  0783  01F2               	clrf	??_Lcd_Cmd+1
   897                           
   898                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   899                           ; Switch size 1, requested type "simple"
   900                           ; Number of cases is 1, Range of values is 0 to 0
   901                           ; switch strategies available:
   902                           ; Name         Instructions Cycles
   903                           ; simple_byte            4     3 (average)
   904                           ; direct_byte           11     8 (fixed)
   905                           ; jumptable            260     6 (fixed)
   906                           ;	Chosen strategy is simple_byte
   907  0784  0872               	movf	??_Lcd_Cmd+1,w
   908  0785  3A00               	xorlw	0	; case 0
   909  0786  1903               	skipnz
   910  0787  2F89               	goto	l996
   911  0788  2F7B               	goto	l864
   912  0789                     l996:	
   913                           
   914                           ; Switch size 1, requested type "simple"
   915                           ; Number of cases is 2, Range of values is 1 to 2
   916                           ; switch strategies available:
   917                           ; Name         Instructions Cycles
   918                           ; simple_byte            7     4 (average)
   919                           ; direct_byte           17    11 (fixed)
   920                           ; jumptable            263     9 (fixed)
   921                           ;	Chosen strategy is simple_byte
   922  0789  0871               	movf	??_Lcd_Cmd,w
   923  078A  3A01               	xorlw	1	; case 1
   924  078B  1903               	skipnz
   925  078C  2F71               	goto	l862
   926  078D  3A03               	xorlw	3	; case 2
   927  078E  1903               	skipnz
   928  078F  2F71               	goto	l862
   929  0790  2F7B               	goto	l864
   930  0791  0008               	return
   931  0792                     __end_of_Lcd_Cmd:	
   932                           
   933                           	psect	text6
   934  06D9                     __ptext6:	
   935 ;; *************** function _Lcd_Write_Low_Nibble *****************
   936 ;; Defined at:
   937 ;;		line 60 in file "main.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  b               1    wreg     unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  b               1    0[COMMON] unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   951 ;;      Params:         0       0       0       0       0
   952 ;;      Locals:         1       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0
   954 ;;      Totals:         1       0       0       0       0
   955 ;;Total ram usage:        1 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_Lcd_Cmd
   961 ;;		_Lcd_Init
   962 ;;		_Lcd_Chr_Cp
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _Lcd_Write_Low_Nibble
   968  06D9                     _Lcd_Write_Low_Nibble:	
   969                           
   970                           ;incstack = 0
   971                           ; Regs used in _Lcd_Write_Low_Nibble: [wreg]
   972                           ;Lcd_Write_Low_Nibble@b stored from wreg
   973  06D9  00F0               	movwf	Lcd_Write_Low_Nibble@b
   974                           
   975                           ;main.c: 60: void Lcd_Write_Low_Nibble(unsigned char b);main.c: 61: {;main.c: 62:   RD5 
      +                          = b & 0x08;
   976  06DA  1283               	bcf	3,5	;RP0=0, select bank0
   977  06DB  1303               	bcf	3,6	;RP1=0, select bank0
   978  06DC  1288               	bcf	8,5	;volatile
   979                           
   980                           ;main.c: 63:  RD4 = b & 0x04;
   981  06DD  1208               	bcf	8,4	;volatile
   982                           
   983                           ;main.c: 64:  RD3 = b & 0x02;
   984  06DE  1188               	bcf	8,3	;volatile
   985                           
   986                           ;main.c: 65:  RD2 = b & 0x01;
   987  06DF  1C70               	btfss	Lcd_Write_Low_Nibble@b,0
   988  06E0  2EE5               	goto	u90
   989  06E1  1283               	bcf	3,5	;RP0=0, select bank0
   990  06E2  1303               	bcf	3,6	;RP1=0, select bank0
   991  06E3  1508               	bsf	8,2	;volatile
   992  06E4  0008               	return
   993  06E5                     u90:	
   994  06E5  1283               	bcf	3,5	;RP0=0, select bank0
   995  06E6  1303               	bcf	3,6	;RP1=0, select bank0
   996  06E7  1108               	bcf	8,2	;volatile
   997  06E8  0008               	return
   998  06E9                     __end_of_Lcd_Write_Low_Nibble:	
   999                           
  1000                           	psect	text7
  1001  06D2                     __ptext7:	
  1002 ;; *************** function _Lcd_Write_High_Nibble *****************
  1003 ;; Defined at:
  1004 ;;		line 49 in file "main.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  b               1    wreg     unsigned char 
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  b               1    0[COMMON] unsigned char 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1018 ;;      Params:         0       0       0       0       0
  1019 ;;      Locals:         0       0       0       0       0
  1020 ;;      Temps:          0       0       0       0       0
  1021 ;;      Totals:         0       0       0       0       0
  1022 ;;Total ram usage:        0 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_Lcd_Cmd
  1028 ;;		_Lcd_Chr_Cp
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _Lcd_Write_High_Nibble
  1034  06D2                     _Lcd_Write_High_Nibble:	
  1035                           
  1036                           ;main.c: 49: void Lcd_Write_High_Nibble(unsigned char b);main.c: 50: {;main.c: 51:  RD5 
      +                          = b & 0x80;
  1037                           
  1038                           ;incstack = 0
  1039                           ; Regs used in _Lcd_Write_High_Nibble: [wreg]
  1040  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1041  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1042  06D4  1288               	bcf	8,5	;volatile
  1043                           
  1044                           ;main.c: 52:  RD4 = b & 0x40;
  1045  06D5  1208               	bcf	8,4	;volatile
  1046                           
  1047                           ;main.c: 53:  RD3 = b & 0x20;
  1048  06D6  1188               	bcf	8,3	;volatile
  1049                           
  1050                           ;main.c: 54:  RD2 = b & 0x10;
  1051  06D7  1108               	bcf	8,2	;volatile
  1052  06D8  0008               	return
  1053  06D9                     __end_of_Lcd_Write_High_Nibble:	
  1054  007E                     btemp	set	126	;btemp
  1055  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Out@text	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    Lcd_Out_Cp@str	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Out
    _Lcd_Out->_Lcd_Out_Cp
    _Lcd_Out_Cp->_Lcd_Chr_Cp
    _Lcd_Chr_Cp->_Lcd_Write_Low_Nibble
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Write_Low_Nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     653
                                             13 COMMON     1     1      0
                           _Lcd_Init
                            _Lcd_Out
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     5      2     543
                                              6 COMMON     7     5      2
                            _Lcd_Cmd
                         _Lcd_Out_Cp
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out_Cp                                           3     3      0     189
                                              3 COMMON     3     3      0
                         _Lcd_Chr_Cp
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_Cp                                           2     2      0      66
                                              1 COMMON     2     2      0
              _Lcd_Write_High_Nibble
               _Lcd_Write_Low_Nibble
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     110
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
               _Lcd_Write_Low_Nibble
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      88
                                              1 COMMON     3     3      0
              _Lcd_Write_High_Nibble
               _Lcd_Write_Low_Nibble
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Low_Nibble                                 1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_High_Nibble                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Write_High_Nibble
       _Lcd_Write_Low_Nibble
     _Lcd_Write_Low_Nibble
   _Lcd_Out
     _Lcd_Cmd
       _Lcd_Write_High_Nibble
       _Lcd_Write_Low_Nibble
     _Lcd_Out_Cp
       _Lcd_Chr_Cp
         _Lcd_Write_High_Nibble
         _Lcd_Write_Low_Nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jun 08 13:42:03 2019

                             pc 0002                     __CFG_CP$OFF 0000                              l73 06FD  
                            u90 06E5                              fsr 0004                             l862 0771  
                           l926 0721                             l864 077B                             l880 073B  
                           l868 0781                             l996 0789                             _RD0 0040  
                           _RD1 0041                             _RD2 0042                             _RD3 0043  
                           _RD4 0044                             _RD5 0045                             u207 07BE  
                           u217 07CF                             u227 07E1                             u237 0775  
                           u247 077D                             u177 0718                    __CFG_CPD$OFF 0000  
                           u187 079A                             u197 07AD                             fsr0 0004  
                  __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000                            STR_1 0009  
                  __CFG_WRT$OFF 0000                            _main 06E9                            btemp 007E  
                          start 0000                 __end_of_Lcd_Cmd 0792                 __end_of_Lcd_Out 0739  
                    _Lcd_Chr_Cp 06FE                      _Lcd_Out$62 007A                      _Lcd_Out_Cp 0739  
                         ?_main 0070                   __CFG_WDTE$OFF 0000                           _TRISD 0088  
                __CFG_BOREN$OFF 0000                           pclath 000A                           status 0003  
                         wtemp0 007E                __end_of_Lcd_Init 07FC                 __initialization 07FC  
                  __end_of_main 06FE                          ??_main 007D           _Lcd_Write_High_Nibble 06D2  
                     ??_Lcd_Cmd 0071                       ??_Lcd_Out 0078                  __CFG_PWRTE$OFF 0000  
 __size_of_Lcd_Write_Low_Nibble 0010                     ?_Lcd_Chr_Cp 0070                     ?_Lcd_Out_Cp 0070  
       __end_of__initialization 07FC                  __pcstackCOMMON 0070                       ?_Lcd_Init 0070  
        ?_Lcd_Write_High_Nibble 0070             __size_of_Lcd_Chr_Cp 001D             __size_of_Lcd_Out_Cp 001F  
                    __pmaintext 06E9                      ??_Lcd_Init 0074                      __stringtab 0003  
                       _Lcd_Cmd 0758                         _Lcd_Out 071B                         __ptext1 071B  
                       __ptext2 0739                         __ptext3 06FE                         __ptext4 0792  
                       __ptext5 0758                         __ptext6 06D9                         __ptext7 06D2  
          end_of_initialization 07FC                    ??_Lcd_Chr_Cp 0071                    ??_Lcd_Out_Cp 0073  
  __end_of_Lcd_Write_Low_Nibble 06E9              __end_of_Lcd_Chr_Cp 071B              __end_of_Lcd_Out_Cp 0758  
       ??_Lcd_Write_High_Nibble 0070             start_initialization 07FC                   Lcd_Out@column 0076  
             __size_of_Lcd_Init 006A                   Lcd_Out_Cp@str 0074                       ___latbits 0002  
                      ?_Lcd_Cmd 0070                        ?_Lcd_Out 0076            _Lcd_Write_Low_Nibble 06D9  
                     __pstrings 0003                 Lcd_Chr_Cp@achar 0072           ?_Lcd_Write_Low_Nibble 0070  
                   __stringbase 0008                        _Lcd_Init 0792                __size_of_Lcd_Cmd 003A  
              __size_of_Lcd_Out 001E              __end_of__stringtab 0009           Lcd_Write_Low_Nibble@b 0070  
__size_of_Lcd_Write_High_Nibble 0007   __end_of_Lcd_Write_High_Nibble 06D9                   __size_of_main 0015  
        ??_Lcd_Write_Low_Nibble 0070                     Lcd_Out@text 0077                     Lcd_Out_Cp@i 0075  
                    Lcd_Cmd@cmd 0073                       stringcode 0003                      Lcd_Out@add 007C  
                    Lcd_Out@row 0079                        stringdir 0003                        stringtab 0003  
        Lcd_Write_High_Nibble@b 0070  
