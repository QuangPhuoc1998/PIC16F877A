Version 4.0 HI-TECH Software Intermediate Code
[p mainexit ]
"1499 D:\Mplab X\xc8\pic\include\pic16f877a.h
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1499: extern volatile unsigned char TRISD __attribute__((address(0x088)));
[v _TRISD `Vuc ~T0 @X0 0 e@136 ]
"20 PWM.c
[; ;PWM.c: 20: void PWM_Init(unsigned int period);
[v _PWM_Init `(v ~T0 @X0 0 ef1`ui ]
"21
[; ;PWM.c: 21: void Duty_Init(unsigned int duty);
[v _Duty_Init `(v ~T0 @X0 0 ef1`ui ]
"17
[; ;PWM.c: 17: void Timer1_Init();
[v _Timer1_Init `(v ~T0 @X0 0 e? ]
"18
[; ;PWM.c: 18: void Capture_Init();
[v _Capture_Init `(v ~T0 @X0 0 e? ]
"15 ./lcd4.h
[; ;./lcd4.h: 15: void Lcd_Init();
[v _Lcd_Init `(v ~T0 @X0 0 e? ]
"17
[; ;./lcd4.h: 17: void Lcd_Write_String(char *a);
[v _Lcd_Write_String `(v ~T0 @X0 0 ef1`*uc ]
"14
[; ;./lcd4.h: 14: void Lcd_Set_Cursor(char a, char b);
[v _Lcd_Set_Cursor `(v ~T0 @X0 0 ef2`uc`uc ]
"2770 D:\Mplab X\xc8\pic\include\pic16f877a.h
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2770: extern volatile __bit RD7 __attribute__((address(0x47)));
[v _RD7 `Vb ~T0 @X0 0 e@71 ]
"1073
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1073: extern volatile unsigned short CCPR2 __attribute__((address(0x01B)));
[v _CCPR2 `Vus ~T0 @X0 0 e@27 ]
"16 ./lcd4.h
[; ;./lcd4.h: 16: void Lcd_Write_Char(char a);
[v _Lcd_Write_Char `(v ~T0 @X0 0 ef1`uc ]
"23 PWM.c
[; ;PWM.c: 23: void PID_Init(unsigned int tocdo, unsigned int tocdodat);
[v _PID_Init `(v ~T0 @X0 0 ef2`ui`ui ]
[v F842 `(v ~T0 @X0 1 tf1`ul ]
"92 D:\Mplab X\xc8\pic\include\pic.h
[v __delay `JF842 ~T0 @X0 0 e ]
[p i __delay ]
"1816 D:\Mplab X\xc8\pic\include\pic16f877a.h
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1816: extern volatile unsigned char PR2 __attribute__((address(0x092)));
[v _PR2 `Vuc ~T0 @X0 0 e@146 ]
"2449
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2449: extern volatile __bit CCP1M3 __attribute__((address(0xBB)));
[v _CCP1M3 `Vb ~T0 @X0 0 e@187 ]
"2446
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2446: extern volatile __bit CCP1M2 __attribute__((address(0xBA)));
[v _CCP1M2 `Vb ~T0 @X0 0 e@186 ]
"2965
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2965: extern volatile __bit TRISC2 __attribute__((address(0x43A)));
[v _TRISC2 `Vb ~T0 @X0 0 e@1082 ]
"730
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 730: extern volatile unsigned char TMR2 __attribute__((address(0x011)));
[v _TMR2 `Vuc ~T0 @X0 0 e@17 ]
"2914
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2914: extern volatile __bit TOUTPS3 __attribute__((address(0x96)));
[v _TOUTPS3 `Vb ~T0 @X0 0 e@150 ]
"2911
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2911: extern volatile __bit TOUTPS2 __attribute__((address(0x95)));
[v _TOUTPS2 `Vb ~T0 @X0 0 e@149 ]
"2908
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2908: extern volatile __bit TOUTPS1 __attribute__((address(0x94)));
[v _TOUTPS1 `Vb ~T0 @X0 0 e@148 ]
"2905
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2905: extern volatile __bit TOUTPS0 __attribute__((address(0x93)));
[v _TOUTPS0 `Vb ~T0 @X0 0 e@147 ]
"2875
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2875: extern volatile __bit T2CKPS1 __attribute__((address(0x91)));
[v _T2CKPS1 `Vb ~T0 @X0 0 e@145 ]
"2872
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2872: extern volatile __bit T2CKPS0 __attribute__((address(0x90)));
[v _T2CKPS0 `Vb ~T0 @X0 0 e@144 ]
"2902
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2902: extern volatile __bit TMR2ON __attribute__((address(0x92)));
[v _TMR2ON `Vb ~T0 @X0 0 e@146 ]
"2452
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2452: extern volatile __bit CCP1X __attribute__((address(0xBD)));
[v _CCP1X `Vb ~T0 @X0 0 e@189 ]
"2455
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2455: extern volatile __bit CCP1Y __attribute__((address(0xBC)));
[v _CCP1Y `Vb ~T0 @X0 0 e@188 ]
"892
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 892: extern volatile unsigned char CCPR1L __attribute__((address(0x015)));
[v _CCPR1L `Vuc ~T0 @X0 0 e@21 ]
"634
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 634: extern volatile unsigned short TMR1 __attribute__((address(0x00E)));
[v _TMR1 `Vus ~T0 @X0 0 e@14 ]
"2860
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2860: extern volatile __bit T1CKPS1 __attribute__((address(0x85)));
[v _T1CKPS1 `Vb ~T0 @X0 0 e@133 ]
"2857
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2857: extern volatile __bit T1CKPS0 __attribute__((address(0x84)));
[v _T1CKPS0 `Vb ~T0 @X0 0 e@132 ]
"2569
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2569: extern volatile __bit GIE __attribute__((address(0x5F)));
[v _GIE `Vb ~T0 @X0 0 e@95 ]
"2629
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2629: extern volatile __bit PEIE __attribute__((address(0x5E)));
[v _PEIE `Vb ~T0 @X0 0 e@94 ]
"2887
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2887: extern volatile __bit TMR1IE __attribute__((address(0x460)));
[v _TMR1IE `Vb ~T0 @X0 0 e@1120 ]
"2893
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2893: extern volatile __bit TMR1ON __attribute__((address(0x80)));
[v _TMR1ON `Vb ~T0 @X0 0 e@128 ]
"2962
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2962: extern volatile __bit TRISC1 __attribute__((address(0x439)));
[v _TRISC1 `Vb ~T0 @X0 0 e@1081 ]
"2458
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2458: extern volatile __bit CCP2IE __attribute__((address(0x468)));
[v _CCP2IE `Vb ~T0 @X0 0 e@1128 ]
"2473
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2473: extern volatile __bit CCP2M3 __attribute__((address(0xEB)));
[v _CCP2M3 `Vb ~T0 @X0 0 e@235 ]
"2470
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2470: extern volatile __bit CCP2M2 __attribute__((address(0xEA)));
[v _CCP2M2 `Vb ~T0 @X0 0 e@234 ]
"2467
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2467: extern volatile __bit CCP2M1 __attribute__((address(0xE9)));
[v _CCP2M1 `Vb ~T0 @X0 0 e@233 ]
"2464
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2464: extern volatile __bit CCP2M0 __attribute__((address(0xE8)));
[v _CCP2M0 `Vb ~T0 @X0 0 e@232 ]
[t ~ __interrupt . k ]
[t T1 __interrupt ]
"2461
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2461: extern volatile __bit CCP2IF __attribute__((address(0x68)));
[v _CCP2IF `Vb ~T0 @X0 0 e@104 ]
"54 D:\Mplab X\xc8\pic\include\pic16f877a.h
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 54: __asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
"61
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 61: __asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
"68
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 68: __asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
"75
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 75: __asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
"161
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 161: __asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
"168
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 168: __asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
"218
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 218: __asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
"280
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 280: __asm("PORTC equ 07h");
[; <" PORTC equ 07h ;# ">
"342
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 342: __asm("PORTD equ 08h");
[; <" PORTD equ 08h ;# ">
"404
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 404: __asm("PORTE equ 09h");
[; <" PORTE equ 09h ;# ">
"436
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 436: __asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
"456
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 456: __asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
"534
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 534: __asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
"596
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 596: __asm("PIR2 equ 0Dh");
[; <" PIR2 equ 0Dh ;# ">
"636
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 636: __asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
"643
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 643: __asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
"650
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 650: __asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
"657
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 657: __asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
"732
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 732: __asm("TMR2 equ 011h");
[; <" TMR2 equ 011h ;# ">
"739
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 739: __asm("T2CON equ 012h");
[; <" T2CON equ 012h ;# ">
"810
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 810: __asm("SSPBUF equ 013h");
[; <" SSPBUF equ 013h ;# ">
"817
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 817: __asm("SSPCON equ 014h");
[; <" SSPCON equ 014h ;# ">
"887
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 887: __asm("CCPR1 equ 015h");
[; <" CCPR1 equ 015h ;# ">
"894
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 894: __asm("CCPR1L equ 015h");
[; <" CCPR1L equ 015h ;# ">
"901
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 901: __asm("CCPR1H equ 016h");
[; <" CCPR1H equ 016h ;# ">
"908
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 908: __asm("CCP1CON equ 017h");
[; <" CCP1CON equ 017h ;# ">
"966
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 966: __asm("RCSTA equ 018h");
[; <" RCSTA equ 018h ;# ">
"1061
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1061: __asm("TXREG equ 019h");
[; <" TXREG equ 019h ;# ">
"1068
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1068: __asm("RCREG equ 01Ah");
[; <" RCREG equ 01Ah ;# ">
"1075
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1075: __asm("CCPR2 equ 01Bh");
[; <" CCPR2 equ 01Bh ;# ">
"1082
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1082: __asm("CCPR2L equ 01Bh");
[; <" CCPR2L equ 01Bh ;# ">
"1089
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1089: __asm("CCPR2H equ 01Ch");
[; <" CCPR2H equ 01Ch ;# ">
"1096
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1096: __asm("CCP2CON equ 01Dh");
[; <" CCP2CON equ 01Dh ;# ">
"1154
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1154: __asm("ADRESH equ 01Eh");
[; <" ADRESH equ 01Eh ;# ">
"1161
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1161: __asm("ADCON0 equ 01Fh");
[; <" ADCON0 equ 01Fh ;# ">
"1257
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1257: __asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
"1327
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1327: __asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
"1377
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1377: __asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
"1439
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1439: __asm("TRISC equ 087h");
[; <" TRISC equ 087h ;# ">
"1501
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1501: __asm("TRISD equ 088h");
[; <" TRISD equ 088h ;# ">
"1563
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1563: __asm("TRISE equ 089h");
[; <" TRISE equ 089h ;# ">
"1620
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1620: __asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
"1682
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1682: __asm("PIE2 equ 08Dh");
[; <" PIE2 equ 08Dh ;# ">
"1722
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1722: __asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
"1756
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1756: __asm("SSPCON2 equ 091h");
[; <" SSPCON2 equ 091h ;# ">
"1818
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1818: __asm("PR2 equ 092h");
[; <" PR2 equ 092h ;# ">
"1825
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1825: __asm("SSPADD equ 093h");
[; <" SSPADD equ 093h ;# ">
"1832
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1832: __asm("SSPSTAT equ 094h");
[; <" SSPSTAT equ 094h ;# ">
"2001
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2001: __asm("TXSTA equ 098h");
[; <" TXSTA equ 098h ;# ">
"2082
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2082: __asm("SPBRG equ 099h");
[; <" SPBRG equ 099h ;# ">
"2089
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2089: __asm("CMCON equ 09Ch");
[; <" CMCON equ 09Ch ;# ">
"2159
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2159: __asm("CVRCON equ 09Dh");
[; <" CVRCON equ 09Dh ;# ">
"2224
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2224: __asm("ADRESL equ 09Eh");
[; <" ADRESL equ 09Eh ;# ">
"2231
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2231: __asm("ADCON1 equ 09Fh");
[; <" ADCON1 equ 09Fh ;# ">
"2290
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2290: __asm("EEDATA equ 010Ch");
[; <" EEDATA equ 010Ch ;# ">
"2297
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2297: __asm("EEADR equ 010Dh");
[; <" EEADR equ 010Dh ;# ">
"2304
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2304: __asm("EEDATH equ 010Eh");
[; <" EEDATH equ 010Eh ;# ">
"2311
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2311: __asm("EEADRH equ 010Fh");
[; <" EEADRH equ 010Fh ;# ">
"2318
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2318: __asm("EECON1 equ 018Ch");
[; <" EECON1 equ 018Ch ;# ">
"2363
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2363: __asm("EECON2 equ 018Dh");
[; <" EECON2 equ 018Dh ;# ">
"5 ./main.h
[p x FOSC = HS ]
"6
[p x WDTE = OFF ]
"7
[p x PWRTE = OFF ]
"8
[p x BOREN = OFF ]
"9
[p x LVP = OFF ]
"10
[p x CPD = OFF ]
"11
[p x WRT = OFF ]
"12
[p x CP = OFF ]
"13 PWM.c
[; ;PWM.c: 13: double E, E1, E2, T;
[v _E `d ~T0 @X0 1 e ]
[v _E1 `d ~T0 @X0 1 e ]
[v _E2 `d ~T0 @X0 1 e ]
[v _T `d ~T0 @X0 1 e ]
"14
[; ;PWM.c: 14: double a1, a2, a3, beta, gamma, Kp, Ki, Kd;
[v _a1 `d ~T0 @X0 1 e ]
[v _a2 `d ~T0 @X0 1 e ]
[v _a3 `d ~T0 @X0 1 e ]
[v _beta `d ~T0 @X0 1 e ]
[v _gamma `d ~T0 @X0 1 e ]
[v _Kp `d ~T0 @X0 1 e ]
[v _Ki `d ~T0 @X0 1 e ]
[v _Kd `d ~T0 @X0 1 e ]
"15
[; ;PWM.c: 15: double out, pre_out, chot;
[v _out `d ~T0 @X0 1 e ]
[v _pre_out `d ~T0 @X0 1 e ]
[v _chot `d ~T0 @X0 1 e ]
[v $root$_main `(v ~T0 @X0 0 e ]
"25
[; ;PWM.c: 25: void main(void)
[v _main `(v ~T0 @X0 1 ef ]
"26
[; ;PWM.c: 26: {
{
[e :U _main ]
[f ]
"28
[; ;PWM.c: 28:     T = 0.01;
[e = _T .0.01 ]
"29
[; ;PWM.c: 29:     Kp = 16.625;
[e = _Kp .16.625 ]
"30
[; ;PWM.c: 30:     Ki = 0.25;
[e = _Ki .0.25 ]
"31
[; ;PWM.c: 31:     Kd = 0;
[e = _Kd -> -> 0 `i `d ]
"32
[; ;PWM.c: 32:     E = E1 = E2 = 0;
[e = _E = _E1 = _E2 -> -> 0 `i `d ]
"33
[; ;PWM.c: 33:     a1 = a2 = a3 = 0;
[e = _a1 = _a2 = _a3 -> -> 0 `i `d ]
"34
[; ;PWM.c: 34:     out = pre_out = 0;
[e = _out = _pre_out -> -> 0 `i `d ]
"36
[; ;PWM.c: 36:     unsigned int buffer;
[v _buffer `ui ~T0 @X0 1 a ]
"37
[; ;PWM.c: 37:     unsigned int t;
[v _t `ui ~T0 @X0 1 a ]
"39
[; ;PWM.c: 39:     TRISD = 0x00;
[e = _TRISD -> -> 0 `i `uc ]
"41
[; ;PWM.c: 41:     unsigned int period = 255;
[v _period `ui ~T0 @X0 1 a ]
[e = _period -> -> 255 `i `ui ]
"42
[; ;PWM.c: 42:     PWM_Init(period);
[e ( _PWM_Init (1 _period ]
"43
[; ;PWM.c: 43:     Duty_Init(0);
[e ( _Duty_Init (1 -> -> 0 `i `ui ]
"44
[; ;PWM.c: 44:     Timer1_Init();
[e ( _Timer1_Init ..  ]
"45
[; ;PWM.c: 45:     Capture_Init();
[e ( _Capture_Init ..  ]
"46
[; ;PWM.c: 46:     Lcd_Init();
[e ( _Lcd_Init ..  ]
"47
[; ;PWM.c: 47:     Lcd_Write_String("Gia tri: ");
[e ( _Lcd_Write_String (1 :s 1C ]
"48
[; ;PWM.c: 48:     Lcd_Set_Cursor(2,1);
[e ( _Lcd_Set_Cursor (2 , -> -> 2 `i `uc -> -> 1 `i `uc ]
"49
[; ;PWM.c: 49:     Lcd_Write_String("Toc do: ");
[e ( _Lcd_Write_String (1 :s 2C ]
"50
[; ;PWM.c: 50:     RD7 = 1;
[e = _RD7 -> -> 1 `i `b ]
"51
[; ;PWM.c: 51:     while(1)
[e :U 97 ]
"52
[; ;PWM.c: 52:     {
{
"53
[; ;PWM.c: 53:       buffer = CCPR2;
[e = _buffer -> _CCPR2 `ui ]
"54
[; ;PWM.c: 54:       t = 60000000/(buffer*0.2f*8*24);
[e = _t -> / -> -> 60000000 `l `f * * * -> _buffer `f -> .0.2 `f -> -> 8 `i `f -> -> 24 `i `f `ui ]
"56
[; ;PWM.c: 56:       Lcd_Set_Cursor(1,10);
[e ( _Lcd_Set_Cursor (2 , -> -> 1 `i `uc -> -> 10 `i `uc ]
"57
[; ;PWM.c: 57:       Lcd_Write_Char(buffer/10000+48);
[e ( _Lcd_Write_Char (1 -> + / _buffer -> -> 10000 `i `ui -> -> 48 `i `ui `uc ]
"58
[; ;PWM.c: 58:       Lcd_Write_Char((buffer%10000)/1000+48);
[e ( _Lcd_Write_Char (1 -> + / % _buffer -> -> 10000 `i `ui -> -> 1000 `i `ui -> -> 48 `i `ui `uc ]
"59
[; ;PWM.c: 59:       Lcd_Write_Char((buffer%1000)/100+48);
[e ( _Lcd_Write_Char (1 -> + / % _buffer -> -> 1000 `i `ui -> -> 100 `i `ui -> -> 48 `i `ui `uc ]
"60
[; ;PWM.c: 60:       Lcd_Write_Char((buffer%100)/10+48);
[e ( _Lcd_Write_Char (1 -> + / % _buffer -> -> 100 `i `ui -> -> 10 `i `ui -> -> 48 `i `ui `uc ]
"61
[; ;PWM.c: 61:       Lcd_Write_Char(buffer%10+48);
[e ( _Lcd_Write_Char (1 -> + % _buffer -> -> 10 `i `ui -> -> 48 `i `ui `uc ]
"64
[; ;PWM.c: 64:       Lcd_Set_Cursor(2,9);
[e ( _Lcd_Set_Cursor (2 , -> -> 2 `i `uc -> -> 9 `i `uc ]
"65
[; ;PWM.c: 65:       Lcd_Write_Char(t/10000+48);
[e ( _Lcd_Write_Char (1 -> + / _t -> -> 10000 `i `ui -> -> 48 `i `ui `uc ]
"66
[; ;PWM.c: 66:       Lcd_Write_Char((t%10000)/1000+48);
[e ( _Lcd_Write_Char (1 -> + / % _t -> -> 10000 `i `ui -> -> 1000 `i `ui -> -> 48 `i `ui `uc ]
"67
[; ;PWM.c: 67:       Lcd_Write_Char((t%1000)/100+48);
[e ( _Lcd_Write_Char (1 -> + / % _t -> -> 1000 `i `ui -> -> 100 `i `ui -> -> 48 `i `ui `uc ]
"68
[; ;PWM.c: 68:       Lcd_Write_Char((t%100)/10+48);
[e ( _Lcd_Write_Char (1 -> + / % _t -> -> 100 `i `ui -> -> 10 `i `ui -> -> 48 `i `ui `uc ]
"69
[; ;PWM.c: 69:       Lcd_Write_Char(t%10+48);
[e ( _Lcd_Write_Char (1 -> + % _t -> -> 10 `i `ui -> -> 48 `i `ui `uc ]
"70
[; ;PWM.c: 70:       PID_Init(t, 100);
[e ( _PID_Init (2 , _t -> -> 100 `i `ui ]
"71
[; ;PWM.c: 71:       _delay((unsigned long)((10)*(20000000/4000.0)));
[e ( __delay (1 -> * -> -> 10 `i `d / -> -> 20000000 `l `d .4000.0 `ul ]
"72
[; ;PWM.c: 72:     }
}
[e :U 96 ]
[e $U 97  ]
[e :U 98 ]
"73
[; ;PWM.c: 73:     return;
[e $UE 95  ]
"74
[; ;PWM.c: 74: }
[e :UE 95 ]
}
"75
[; ;PWM.c: 75: void PWM_Init(unsigned int period)
[v _PWM_Init `(v ~T0 @X0 1 ef1`ui ]
"76
[; ;PWM.c: 76: {
{
[e :U _PWM_Init ]
"75
[; ;PWM.c: 75: void PWM_Init(unsigned int period)
[v _period `ui ~T0 @X0 1 r1 ]
"76
[; ;PWM.c: 76: {
[f ]
"78
[; ;PWM.c: 78:     PR2 = period;
[e = _PR2 -> _period `uc ]
"80
[; ;PWM.c: 80:     CCP1M3 = 1;
[e = _CCP1M3 -> -> 1 `i `b ]
"81
[; ;PWM.c: 81:     CCP1M2 = 1;
[e = _CCP1M2 -> -> 1 `i `b ]
"83
[; ;PWM.c: 83:     TRISC2 = 0;
[e = _TRISC2 -> -> 0 `i `b ]
"86
[; ;PWM.c: 86:     TMR2 = 0;
[e = _TMR2 -> -> 0 `i `uc ]
"88
[; ;PWM.c: 88:     TOUTPS3 = 0;
[e = _TOUTPS3 -> -> 0 `i `b ]
"89
[; ;PWM.c: 89:     TOUTPS2 = 0;
[e = _TOUTPS2 -> -> 0 `i `b ]
"90
[; ;PWM.c: 90:     TOUTPS1 = 0;
[e = _TOUTPS1 -> -> 0 `i `b ]
"91
[; ;PWM.c: 91:     TOUTPS0 = 0;
[e = _TOUTPS0 -> -> 0 `i `b ]
"92
[; ;PWM.c: 92:     T2CKPS1 = 1;
[e = _T2CKPS1 -> -> 1 `i `b ]
"93
[; ;PWM.c: 93:     T2CKPS0 = 0;
[e = _T2CKPS0 -> -> 0 `i `b ]
"95
[; ;PWM.c: 95:     TMR2ON = 1;
[e = _TMR2ON -> -> 1 `i `b ]
"96
[; ;PWM.c: 96: }
[e :UE 99 ]
}
"97
[; ;PWM.c: 97: void Duty_Init(unsigned int duty)
[v _Duty_Init `(v ~T0 @X0 1 ef1`ui ]
"98
[; ;PWM.c: 98: {
{
[e :U _Duty_Init ]
"97
[; ;PWM.c: 97: void Duty_Init(unsigned int duty)
[v _duty `ui ~T0 @X0 1 r1 ]
"98
[; ;PWM.c: 98: {
[f ]
"100
[; ;PWM.c: 100:   CCP1X = 1;
[e = _CCP1X -> -> 1 `i `b ]
"101
[; ;PWM.c: 101:   CCP1Y = 0;
[e = _CCP1Y -> -> 0 `i `b ]
"102
[; ;PWM.c: 102:   CCPR1L = duty;
[e = _CCPR1L -> _duty `uc ]
"103
[; ;PWM.c: 103: }
[e :UE 100 ]
}
"104
[; ;PWM.c: 104: void Timer1_Init()
[v _Timer1_Init `(v ~T0 @X0 1 ef ]
"105
[; ;PWM.c: 105: {
{
[e :U _Timer1_Init ]
[f ]
"106
[; ;PWM.c: 106:     TMR1 = 0;
[e = _TMR1 -> -> 0 `i `us ]
"108
[; ;PWM.c: 108:     T1CKPS1 = 1;
[e = _T1CKPS1 -> -> 1 `i `b ]
"109
[; ;PWM.c: 109:     T1CKPS0 = 1;
[e = _T1CKPS0 -> -> 1 `i `b ]
"111
[; ;PWM.c: 111:     GIE = 1;
[e = _GIE -> -> 1 `i `b ]
"112
[; ;PWM.c: 112:     PEIE = 1;
[e = _PEIE -> -> 1 `i `b ]
"113
[; ;PWM.c: 113:     TMR1IE = 0;
[e = _TMR1IE -> -> 0 `i `b ]
"115
[; ;PWM.c: 115:     TMR1ON = 1;
[e = _TMR1ON -> -> 1 `i `b ]
"116
[; ;PWM.c: 116: }
[e :UE 101 ]
}
"117
[; ;PWM.c: 117: void Capture_Init()
[v _Capture_Init `(v ~T0 @X0 1 ef ]
"118
[; ;PWM.c: 118: {
{
[e :U _Capture_Init ]
[f ]
"119
[; ;PWM.c: 119:     TRISC1 = 1;
[e = _TRISC1 -> -> 1 `i `b ]
"120
[; ;PWM.c: 120:     CCPR2 = 0;
[e = _CCPR2 -> -> 0 `i `us ]
"121
[; ;PWM.c: 121:     CCP2IE = 1;
[e = _CCP2IE -> -> 1 `i `b ]
"122
[; ;PWM.c: 122:     CCP2M3 = 0;
[e = _CCP2M3 -> -> 0 `i `b ]
"123
[; ;PWM.c: 123:     CCP2M2 = 1;
[e = _CCP2M2 -> -> 1 `i `b ]
"124
[; ;PWM.c: 124:     CCP2M1 = 0;
[e = _CCP2M1 -> -> 0 `i `b ]
"125
[; ;PWM.c: 125:     CCP2M0 = 1;
[e = _CCP2M0 -> -> 1 `i `b ]
"126
[; ;PWM.c: 126: }
[e :UE 102 ]
}
[v $root$_My_interrupt `(v ~T0 @X0 0 e ]
"127
[; ;PWM.c: 127: void __attribute__((picinterrupt(("")))) My_interrupt()
[v _My_interrupt `(v ~T1 @X0 1 ef ]
"128
[; ;PWM.c: 128: {
{
[e :U _My_interrupt ]
[f ]
"129
[; ;PWM.c: 129:     if(CCP2IE == 1 && CCP2IF == 1)
[e $ ! && == -> _CCP2IE `i -> 1 `i == -> _CCP2IF `i -> 1 `i 104  ]
"130
[; ;PWM.c: 130:     {
{
"131
[; ;PWM.c: 131:         TMR1 = 0;
[e = _TMR1 -> -> 0 `i `us ]
"132
[; ;PWM.c: 132:         CCP2IF = 0;
[e = _CCP2IF -> -> 0 `i `b ]
"133
[; ;PWM.c: 133:     }
}
[e :U 104 ]
"134
[; ;PWM.c: 134: }
[e :UE 103 ]
}
"135
[; ;PWM.c: 135: void PID_Init(unsigned int tocdo, unsigned int tocdodat)
[v _PID_Init `(v ~T0 @X0 1 ef2`ui`ui ]
"136
[; ;PWM.c: 136: {
{
[e :U _PID_Init ]
"135
[; ;PWM.c: 135: void PID_Init(unsigned int tocdo, unsigned int tocdodat)
[v _tocdo `ui ~T0 @X0 1 r1 ]
[v _tocdodat `ui ~T0 @X0 1 r2 ]
"136
[; ;PWM.c: 136: {
[f ]
"137
[; ;PWM.c: 137:     E = tocdodat-tocdo;
[e = _E -> - _tocdodat _tocdo `d ]
"138
[; ;PWM.c: 138:     a1 = Kp + (Ki*T)/2 + Kd/2;
[e = _a1 + + _Kp / * _Ki _T -> -> 2 `i `d / _Kd -> -> 2 `i `d ]
"139
[; ;PWM.c: 139:     a2 = -Kp + (Ki*T)/2 - 2*Kd/T;
[e = _a2 - + -U _Kp / * _Ki _T -> -> 2 `i `d / * -> -> 2 `i `d _Kd _T ]
"140
[; ;PWM.c: 140:     a3 = Kd/T;
[e = _a3 / _Kd _T ]
"141
[; ;PWM.c: 141:     out = pre_out + E*a1 + E1*a2 + E2*a3;
[e = _out + + + _pre_out * _E _a1 * _E1 _a2 * _E2 _a3 ]
"142
[; ;PWM.c: 142:     pre_out = out;
[e = _pre_out _out ]
"143
[; ;PWM.c: 143:     E2 = E1;
[e = _E2 _E1 ]
"144
[; ;PWM.c: 144:     E1 = E;
[e = _E1 _E ]
"145
[; ;PWM.c: 145:     if(out > 255) out = 255;
[e $ ! > _out -> -> 255 `i `d 106  ]
[e = _out -> -> 255 `i `d ]
[e :U 106 ]
"146
[; ;PWM.c: 146:     if(out < 0) out = 0;
[e $ ! < _out -> -> 0 `i `d 107  ]
[e = _out -> -> 0 `i `d ]
[e :U 107 ]
"147
[; ;PWM.c: 147:     Duty_Init(out);
[e ( _Duty_Init (1 -> _out `ui ]
"148
[; ;PWM.c: 148: }
[e :UE 105 ]
}
[a 2C 84 111 99 32 100 111 58 32 0 ]
[a 1C 71 105 97 32 116 114 105 58 32 0 ]
