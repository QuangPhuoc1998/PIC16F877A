

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 30 00:18:24 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.05
    30                           ; Generated 20/12/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F877A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0088                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0000                     	;# 
   184  0001                     	;# 
   185  0002                     	;# 
   186  0003                     	;# 
   187  0004                     	;# 
   188  0005                     	;# 
   189  0006                     	;# 
   190  0007                     	;# 
   191  0008                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  000E                     	;# 
   199  000F                     	;# 
   200  0010                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0013                     	;# 
   204  0014                     	;# 
   205  0015                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0017                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001B                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  001D                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  0081                     	;# 
   219  0085                     	;# 
   220  0086                     	;# 
   221  0087                     	;# 
   222  0088                     	;# 
   223  0089                     	;# 
   224  008C                     	;# 
   225  008D                     	;# 
   226  008E                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0094                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  009F                     	;# 
   237  010C                     	;# 
   238  010D                     	;# 
   239  010E                     	;# 
   240  010F                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  000E                     	;# 
   259  000F                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0014                     	;# 
   265  0015                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  001D                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  0081                     	;# 
   279  0085                     	;# 
   280  0086                     	;# 
   281  0087                     	;# 
   282  0088                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  0091                     	;# 
   288  0092                     	;# 
   289  0093                     	;# 
   290  0094                     	;# 
   291  0098                     	;# 
   292  0099                     	;# 
   293  009C                     	;# 
   294  009D                     	;# 
   295  009E                     	;# 
   296  009F                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0019                     _TXREG	set	25
   304  001A                     _RCREG	set	26
   305  0006                     _PORTB	set	6
   306  0041                     _RD1	set	65
   307  0040                     _RD0	set	64
   308  0045                     _RD5	set	69
   309  0044                     _RD4	set	68
   310  0043                     _RD3	set	67
   311  0042                     _RD2	set	66
   312  00C4                     _CREN	set	196
   313  00C7                     _SPEN	set	199
   314  0065                     _RCIF	set	101
   315  005E                     _PEIE	set	94
   316  005F                     _GIE	set	95
   317  0099                     _SPBRG	set	153
   318  0088                     _TRISD	set	136
   319  0086                     _TRISB	set	134
   320  04C1                     _TRMT	set	1217
   321  04C5                     _TXEN	set	1221
   322  043E                     _TRISC6	set	1086
   323  043F                     _TRISC7	set	1087
   324  04C4                     _SYNC	set	1220
   325  04C2                     _BRGH	set	1218
   326  0465                     _RCIE	set	1125
   327                           
   328                           	psect	strings
   329  05B3                     __pstrings:	
   330  05B3                     stringtab:	
   331  05B3                     __stringtab:	
   332  05B3                     stringcode:	
   333                           ;	String table - string pointers are 1 byte each
   334                           
   335  05B3                     stringdir:	
   336  05B3  3005               	movlw	high stringdir
   337  05B4  008A               	movwf	10
   338  05B5  0804               	movf	4,w
   339  05B6  0A84               	incf	4,f
   340  05B7  0782               	addwf	2,f
   341  05B8                     __stringbase:	
   342  05B8  3400               	retlw	0
   343  05B9                     __end_of__stringtab:	
   344  05B9                     STR_1:	
   345  05B9  3478               	retlw	120	;'x'
   346  05BA  3420               	retlw	32	;' '
   347  05BB  343D               	retlw	61	;'='
   348  05BC  3420               	retlw	32	;' '
   349  05BD  3400               	retlw	0
   350  05BE                     STR_2:	
   351  05BE  3479               	retlw	121	;'y'
   352  05BF  3420               	retlw	32	;' '
   353  05C0  343D               	retlw	61	;'='
   354  05C1  3420               	retlw	32	;' '
   355  05C2  3400               	retlw	0
   356                           
   357                           ; #config settings
   358  0000                     
   359                           	psect	cinit
   360  0013                     start_initialization:	
   361  0013                     __initialization:	
   362                           
   363                           ; Clear objects allocated to COMMON
   364  0013  01F7               	clrf	__pbssCOMMON& (0+127)
   365                           
   366                           ; Clear objects allocated to BANK0
   367  0014  1283               	bcf	3,5	;RP0=0, select bank0
   368  0015  1303               	bcf	3,6	;RP1=0, select bank0
   369  0016  01D0               	clrf	__pbssBANK0& (0+127)
   370  0017  01D1               	clrf	(__pbssBANK0+1)& (0+127)
   371  0018  01D2               	clrf	(__pbssBANK0+2)& (0+127)
   372  0019  01D3               	clrf	(__pbssBANK0+3)& (0+127)
   373  001A  01D4               	clrf	(__pbssBANK0+4)& (0+127)
   374  001B  01D5               	clrf	(__pbssBANK0+5)& (0+127)
   375  001C  01D6               	clrf	(__pbssBANK0+6)& (0+127)
   376  001D  01D7               	clrf	(__pbssBANK0+7)& (0+127)
   377  001E  01D8               	clrf	(__pbssBANK0+8)& (0+127)
   378  001F  01D9               	clrf	(__pbssBANK0+9)& (0+127)
   379  0020  01DA               	clrf	(__pbssBANK0+10)& (0+127)
   380  0021  01DB               	clrf	(__pbssBANK0+11)& (0+127)
   381  0022                     end_of_initialization:	
   382                           ;End of C runtime variable initialization code
   383                           
   384  0022                     __end_of__initialization:	
   385  0022  0183               	clrf	3
   386  0023  120A  118A  2C22   	ljmp	_main	;jump to C main() function
   387                           
   388                           	psect	bssCOMMON
   389  0077                     __pbssCOMMON:	
   390  0077                     _a:	
   391  0077                     	ds	1
   392                           
   393                           	psect	bssBANK0
   394  0050                     __pbssBANK0:	
   395  0050                     _y_value:	
   396  0050                     	ds	2
   397  0052                     _x_value:	
   398  0052                     	ds	2
   399  0054                     _data:	
   400  0054                     	ds	8
   401                           
   402                           	psect	cstackCOMMON
   403  0070                     __pcstackCOMMON:	
   404  0070                     ?_Lcd_Init:	
   405  0070                     ?_Lcd_Write_String:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_Lcd_Write_Char:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_UART_Read:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ??_UART_Read:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_UART_Read_Text:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_main:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_My_interrupt:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_Lcd_Port:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_Lcd_Cmd:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?___wmul:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     UART_Read_Text@length:	
   436                           ; 2 bytes @ 0x0
   437                           
   438  0070                     ___wmul@multiplier:	
   439                           ; 2 bytes @ 0x0
   440                           
   441                           
   442                           ; 2 bytes @ 0x0
   443  0070                     	ds	2
   444  0072                     ??_UART_Read_Text:	
   445  0072                     ___wmul@multiplicand:	
   446                           ; 1 bytes @ 0x2
   447                           
   448                           
   449                           ; 2 bytes @ 0x2
   450  0072                     	ds	2
   451  0074                     ??___wmul:	
   452  0074                     UART_Read_Text@Output:	
   453                           ; 1 bytes @ 0x4
   454                           
   455  0074                     ___wmul@product:	
   456                           ; 1 bytes @ 0x4
   457                           
   458                           
   459                           ; 2 bytes @ 0x4
   460  0074                     	ds	1
   461  0075                     UART_Read_Text@i_111:	
   462                           
   463                           ; 2 bytes @ 0x5
   464  0075                     	ds	2
   465                           
   466                           	psect	cstackBANK0
   467  0020                     __pcstackBANK0:	
   468  0020                     ??_My_interrupt:	
   469                           
   470                           ; 1 bytes @ 0x0
   471  0020                     	ds	15
   472  002F                     ??_Lcd_Port:	
   473  002F                     ?___lwmod:	
   474                           ; 1 bytes @ 0xF
   475                           
   476  002F                     ?___aldiv:	
   477                           ; 2 bytes @ 0xF
   478                           
   479  002F                     Lcd_Port@a:	
   480                           ; 4 bytes @ 0xF
   481                           
   482  002F                     ___lwmod@divisor:	
   483                           ; 1 bytes @ 0xF
   484                           
   485  002F                     ___aldiv@divisor:	
   486                           ; 2 bytes @ 0xF
   487                           
   488                           
   489                           ; 4 bytes @ 0xF
   490  002F                     	ds	1
   491  0030                     ??_Lcd_Write_Char:	
   492  0030                     ??_Lcd_Cmd:	
   493                           ; 1 bytes @ 0x10
   494                           
   495                           
   496                           ; 1 bytes @ 0x10
   497  0030                     	ds	1
   498  0031                     Lcd_Write_Char@temp:	
   499  0031                     ___lwmod@dividend:	
   500                           ; 1 bytes @ 0x11
   501                           
   502                           
   503                           ; 2 bytes @ 0x11
   504  0031                     	ds	1
   505  0032                     Lcd_Cmd@a:	
   506  0032                     Lcd_Write_Char@y:	
   507                           ; 1 bytes @ 0x12
   508                           
   509                           
   510                           ; 1 bytes @ 0x12
   511  0032                     	ds	1
   512  0033                     ??_Lcd_Init:	
   513  0033                     ?_Lcd_Set_Cursor:	
   514                           ; 1 bytes @ 0x13
   515                           
   516  0033                     ??___lwmod:	
   517                           ; 1 bytes @ 0x13
   518                           
   519  0033                     Lcd_Set_Cursor@b:	
   520                           ; 1 bytes @ 0x13
   521                           
   522  0033                     Lcd_Write_Char@a:	
   523                           ; 1 bytes @ 0x13
   524                           
   525  0033                     ___aldiv@dividend:	
   526                           ; 1 bytes @ 0x13
   527                           
   528                           
   529                           ; 4 bytes @ 0x13
   530  0033                     	ds	1
   531  0034                     ??_Lcd_Write_String:	
   532  0034                     ??_Lcd_Set_Cursor:	
   533                           ; 1 bytes @ 0x14
   534                           
   535  0034                     ___lwmod@counter:	
   536                           ; 1 bytes @ 0x14
   537                           
   538  0034                     Lcd_Write_String@i:	
   539                           ; 1 bytes @ 0x14
   540                           
   541                           
   542                           ; 2 bytes @ 0x14
   543  0034                     	ds	1
   544  0035                     ?___lwdiv:	
   545  0035                     ___lwdiv@divisor:	
   546                           ; 2 bytes @ 0x15
   547                           
   548                           
   549                           ; 2 bytes @ 0x15
   550  0035                     	ds	1
   551  0036                     Lcd_Set_Cursor@a:	
   552  0036                     Lcd_Write_String@a:	
   553                           ; 1 bytes @ 0x16
   554                           
   555                           
   556                           ; 1 bytes @ 0x16
   557  0036                     	ds	1
   558  0037                     ??___aldiv:	
   559  0037                     Lcd_Set_Cursor@z:	
   560                           ; 1 bytes @ 0x17
   561                           
   562  0037                     ___lwdiv@dividend:	
   563                           ; 1 bytes @ 0x17
   564                           
   565                           
   566                           ; 2 bytes @ 0x17
   567  0037                     	ds	1
   568  0038                     Lcd_Set_Cursor@y:	
   569  0038                     ___aldiv@counter:	
   570                           ; 1 bytes @ 0x18
   571                           
   572                           
   573                           ; 1 bytes @ 0x18
   574  0038                     	ds	1
   575  0039                     ??___lwdiv:	
   576  0039                     Lcd_Set_Cursor@temp:	
   577                           ; 1 bytes @ 0x19
   578                           
   579  0039                     ___aldiv@sign:	
   580                           ; 1 bytes @ 0x19
   581                           
   582                           
   583                           ; 1 bytes @ 0x19
   584  0039                     	ds	1
   585  003A                     ___lwdiv@quotient:	
   586  003A                     ___aldiv@quotient:	
   587                           ; 2 bytes @ 0x1A
   588                           
   589                           
   590                           ; 4 bytes @ 0x1A
   591  003A                     	ds	2
   592  003C                     ___lwdiv@counter:	
   593                           
   594                           ; 1 bytes @ 0x1C
   595  003C                     	ds	1
   596  003D                     ?_Lcd_Display:	
   597  003D                     Lcd_Display@x_value:	
   598                           ; 1 bytes @ 0x1D
   599                           
   600                           
   601                           ; 2 bytes @ 0x1D
   602  003D                     	ds	1
   603  003E                     ?_UART_Init:	
   604  003E                     UART_Init@baudrate:	
   605                           ; 1 bytes @ 0x1E
   606                           
   607                           
   608                           ; 4 bytes @ 0x1E
   609  003E                     	ds	1
   610  003F                     Lcd_Display@y_value:	
   611                           
   612                           ; 2 bytes @ 0x1F
   613  003F                     	ds	2
   614  0041                     ??_Lcd_Display:	
   615                           
   616                           ; 1 bytes @ 0x21
   617  0041                     	ds	1
   618  0042                     ??_UART_Init:	
   619                           
   620                           ; 1 bytes @ 0x22
   621  0042                     	ds	12
   622  004E                     UART_Init@x:	
   623                           
   624                           ; 2 bytes @ 0x2E
   625  004E                     	ds	2
   626  0050                     ??_main:	
   627                           
   628                           	psect	maintext
   629  0422                     __pmaintext:	
   630                           ; 1 bytes @ 0x30
   631 ;;
   632 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   633 ;;
   634 ;; *************** function _main *****************
   635 ;; Defined at:
   636 ;;		line 17 in file "UART_receive.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;		None
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : B00/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   650 ;;      Params:         0       0       0       0       0
   651 ;;      Locals:         0       0       0       0       0
   652 ;;      Temps:          0       0       0       0       0
   653 ;;      Totals:         0       0       0       0       0
   654 ;;Total ram usage:        0 bytes
   655 ;; Hardware stack levels required when called:    7
   656 ;; This function calls:
   657 ;;		_Lcd_Display
   658 ;;		_Lcd_Init
   659 ;;		_Lcd_Set_Cursor
   660 ;;		_Lcd_Write_String
   661 ;;		_UART_Init
   662 ;; This function is called by:
   663 ;;		Startup code after reset
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _main
   669  0422                     _main:	
   670                           
   671                           ;UART_receive.c: 22:     TRISB = 0x00;
   672                           
   673                           ;incstack = 0
   674                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   675  0422  1683               	bsf	3,5	;RP0=1, select bank1
   676  0423  1303               	bcf	3,6	;RP1=0, select bank1
   677  0424  0186               	clrf	6	;volatile
   678                           
   679                           ;UART_receive.c: 23:     PORTB = 0xAA;
   680  0425  30AA               	movlw	170
   681  0426  1283               	bcf	3,5	;RP0=0, select bank0
   682  0427  1303               	bcf	3,6	;RP1=0, select bank0
   683  0428  0086               	movwf	6	;volatile
   684                           
   685                           ;UART_receive.c: 24:     TRISD = 0x00;
   686  0429  1683               	bsf	3,5	;RP0=1, select bank1
   687  042A  1303               	bcf	3,6	;RP1=0, select bank1
   688  042B  0188               	clrf	8	;volatile
   689                           
   690                           ;UART_receive.c: 26:     GIE = 1;
   691  042C  178B               	bsf	11,7	;volatile
   692                           
   693                           ;UART_receive.c: 27:     PEIE = 1;
   694  042D  170B               	bsf	11,6	;volatile
   695                           
   696                           ;UART_receive.c: 28:     RCIE = 1;
   697  042E  168C               	bsf	12,5	;volatile
   698                           
   699                           ;UART_receive.c: 30:     UART_Init(9600);
   700  042F  3000               	movlw	0
   701  0430  1283               	bcf	3,5	;RP0=0, select bank0
   702  0431  1303               	bcf	3,6	;RP1=0, select bank0
   703  0432  00C1               	movwf	UART_Init@baudrate+3
   704  0433  3000               	movlw	0
   705  0434  00C0               	movwf	UART_Init@baudrate+2
   706  0435  3025               	movlw	37
   707  0436  00BF               	movwf	UART_Init@baudrate+1
   708  0437  3080               	movlw	128
   709  0438  00BE               	movwf	UART_Init@baudrate
   710  0439  120A  118A  2139  120A  118A  	fcall	_UART_Init
   711                           
   712                           ;UART_receive.c: 31:     Lcd_Init();
   713  043E  120A  118A  2371  120A  118A  	fcall	_Lcd_Init
   714                           
   715                           ;UART_receive.c: 33:     Lcd_Write_String("x = ");
   716  0443  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   717  0444  120A  118A  2518  120A  118A  	fcall	_Lcd_Write_String
   718                           
   719                           ;UART_receive.c: 34:     Lcd_Set_Cursor(2,1);
   720  0449  1283               	bcf	3,5	;RP0=0, select bank0
   721  044A  1303               	bcf	3,6	;RP1=0, select bank0
   722  044B  01B3               	clrf	Lcd_Set_Cursor@b
   723  044C  0AB3               	incf	Lcd_Set_Cursor@b,f
   724  044D  3002               	movlw	2
   725  044E  120A  118A  23D2  120A  118A  	fcall	_Lcd_Set_Cursor
   726                           
   727                           ;UART_receive.c: 35:     Lcd_Write_String("y = ");
   728  0453  3006               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   729  0454  120A  118A  2518  120A  118A  	fcall	_Lcd_Write_String
   730  0459                     l1412:	
   731                           
   732                           ;UART_receive.c: 37:     {;UART_receive.c: 38:        Lcd_Display(x_value, y_value);
   733  0459  1283               	bcf	3,5	;RP0=0, select bank0
   734  045A  1303               	bcf	3,6	;RP1=0, select bank0
   735  045B  0853               	movf	_x_value+1,w
   736  045C  00BE               	movwf	Lcd_Display@x_value+1
   737  045D  0852               	movf	_x_value,w
   738  045E  00BD               	movwf	Lcd_Display@x_value
   739  045F  0851               	movf	_y_value+1,w
   740  0460  00C0               	movwf	Lcd_Display@y_value+1
   741  0461  0850               	movf	_y_value,w
   742  0462  00BF               	movwf	Lcd_Display@y_value
   743  0463  120A  118A  2026  120A  118A  	fcall	_Lcd_Display
   744  0468  2C59               	goto	l1412
   745  0469                     __end_of_main:	
   746                           
   747                           	psect	text1
   748  0139                     __ptext1:	
   749 ;; *************** function _UART_Init *****************
   750 ;; Defined at:
   751 ;;		line 6 in file "USART.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  baudrate        4   30[BANK0 ] const long 
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  x               2   46[BANK0 ] unsigned int 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      unsigned char 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0, pclath, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   765 ;;      Params:         0       4       0       0       0
   766 ;;      Locals:         0       2       0       0       0
   767 ;;      Temps:          0      12       0       0       0
   768 ;;      Totals:         0      18       0       0       0
   769 ;;Total ram usage:       18 bytes
   770 ;; Hardware stack levels used:    1
   771 ;; Hardware stack levels required when called:    4
   772 ;; This function calls:
   773 ;;		___aldiv
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           
   780                           ;psect for function _UART_Init
   781  0139                     _UART_Init:	
   782                           
   783                           ;USART.c: 6: char UART_Init(const long int baudrate);USART.c: 7: {;USART.c: 8:  unsigned
      +                           int x;;USART.c: 9:  x = (20000000 - baudrate*64)/(baudrate*64);
   784                           
   785                           ;incstack = 0
   786                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   787  0139  1283               	bcf	3,5	;RP0=0, select bank0
   788  013A  1303               	bcf	3,6	;RP1=0, select bank0
   789  013B  083E               	movf	UART_Init@baudrate,w
   790  013C  00C2               	movwf	??_UART_Init
   791  013D  083F               	movf	UART_Init@baudrate+1,w
   792  013E  00C3               	movwf	??_UART_Init+1
   793  013F  0840               	movf	UART_Init@baudrate+2,w
   794  0140  00C4               	movwf	??_UART_Init+2
   795  0141  0841               	movf	UART_Init@baudrate+3,w
   796  0142  00C5               	movwf	??_UART_Init+3
   797  0143  3006               	movlw	6
   798  0144                     u865:	
   799  0144  1003               	clrc
   800  0145  0DC2               	rlf	??_UART_Init,f
   801  0146  0DC3               	rlf	??_UART_Init+1,f
   802  0147  0DC4               	rlf	??_UART_Init+2,f
   803  0148  0DC5               	rlf	??_UART_Init+3,f
   804  0149  3EFF               	addlw	-1
   805  014A  1D03               	skipz
   806  014B  2944               	goto	u865
   807  014C  0845               	movf	??_UART_Init+3,w
   808  014D  00B2               	movwf	___aldiv@divisor+3
   809  014E  0844               	movf	??_UART_Init+2,w
   810  014F  00B1               	movwf	___aldiv@divisor+2
   811  0150  0843               	movf	??_UART_Init+1,w
   812  0151  00B0               	movwf	___aldiv@divisor+1
   813  0152  0842               	movf	??_UART_Init,w
   814  0153  00AF               	movwf	___aldiv@divisor
   815  0154  083E               	movf	UART_Init@baudrate,w
   816  0155  00C6               	movwf	??_UART_Init+4
   817  0156  083F               	movf	UART_Init@baudrate+1,w
   818  0157  00C7               	movwf	??_UART_Init+5
   819  0158  0840               	movf	UART_Init@baudrate+2,w
   820  0159  00C8               	movwf	??_UART_Init+6
   821  015A  0841               	movf	UART_Init@baudrate+3,w
   822  015B  00C9               	movwf	??_UART_Init+7
   823  015C  3006               	movlw	6
   824  015D                     u875:	
   825  015D  1003               	clrc
   826  015E  0DC6               	rlf	??_UART_Init+4,f
   827  015F  0DC7               	rlf	??_UART_Init+5,f
   828  0160  0DC8               	rlf	??_UART_Init+6,f
   829  0161  0DC9               	rlf	??_UART_Init+7,f
   830  0162  3EFF               	addlw	-1
   831  0163  1D03               	skipz
   832  0164  295D               	goto	u875
   833  0165  3000               	movlw	0
   834  0166  00CA               	movwf	??_UART_Init+8
   835  0167  302D               	movlw	45
   836  0168  00CB               	movwf	??_UART_Init+9
   837  0169  3031               	movlw	49
   838  016A  00CC               	movwf	??_UART_Init+10
   839  016B  3001               	movlw	1
   840  016C  00CD               	movwf	??_UART_Init+11
   841  016D  0846               	movf	??_UART_Init+4,w
   842  016E  02CA               	subwf	??_UART_Init+8,f
   843  016F  0847               	movf	??_UART_Init+5,w
   844  0170  1C03               	skipc
   845  0171  0F47               	incfsz	??_UART_Init+5,w
   846  0172  2974               	goto	u881
   847  0173  2975               	goto	u882
   848  0174                     u881:	
   849  0174  02CB               	subwf	??_UART_Init+9,f
   850  0175                     u882:	
   851  0175  0848               	movf	??_UART_Init+6,w
   852  0176  1C03               	skipc
   853  0177  0F48               	incfsz	??_UART_Init+6,w
   854  0178  297A               	goto	u883
   855  0179  297B               	goto	u884
   856  017A                     u883:	
   857  017A  02CC               	subwf	??_UART_Init+10,f
   858  017B                     u884:	
   859  017B  0849               	movf	??_UART_Init+7,w
   860  017C  1C03               	skipc
   861  017D  0F49               	incfsz	??_UART_Init+7,w
   862  017E  2980               	goto	u885
   863  017F  2981               	goto	u886
   864  0180                     u885:	
   865  0180  02CD               	subwf	??_UART_Init+11,f
   866  0181                     u886:	
   867  0181  084D               	movf	??_UART_Init+11,w
   868  0182  00B6               	movwf	___aldiv@dividend+3
   869  0183  084C               	movf	??_UART_Init+10,w
   870  0184  00B5               	movwf	___aldiv@dividend+2
   871  0185  084B               	movf	??_UART_Init+9,w
   872  0186  00B4               	movwf	___aldiv@dividend+1
   873  0187  084A               	movf	??_UART_Init+8,w
   874  0188  00B3               	movwf	___aldiv@dividend
   875  0189  120A  118A  22E2  120A  118A  	fcall	___aldiv
   876  018E  1283               	bcf	3,5	;RP0=0, select bank0
   877  018F  1303               	bcf	3,6	;RP1=0, select bank0
   878  0190  0830               	movf	?___aldiv+1,w
   879  0191  00CF               	movwf	UART_Init@x+1
   880  0192  082F               	movf	?___aldiv,w
   881  0193  00CE               	movwf	UART_Init@x
   882                           
   883                           ;USART.c: 10:  if(x>255)
   884  0194  3001               	movlw	1
   885  0195  024F               	subwf	UART_Init@x+1,w
   886  0196  3000               	movlw	0
   887  0197  1903               	skipnz
   888  0198  024E               	subwf	UART_Init@x,w
   889  0199  1C03               	skipc
   890  019A  29F7               	goto	l1206
   891                           
   892                           ;USART.c: 11:  {;USART.c: 12:   x = (20000000 - baudrate*16)/(baudrate*16);
   893  019B  083E               	movf	UART_Init@baudrate,w
   894  019C  00C2               	movwf	??_UART_Init
   895  019D  083F               	movf	UART_Init@baudrate+1,w
   896  019E  00C3               	movwf	??_UART_Init+1
   897  019F  0840               	movf	UART_Init@baudrate+2,w
   898  01A0  00C4               	movwf	??_UART_Init+2
   899  01A1  0841               	movf	UART_Init@baudrate+3,w
   900  01A2  00C5               	movwf	??_UART_Init+3
   901  01A3  3004               	movlw	4
   902  01A4                     u905:	
   903  01A4  1003               	clrc
   904  01A5  0DC2               	rlf	??_UART_Init,f
   905  01A6  0DC3               	rlf	??_UART_Init+1,f
   906  01A7  0DC4               	rlf	??_UART_Init+2,f
   907  01A8  0DC5               	rlf	??_UART_Init+3,f
   908  01A9  3EFF               	addlw	-1
   909  01AA  1D03               	skipz
   910  01AB  29A4               	goto	u905
   911  01AC  0845               	movf	??_UART_Init+3,w
   912  01AD  00B2               	movwf	___aldiv@divisor+3
   913  01AE  0844               	movf	??_UART_Init+2,w
   914  01AF  00B1               	movwf	___aldiv@divisor+2
   915  01B0  0843               	movf	??_UART_Init+1,w
   916  01B1  00B0               	movwf	___aldiv@divisor+1
   917  01B2  0842               	movf	??_UART_Init,w
   918  01B3  00AF               	movwf	___aldiv@divisor
   919  01B4  083E               	movf	UART_Init@baudrate,w
   920  01B5  00C6               	movwf	??_UART_Init+4
   921  01B6  083F               	movf	UART_Init@baudrate+1,w
   922  01B7  00C7               	movwf	??_UART_Init+5
   923  01B8  0840               	movf	UART_Init@baudrate+2,w
   924  01B9  00C8               	movwf	??_UART_Init+6
   925  01BA  0841               	movf	UART_Init@baudrate+3,w
   926  01BB  00C9               	movwf	??_UART_Init+7
   927  01BC  3004               	movlw	4
   928  01BD                     u915:	
   929  01BD  1003               	clrc
   930  01BE  0DC6               	rlf	??_UART_Init+4,f
   931  01BF  0DC7               	rlf	??_UART_Init+5,f
   932  01C0  0DC8               	rlf	??_UART_Init+6,f
   933  01C1  0DC9               	rlf	??_UART_Init+7,f
   934  01C2  3EFF               	addlw	-1
   935  01C3  1D03               	skipz
   936  01C4  29BD               	goto	u915
   937  01C5  3000               	movlw	0
   938  01C6  00CA               	movwf	??_UART_Init+8
   939  01C7  302D               	movlw	45
   940  01C8  00CB               	movwf	??_UART_Init+9
   941  01C9  3031               	movlw	49
   942  01CA  00CC               	movwf	??_UART_Init+10
   943  01CB  3001               	movlw	1
   944  01CC  00CD               	movwf	??_UART_Init+11
   945  01CD  0846               	movf	??_UART_Init+4,w
   946  01CE  02CA               	subwf	??_UART_Init+8,f
   947  01CF  0847               	movf	??_UART_Init+5,w
   948  01D0  1C03               	skipc
   949  01D1  0F47               	incfsz	??_UART_Init+5,w
   950  01D2  29D4               	goto	u921
   951  01D3  29D5               	goto	u922
   952  01D4                     u921:	
   953  01D4  02CB               	subwf	??_UART_Init+9,f
   954  01D5                     u922:	
   955  01D5  0848               	movf	??_UART_Init+6,w
   956  01D6  1C03               	skipc
   957  01D7  0F48               	incfsz	??_UART_Init+6,w
   958  01D8  29DA               	goto	u923
   959  01D9  29DB               	goto	u924
   960  01DA                     u923:	
   961  01DA  02CC               	subwf	??_UART_Init+10,f
   962  01DB                     u924:	
   963  01DB  0849               	movf	??_UART_Init+7,w
   964  01DC  1C03               	skipc
   965  01DD  0F49               	incfsz	??_UART_Init+7,w
   966  01DE  29E0               	goto	u925
   967  01DF  29E1               	goto	u926
   968  01E0                     u925:	
   969  01E0  02CD               	subwf	??_UART_Init+11,f
   970  01E1                     u926:	
   971  01E1  084D               	movf	??_UART_Init+11,w
   972  01E2  00B6               	movwf	___aldiv@dividend+3
   973  01E3  084C               	movf	??_UART_Init+10,w
   974  01E4  00B5               	movwf	___aldiv@dividend+2
   975  01E5  084B               	movf	??_UART_Init+9,w
   976  01E6  00B4               	movwf	___aldiv@dividend+1
   977  01E7  084A               	movf	??_UART_Init+8,w
   978  01E8  00B3               	movwf	___aldiv@dividend
   979  01E9  120A  118A  22E2  120A  118A  	fcall	___aldiv
   980  01EE  1283               	bcf	3,5	;RP0=0, select bank0
   981  01EF  1303               	bcf	3,6	;RP1=0, select bank0
   982  01F0  0830               	movf	?___aldiv+1,w
   983  01F1  00CF               	movwf	UART_Init@x+1
   984  01F2  082F               	movf	?___aldiv,w
   985  01F3  00CE               	movwf	UART_Init@x
   986                           
   987                           ;USART.c: 13:   BRGH = 1;
   988  01F4  1683               	bsf	3,5	;RP0=1, select bank1
   989  01F5  1303               	bcf	3,6	;RP1=0, select bank1
   990  01F6  1518               	bsf	24,2	;volatile
   991  01F7                     l1206:	
   992                           
   993                           ;USART.c: 15:  if(x<256)
   994  01F7  3001               	movlw	1
   995  01F8  1283               	bcf	3,5	;RP0=0, select bank0
   996  01F9  024F               	subwf	UART_Init@x+1,w
   997  01FA  3000               	movlw	0
   998  01FB  1903               	skipnz
   999  01FC  024E               	subwf	UART_Init@x,w
  1000  01FD  1803               	skipnc
  1001  01FE  0008               	return
  1002                           
  1003                           ;USART.c: 16:  {;USART.c: 17:    SPBRG = x;
  1004  01FF  084E               	movf	UART_Init@x,w
  1005  0200  1683               	bsf	3,5	;RP0=1, select bank1
  1006  0201  1303               	bcf	3,6	;RP1=0, select bank1
  1007  0202  0099               	movwf	25	;volatile
  1008                           
  1009                           ;USART.c: 18:    SYNC = 0;
  1010  0203  1218               	bcf	24,4	;volatile
  1011                           
  1012                           ;USART.c: 19:    SPEN = 1;
  1013  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0205  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0206  1798               	bsf	24,7	;volatile
  1016                           
  1017                           ;USART.c: 20:       TRISC7 = 1;
  1018  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1019  0208  1303               	bcf	3,6	;RP1=0, select bank1
  1020  0209  1787               	bsf	7,7	;volatile
  1021                           
  1022                           ;USART.c: 21:       TRISC6 = 0;
  1023  020A  1307               	bcf	7,6	;volatile
  1024                           
  1025                           ;USART.c: 22:       CREN = 1;
  1026  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1027  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1028  020D  1618               	bsf	24,4	;volatile
  1029                           
  1030                           ;USART.c: 23:       TXEN = 1;
  1031  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1032  020F  1303               	bcf	3,6	;RP1=0, select bank1
  1033  0210  1698               	bsf	24,5	;volatile
  1034  0211  0008               	return
  1035  0212                     __end_of_UART_Init:	
  1036                           
  1037                           	psect	text2
  1038  02E2                     __ptext2:	
  1039 ;; *************** function ___aldiv *****************
  1040 ;; Defined at:
  1041 ;;		line 5 in file "D:\Mplab X\xc8\pic\sources\c90\common\aldiv.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  divisor         4   15[BANK0 ] long 
  1044 ;;  dividend        4   19[BANK0 ] long 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  quotient        4   26[BANK0 ] long 
  1047 ;;  sign            1   25[BANK0 ] unsigned char 
  1048 ;;  counter         1   24[BANK0 ] unsigned char 
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  4   15[BANK0 ] long 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1058 ;;      Params:         0       8       0       0       0
  1059 ;;      Locals:         0       6       0       0       0
  1060 ;;      Temps:          0       1       0       0       0
  1061 ;;      Totals:         0      15       0       0       0
  1062 ;;Total ram usage:       15 bytes
  1063 ;; Hardware stack levels used:    1
  1064 ;; Hardware stack levels required when called:    3
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_UART_Init
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           
  1073                           ;psect for function ___aldiv
  1074  02E2                     ___aldiv:	
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1078  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1079  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1080  02E4  01B9               	clrf	___aldiv@sign
  1081  02E5  1FB2               	btfss	___aldiv@divisor+3,7
  1082  02E6  2AF4               	goto	l321
  1083  02E7  09AF               	comf	___aldiv@divisor,f
  1084  02E8  09B0               	comf	___aldiv@divisor+1,f
  1085  02E9  09B1               	comf	___aldiv@divisor+2,f
  1086  02EA  09B2               	comf	___aldiv@divisor+3,f
  1087  02EB  0AAF               	incf	___aldiv@divisor,f
  1088  02EC  1903               	skipnz
  1089  02ED  0AB0               	incf	___aldiv@divisor+1,f
  1090  02EE  1903               	skipnz
  1091  02EF  0AB1               	incf	___aldiv@divisor+2,f
  1092  02F0  1903               	skipnz
  1093  02F1  0AB2               	incf	___aldiv@divisor+3,f
  1094  02F2  01B9               	clrf	___aldiv@sign
  1095  02F3  0AB9               	incf	___aldiv@sign,f
  1096  02F4                     l321:	
  1097  02F4  1FB6               	btfss	___aldiv@dividend+3,7
  1098  02F5  2B05               	goto	l1120
  1099  02F6  09B3               	comf	___aldiv@dividend,f
  1100  02F7  09B4               	comf	___aldiv@dividend+1,f
  1101  02F8  09B5               	comf	___aldiv@dividend+2,f
  1102  02F9  09B6               	comf	___aldiv@dividend+3,f
  1103  02FA  0AB3               	incf	___aldiv@dividend,f
  1104  02FB  1903               	skipnz
  1105  02FC  0AB4               	incf	___aldiv@dividend+1,f
  1106  02FD  1903               	skipnz
  1107  02FE  0AB5               	incf	___aldiv@dividend+2,f
  1108  02FF  1903               	skipnz
  1109  0300  0AB6               	incf	___aldiv@dividend+3,f
  1110  0301  3001               	movlw	1
  1111  0302  00B7               	movwf	??___aldiv
  1112  0303  0837               	movf	??___aldiv,w
  1113  0304  06B9               	xorwf	___aldiv@sign,f
  1114  0305                     l1120:	
  1115  0305  3000               	movlw	0
  1116  0306  00BD               	movwf	___aldiv@quotient+3
  1117  0307  3000               	movlw	0
  1118  0308  00BC               	movwf	___aldiv@quotient+2
  1119  0309  3000               	movlw	0
  1120  030A  00BB               	movwf	___aldiv@quotient+1
  1121  030B  3000               	movlw	0
  1122  030C  00BA               	movwf	___aldiv@quotient
  1123  030D  0832               	movf	___aldiv@divisor+3,w
  1124  030E  0431               	iorwf	___aldiv@divisor+2,w
  1125  030F  0430               	iorwf	___aldiv@divisor+1,w
  1126  0310  042F               	iorwf	___aldiv@divisor,w
  1127  0311  1903               	skipnz
  1128  0312  2B5A               	goto	l1142
  1129  0313  01B8               	clrf	___aldiv@counter
  1130  0314  0AB8               	incf	___aldiv@counter,f
  1131  0315                     l1128:	
  1132  0315  1BB2               	btfsc	___aldiv@divisor+3,7
  1133  0316  2B25               	goto	l1130
  1134  0317  3001               	movlw	1
  1135  0318  00B7               	movwf	??___aldiv
  1136  0319                     u665:	
  1137  0319  1003               	clrc
  1138  031A  0DAF               	rlf	___aldiv@divisor,f
  1139  031B  0DB0               	rlf	___aldiv@divisor+1,f
  1140  031C  0DB1               	rlf	___aldiv@divisor+2,f
  1141  031D  0DB2               	rlf	___aldiv@divisor+3,f
  1142  031E  0BB7               	decfsz	??___aldiv,f
  1143  031F  2B19               	goto	u665
  1144  0320  3001               	movlw	1
  1145  0321  00B7               	movwf	??___aldiv
  1146  0322  0837               	movf	??___aldiv,w
  1147  0323  07B8               	addwf	___aldiv@counter,f
  1148  0324  2B15               	goto	l1128
  1149  0325                     l1130:	
  1150  0325  3001               	movlw	1
  1151  0326  00B7               	movwf	??___aldiv
  1152  0327                     u685:	
  1153  0327  1003               	clrc
  1154  0328  0DBA               	rlf	___aldiv@quotient,f
  1155  0329  0DBB               	rlf	___aldiv@quotient+1,f
  1156  032A  0DBC               	rlf	___aldiv@quotient+2,f
  1157  032B  0DBD               	rlf	___aldiv@quotient+3,f
  1158  032C  0BB7               	decfsz	??___aldiv,f
  1159  032D  2B27               	goto	u685
  1160  032E  0832               	movf	___aldiv@divisor+3,w
  1161  032F  0236               	subwf	___aldiv@dividend+3,w
  1162  0330  1D03               	skipz
  1163  0331  2B3C               	goto	u695
  1164  0332  0831               	movf	___aldiv@divisor+2,w
  1165  0333  0235               	subwf	___aldiv@dividend+2,w
  1166  0334  1D03               	skipz
  1167  0335  2B3C               	goto	u695
  1168  0336  0830               	movf	___aldiv@divisor+1,w
  1169  0337  0234               	subwf	___aldiv@dividend+1,w
  1170  0338  1D03               	skipz
  1171  0339  2B3C               	goto	u695
  1172  033A  082F               	movf	___aldiv@divisor,w
  1173  033B  0233               	subwf	___aldiv@dividend,w
  1174  033C                     u695:	
  1175  033C  1C03               	skipc
  1176  033D  2B4D               	goto	l1138
  1177  033E  082F               	movf	___aldiv@divisor,w
  1178  033F  02B3               	subwf	___aldiv@dividend,f
  1179  0340  0830               	movf	___aldiv@divisor+1,w
  1180  0341  1C03               	skipc
  1181  0342  0F30               	incfsz	___aldiv@divisor+1,w
  1182  0343  02B4               	subwf	___aldiv@dividend+1,f
  1183  0344  0831               	movf	___aldiv@divisor+2,w
  1184  0345  1C03               	skipc
  1185  0346  0F31               	incfsz	___aldiv@divisor+2,w
  1186  0347  02B5               	subwf	___aldiv@dividend+2,f
  1187  0348  0832               	movf	___aldiv@divisor+3,w
  1188  0349  1C03               	skipc
  1189  034A  0F32               	incfsz	___aldiv@divisor+3,w
  1190  034B  02B6               	subwf	___aldiv@dividend+3,f
  1191  034C  143A               	bsf	___aldiv@quotient,0
  1192  034D                     l1138:	
  1193  034D  3001               	movlw	1
  1194  034E                     u705:	
  1195  034E  1003               	clrc
  1196  034F  0CB2               	rrf	___aldiv@divisor+3,f
  1197  0350  0CB1               	rrf	___aldiv@divisor+2,f
  1198  0351  0CB0               	rrf	___aldiv@divisor+1,f
  1199  0352  0CAF               	rrf	___aldiv@divisor,f
  1200  0353  3EFF               	addlw	-1
  1201  0354  1D03               	skipz
  1202  0355  2B4E               	goto	u705
  1203  0356  3001               	movlw	1
  1204  0357  02B8               	subwf	___aldiv@counter,f
  1205  0358  1D03               	btfss	3,2
  1206  0359  2B25               	goto	l1130
  1207  035A                     l1142:	
  1208  035A  0839               	movf	___aldiv@sign,w
  1209  035B  1903               	btfsc	3,2
  1210  035C  2B68               	goto	l1146
  1211  035D  09BA               	comf	___aldiv@quotient,f
  1212  035E  09BB               	comf	___aldiv@quotient+1,f
  1213  035F  09BC               	comf	___aldiv@quotient+2,f
  1214  0360  09BD               	comf	___aldiv@quotient+3,f
  1215  0361  0ABA               	incf	___aldiv@quotient,f
  1216  0362  1903               	skipnz
  1217  0363  0ABB               	incf	___aldiv@quotient+1,f
  1218  0364  1903               	skipnz
  1219  0365  0ABC               	incf	___aldiv@quotient+2,f
  1220  0366  1903               	skipnz
  1221  0367  0ABD               	incf	___aldiv@quotient+3,f
  1222  0368                     l1146:	
  1223  0368  083D               	movf	___aldiv@quotient+3,w
  1224  0369  00B2               	movwf	?___aldiv+3
  1225  036A  083C               	movf	___aldiv@quotient+2,w
  1226  036B  00B1               	movwf	?___aldiv+2
  1227  036C  083B               	movf	___aldiv@quotient+1,w
  1228  036D  00B0               	movwf	?___aldiv+1
  1229  036E  083A               	movf	___aldiv@quotient,w
  1230  036F  00AF               	movwf	?___aldiv
  1231  0370  0008               	return
  1232  0371                     __end_of___aldiv:	
  1233                           
  1234                           	psect	text3
  1235  0518                     __ptext3:	
  1236 ;; *************** function _Lcd_Write_String *****************
  1237 ;; Defined at:
  1238 ;;		line 98 in file "lcd4.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  a               1    wreg     PTR unsigned char 
  1241 ;;		 -> STR_2(5), STR_1(5), 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  a               1   22[BANK0 ] PTR unsigned char 
  1244 ;;		 -> STR_2(5), STR_1(5), 
  1245 ;;  i               2   20[BANK0 ] int 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1255 ;;      Params:         0       0       0       0       0
  1256 ;;      Locals:         0       3       0       0       0
  1257 ;;      Temps:          0       0       0       0       0
  1258 ;;      Totals:         0       3       0       0       0
  1259 ;;Total ram usage:        3 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    5
  1262 ;; This function calls:
  1263 ;;		_Lcd_Write_Char
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           
  1270                           ;psect for function _Lcd_Write_String
  1271  0518                     _Lcd_Write_String:	
  1272                           
  1273                           ;incstack = 0
  1274                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1275                           ;Lcd_Write_String@a stored from wreg
  1276  0518  1283               	bcf	3,5	;RP0=0, select bank0
  1277  0519  1303               	bcf	3,6	;RP1=0, select bank0
  1278  051A  00B6               	movwf	Lcd_Write_String@a
  1279                           
  1280                           ;lcd4.c: 98: void Lcd_Write_String(char *a);lcd4.c: 99: {;lcd4.c: 100:  int i;;lcd4.c: 1
      +                          01:  for(i=0;a[i]!='\0';i++)
  1281  051B  01B4               	clrf	Lcd_Write_String@i
  1282  051C  01B5               	clrf	Lcd_Write_String@i+1
  1283  051D                     l1386:	
  1284  051D  0834               	movf	Lcd_Write_String@i,w
  1285  051E  0736               	addwf	Lcd_Write_String@a,w
  1286  051F  0084               	movwf	4
  1287  0520  120A  118A  25B3  120A  118A  	fcall	stringdir
  1288  0525  3A00               	xorlw	0
  1289  0526  1903               	btfsc	3,2
  1290  0527  0008               	return
  1291                           
  1292                           ;lcd4.c: 102:     Lcd_Write_Char(a[i]);
  1293  0528  0834               	movf	Lcd_Write_String@i,w
  1294  0529  0736               	addwf	Lcd_Write_String@a,w
  1295  052A  0084               	movwf	4
  1296  052B  120A  118A  25B3  120A  118A  	fcall	stringdir
  1297  0530  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1298  0535  3001               	movlw	1
  1299  0536  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0537  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0538  07B4               	addwf	Lcd_Write_String@i,f
  1302  0539  1803               	skipnc
  1303  053A  0AB5               	incf	Lcd_Write_String@i+1,f
  1304  053B  3000               	movlw	0
  1305  053C  07B5               	addwf	Lcd_Write_String@i+1,f
  1306  053D  2D1D               	goto	l1386
  1307  053E                     __end_of_Lcd_Write_String:	
  1308                           
  1309                           	psect	text4
  1310  0371                     __ptext4:	
  1311 ;; *************** function _Lcd_Init *****************
  1312 ;; Defined at:
  1313 ;;		line 63 in file "lcd4.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;		None
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2, status,0, pclath, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1327 ;;      Params:         0       0       0       0       0
  1328 ;;      Locals:         0       0       0       0       0
  1329 ;;      Temps:          0       2       0       0       0
  1330 ;;      Totals:         0       2       0       0       0
  1331 ;;Total ram usage:        2 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    5
  1334 ;; This function calls:
  1335 ;;		_Lcd_Cmd
  1336 ;;		_Lcd_Port
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _Lcd_Init
  1344  0371                     _Lcd_Init:	
  1345                           
  1346                           ;lcd4.c: 65:   Lcd_Port(0x00);
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1350  0371  3000               	movlw	0
  1351  0372  120A  118A  259B  120A  118A  	fcall	_Lcd_Port
  1352                           
  1353                           ;lcd4.c: 66:    _delay((unsigned long)((20)*(20000000/4000.0)));
  1354  0377  3082               	movlw	130
  1355  0378  1283               	bcf	3,5	;RP0=0, select bank0
  1356  0379  1303               	bcf	3,6	;RP1=0, select bank0
  1357  037A  00B4               	movwf	??_Lcd_Init+1
  1358  037B  30DD               	movlw	221
  1359  037C  00B3               	movwf	??_Lcd_Init
  1360  037D                     u1137:	
  1361  037D  0BB3               	decfsz	??_Lcd_Init,f
  1362  037E  2B7D               	goto	u1137
  1363  037F  0BB4               	decfsz	??_Lcd_Init+1,f
  1364  0380  2B7D               	goto	u1137
  1365                           
  1366                           ;lcd4.c: 67:   Lcd_Cmd(0x03);
  1367  0381  3003               	movlw	3
  1368  0382  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1369                           
  1370                           ;lcd4.c: 68:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1371  0387  3021               	movlw	33
  1372  0388  1283               	bcf	3,5	;RP0=0, select bank0
  1373  0389  1303               	bcf	3,6	;RP1=0, select bank0
  1374  038A  00B4               	movwf	??_Lcd_Init+1
  1375  038B  3075               	movlw	117
  1376  038C  00B3               	movwf	??_Lcd_Init
  1377  038D                     u1147:	
  1378  038D  0BB3               	decfsz	??_Lcd_Init,f
  1379  038E  2B8D               	goto	u1147
  1380  038F  0BB4               	decfsz	??_Lcd_Init+1,f
  1381  0390  2B8D               	goto	u1147
  1382  0391  2B92               	nop2
  1383                           
  1384                           ;lcd4.c: 69:   Lcd_Cmd(0x03);
  1385  0392  3003               	movlw	3
  1386  0393  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1387                           
  1388                           ;lcd4.c: 70:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1389  0398  3048               	movlw	72
  1390  0399  1283               	bcf	3,5	;RP0=0, select bank0
  1391  039A  1303               	bcf	3,6	;RP1=0, select bank0
  1392  039B  00B4               	movwf	??_Lcd_Init+1
  1393  039C  306B               	movlw	107
  1394  039D  00B3               	movwf	??_Lcd_Init
  1395  039E                     u1157:	
  1396  039E  0BB3               	decfsz	??_Lcd_Init,f
  1397  039F  2B9E               	goto	u1157
  1398  03A0  0BB4               	decfsz	??_Lcd_Init+1,f
  1399  03A1  2B9E               	goto	u1157
  1400  03A2  2BA3               	nop2
  1401                           
  1402                           ;lcd4.c: 71:   Lcd_Cmd(0x03);
  1403  03A3  3003               	movlw	3
  1404  03A4  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1405                           
  1406                           ;lcd4.c: 73:   Lcd_Cmd(0x02);
  1407  03A9  3002               	movlw	2
  1408  03AA  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1409                           
  1410                           ;lcd4.c: 74:   Lcd_Cmd(0x02);
  1411  03AF  3002               	movlw	2
  1412  03B0  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1413                           
  1414                           ;lcd4.c: 75:   Lcd_Cmd(0x08);
  1415  03B5  3008               	movlw	8
  1416  03B6  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1417                           
  1418                           ;lcd4.c: 76:   Lcd_Cmd(0x00);
  1419  03BB  3000               	movlw	0
  1420  03BC  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1421                           
  1422                           ;lcd4.c: 77:   Lcd_Cmd(0x0C);
  1423  03C1  300C               	movlw	12
  1424  03C2  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1425                           
  1426                           ;lcd4.c: 78:   Lcd_Cmd(0x00);
  1427  03C7  3000               	movlw	0
  1428  03C8  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  1429                           
  1430                           ;lcd4.c: 79:   Lcd_Cmd(0x06);
  1431  03CD  3006               	movlw	6
  1432  03CE  120A  118A  257F   	fcall	_Lcd_Cmd
  1433  03D1  0008               	return
  1434  03D2                     __end_of_Lcd_Init:	
  1435                           
  1436                           	psect	text5
  1437  0026                     __ptext5:	
  1438 ;; *************** function _Lcd_Display *****************
  1439 ;; Defined at:
  1440 ;;		line 42 in file "UART_receive.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  x_value         2   29[BANK0 ] unsigned int 
  1443 ;;  y_value         2   31[BANK0 ] unsigned int 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg, status,2, status,0, pclath, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1455 ;;      Params:         0       4       0       0       0
  1456 ;;      Locals:         0       0       0       0       0
  1457 ;;      Temps:          0       1       0       0       0
  1458 ;;      Totals:         0       5       0       0       0
  1459 ;;Total ram usage:        5 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    6
  1462 ;; This function calls:
  1463 ;;		_Lcd_Set_Cursor
  1464 ;;		_Lcd_Write_Char
  1465 ;;		___lwdiv
  1466 ;;		___lwmod
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           
  1473                           ;psect for function _Lcd_Display
  1474  0026                     _Lcd_Display:	
  1475                           
  1476                           ;UART_receive.c: 42: void Lcd_Display(unsigned int x_value, unsigned int y_value);UART_r
      +                          eceive.c: 43: {;UART_receive.c: 44:     Lcd_Set_Cursor(1, 5);
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _Lcd_Display: [wreg+status,2+status,0+pclath+cstack]
  1480  0026  3005               	movlw	5
  1481  0027  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0028  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0029  00C1               	movwf	??_Lcd_Display
  1484  002A  0841               	movf	??_Lcd_Display,w
  1485  002B  00B3               	movwf	Lcd_Set_Cursor@b
  1486  002C  3001               	movlw	1
  1487  002D  120A  118A  23D2  120A  118A  	fcall	_Lcd_Set_Cursor
  1488                           
  1489                           ;UART_receive.c: 45:     Lcd_Write_Char(x_value/1000+48);
  1490  0032  30E8               	movlw	232
  1491  0033  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0034  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0035  00B5               	movwf	___lwdiv@divisor
  1494  0036  3003               	movlw	3
  1495  0037  00B6               	movwf	___lwdiv@divisor+1
  1496  0038  083E               	movf	Lcd_Display@x_value+1,w
  1497  0039  00B8               	movwf	___lwdiv@dividend+1
  1498  003A  083D               	movf	Lcd_Display@x_value,w
  1499  003B  00B7               	movwf	___lwdiv@dividend
  1500  003C  120A  118A  2469  120A  118A  	fcall	___lwdiv
  1501  0041  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0042  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0043  0835               	movf	?___lwdiv,w
  1504  0044  3E30               	addlw	48
  1505  0045  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1506                           
  1507                           ;UART_receive.c: 46:     Lcd_Write_Char(x_value%1000/100+48);
  1508  004A  3064               	movlw	100
  1509  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1510  004C  1303               	bcf	3,6	;RP1=0, select bank0
  1511  004D  00B5               	movwf	___lwdiv@divisor
  1512  004E  3000               	movlw	0
  1513  004F  00B6               	movwf	___lwdiv@divisor+1
  1514  0050  083E               	movf	Lcd_Display@x_value+1,w
  1515  0051  00B2               	movwf	___lwmod@dividend+1
  1516  0052  083D               	movf	Lcd_Display@x_value,w
  1517  0053  00B1               	movwf	___lwmod@dividend
  1518  0054  30E8               	movlw	232
  1519  0055  00AF               	movwf	___lwmod@divisor
  1520  0056  3003               	movlw	3
  1521  0057  00B0               	movwf	___lwmod@divisor+1
  1522  0058  120A  118A  24E4  120A  118A  	fcall	___lwmod
  1523  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1524  005E  1303               	bcf	3,6	;RP1=0, select bank0
  1525  005F  0830               	movf	?___lwmod+1,w
  1526  0060  00B8               	movwf	___lwdiv@dividend+1
  1527  0061  082F               	movf	?___lwmod,w
  1528  0062  00B7               	movwf	___lwdiv@dividend
  1529  0063  120A  118A  2469  120A  118A  	fcall	___lwdiv
  1530  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1532  006A  0835               	movf	?___lwdiv,w
  1533  006B  3E30               	addlw	48
  1534  006C  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1535                           
  1536                           ;UART_receive.c: 47:     Lcd_Write_Char(x_value%100/10+48);
  1537  0071  300A               	movlw	10
  1538  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0074  00B5               	movwf	___lwdiv@divisor
  1541  0075  3000               	movlw	0
  1542  0076  00B6               	movwf	___lwdiv@divisor+1
  1543  0077  083E               	movf	Lcd_Display@x_value+1,w
  1544  0078  00B2               	movwf	___lwmod@dividend+1
  1545  0079  083D               	movf	Lcd_Display@x_value,w
  1546  007A  00B1               	movwf	___lwmod@dividend
  1547  007B  3064               	movlw	100
  1548  007C  00AF               	movwf	___lwmod@divisor
  1549  007D  3000               	movlw	0
  1550  007E  00B0               	movwf	___lwmod@divisor+1
  1551  007F  120A  118A  24E4  120A  118A  	fcall	___lwmod
  1552  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1553  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1554  0086  0830               	movf	?___lwmod+1,w
  1555  0087  00B8               	movwf	___lwdiv@dividend+1
  1556  0088  082F               	movf	?___lwmod,w
  1557  0089  00B7               	movwf	___lwdiv@dividend
  1558  008A  120A  118A  2469  120A  118A  	fcall	___lwdiv
  1559  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1560  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1561  0091  0835               	movf	?___lwdiv,w
  1562  0092  3E30               	addlw	48
  1563  0093  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1564                           
  1565                           ;UART_receive.c: 48:     Lcd_Write_Char(x_value%10+48);
  1566  0098  300A               	movlw	10
  1567  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1568  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1569  009B  00AF               	movwf	___lwmod@divisor
  1570  009C  3000               	movlw	0
  1571  009D  00B0               	movwf	___lwmod@divisor+1
  1572  009E  083E               	movf	Lcd_Display@x_value+1,w
  1573  009F  00B2               	movwf	___lwmod@dividend+1
  1574  00A0  083D               	movf	Lcd_Display@x_value,w
  1575  00A1  00B1               	movwf	___lwmod@dividend
  1576  00A2  120A  118A  24E4  120A  118A  	fcall	___lwmod
  1577  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1578  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  1579  00A9  082F               	movf	?___lwmod,w
  1580  00AA  3E30               	addlw	48
  1581  00AB  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1582                           
  1583                           ;UART_receive.c: 50:     Lcd_Set_Cursor(2, 5);
  1584  00B0  3005               	movlw	5
  1585  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  1586  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  1587  00B3  00C1               	movwf	??_Lcd_Display
  1588  00B4  0841               	movf	??_Lcd_Display,w
  1589  00B5  00B3               	movwf	Lcd_Set_Cursor@b
  1590  00B6  3002               	movlw	2
  1591  00B7  120A  118A  23D2  120A  118A  	fcall	_Lcd_Set_Cursor
  1592                           
  1593                           ;UART_receive.c: 51:     Lcd_Write_Char(y_value/1000+48);
  1594  00BC  30E8               	movlw	232
  1595  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1596  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1597  00BF  00B5               	movwf	___lwdiv@divisor
  1598  00C0  3003               	movlw	3
  1599  00C1  00B6               	movwf	___lwdiv@divisor+1
  1600  00C2  0840               	movf	Lcd_Display@y_value+1,w
  1601  00C3  00B8               	movwf	___lwdiv@dividend+1
  1602  00C4  083F               	movf	Lcd_Display@y_value,w
  1603  00C5  00B7               	movwf	___lwdiv@dividend
  1604  00C6  120A  118A  2469  120A  118A  	fcall	___lwdiv
  1605  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1606  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1607  00CD  0835               	movf	?___lwdiv,w
  1608  00CE  3E30               	addlw	48
  1609  00CF  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1610                           
  1611                           ;UART_receive.c: 52:     Lcd_Write_Char(y_value%1000/100+48);
  1612  00D4  3064               	movlw	100
  1613  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1614  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1615  00D7  00B5               	movwf	___lwdiv@divisor
  1616  00D8  3000               	movlw	0
  1617  00D9  00B6               	movwf	___lwdiv@divisor+1
  1618  00DA  0840               	movf	Lcd_Display@y_value+1,w
  1619  00DB  00B2               	movwf	___lwmod@dividend+1
  1620  00DC  083F               	movf	Lcd_Display@y_value,w
  1621  00DD  00B1               	movwf	___lwmod@dividend
  1622  00DE  30E8               	movlw	232
  1623  00DF  00AF               	movwf	___lwmod@divisor
  1624  00E0  3003               	movlw	3
  1625  00E1  00B0               	movwf	___lwmod@divisor+1
  1626  00E2  120A  118A  24E4  120A  118A  	fcall	___lwmod
  1627  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1628  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1629  00E9  0830               	movf	?___lwmod+1,w
  1630  00EA  00B8               	movwf	___lwdiv@dividend+1
  1631  00EB  082F               	movf	?___lwmod,w
  1632  00EC  00B7               	movwf	___lwdiv@dividend
  1633  00ED  120A  118A  2469  120A  118A  	fcall	___lwdiv
  1634  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1635  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1636  00F4  0835               	movf	?___lwdiv,w
  1637  00F5  3E30               	addlw	48
  1638  00F6  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1639                           
  1640                           ;UART_receive.c: 53:     Lcd_Write_Char(y_value%100/10+48);
  1641  00FB  300A               	movlw	10
  1642  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1643  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1644  00FE  00B5               	movwf	___lwdiv@divisor
  1645  00FF  3000               	movlw	0
  1646  0100  00B6               	movwf	___lwdiv@divisor+1
  1647  0101  0840               	movf	Lcd_Display@y_value+1,w
  1648  0102  00B2               	movwf	___lwmod@dividend+1
  1649  0103  083F               	movf	Lcd_Display@y_value,w
  1650  0104  00B1               	movwf	___lwmod@dividend
  1651  0105  3064               	movlw	100
  1652  0106  00AF               	movwf	___lwmod@divisor
  1653  0107  3000               	movlw	0
  1654  0108  00B0               	movwf	___lwmod@divisor+1
  1655  0109  120A  118A  24E4  120A  118A  	fcall	___lwmod
  1656  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1657  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1658  0110  0830               	movf	?___lwmod+1,w
  1659  0111  00B8               	movwf	___lwdiv@dividend+1
  1660  0112  082F               	movf	?___lwmod,w
  1661  0113  00B7               	movwf	___lwdiv@dividend
  1662  0114  120A  118A  2469  120A  118A  	fcall	___lwdiv
  1663  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1664  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1665  011B  0835               	movf	?___lwdiv,w
  1666  011C  3E30               	addlw	48
  1667  011D  120A  118A  24A7  120A  118A  	fcall	_Lcd_Write_Char
  1668                           
  1669                           ;UART_receive.c: 54:     Lcd_Write_Char(y_value%10+48);
  1670  0122  300A               	movlw	10
  1671  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1672  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1673  0125  00AF               	movwf	___lwmod@divisor
  1674  0126  3000               	movlw	0
  1675  0127  00B0               	movwf	___lwmod@divisor+1
  1676  0128  0840               	movf	Lcd_Display@y_value+1,w
  1677  0129  00B2               	movwf	___lwmod@dividend+1
  1678  012A  083F               	movf	Lcd_Display@y_value,w
  1679  012B  00B1               	movwf	___lwmod@dividend
  1680  012C  120A  118A  24E4  120A  118A  	fcall	___lwmod
  1681  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0133  082F               	movf	?___lwmod,w
  1684  0134  3E30               	addlw	48
  1685  0135  120A  118A  24A7   	fcall	_Lcd_Write_Char
  1686  0138  0008               	return
  1687  0139                     __end_of_Lcd_Display:	
  1688                           
  1689                           	psect	text6
  1690  04E4                     __ptext6:	
  1691 ;; *************** function ___lwmod *****************
  1692 ;; Defined at:
  1693 ;;		line 5 in file "D:\Mplab X\xc8\pic\sources\c90\common\lwmod.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  divisor         2   15[BANK0 ] unsigned int 
  1696 ;;  dividend        2   17[BANK0 ] unsigned int 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  counter         1   20[BANK0 ] unsigned char 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2   15[BANK0 ] unsigned int 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1708 ;;      Params:         0       4       0       0       0
  1709 ;;      Locals:         0       1       0       0       0
  1710 ;;      Temps:          0       1       0       0       0
  1711 ;;      Totals:         0       6       0       0       0
  1712 ;;Total ram usage:        6 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    3
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_Lcd_Display
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           
  1723                           ;psect for function ___lwmod
  1724  04E4                     ___lwmod:	
  1725                           
  1726                           ;incstack = 0
  1727                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1728  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  1729  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  1730  04E6  082F               	movf	___lwmod@divisor,w
  1731  04E7  0430               	iorwf	___lwmod@divisor+1,w
  1732  04E8  1903               	btfsc	3,2
  1733  04E9  2D13               	goto	l1194
  1734  04EA  01B4               	clrf	___lwmod@counter
  1735  04EB  0AB4               	incf	___lwmod@counter,f
  1736  04EC                     l1184:	
  1737  04EC  1BB0               	btfsc	___lwmod@divisor+1,7
  1738  04ED  2CFA               	goto	l1186
  1739  04EE  3001               	movlw	1
  1740  04EF                     u815:	
  1741  04EF  1003               	clrc
  1742  04F0  0DAF               	rlf	___lwmod@divisor,f
  1743  04F1  0DB0               	rlf	___lwmod@divisor+1,f
  1744  04F2  3EFF               	addlw	-1
  1745  04F3  1D03               	skipz
  1746  04F4  2CEF               	goto	u815
  1747  04F5  3001               	movlw	1
  1748  04F6  00B3               	movwf	??___lwmod
  1749  04F7  0833               	movf	??___lwmod,w
  1750  04F8  07B4               	addwf	___lwmod@counter,f
  1751  04F9  2CEC               	goto	l1184
  1752  04FA                     l1186:	
  1753  04FA  0830               	movf	___lwmod@divisor+1,w
  1754  04FB  0232               	subwf	___lwmod@dividend+1,w
  1755  04FC  1D03               	skipz
  1756  04FD  2D00               	goto	u835
  1757  04FE  082F               	movf	___lwmod@divisor,w
  1758  04FF  0231               	subwf	___lwmod@dividend,w
  1759  0500                     u835:	
  1760  0500  1C03               	skipc
  1761  0501  2D08               	goto	l1190
  1762  0502  082F               	movf	___lwmod@divisor,w
  1763  0503  02B1               	subwf	___lwmod@dividend,f
  1764  0504  0830               	movf	___lwmod@divisor+1,w
  1765  0505  1C03               	skipc
  1766  0506  03B2               	decf	___lwmod@dividend+1,f
  1767  0507  02B2               	subwf	___lwmod@dividend+1,f
  1768  0508                     l1190:	
  1769  0508  3001               	movlw	1
  1770  0509                     u845:	
  1771  0509  1003               	clrc
  1772  050A  0CB0               	rrf	___lwmod@divisor+1,f
  1773  050B  0CAF               	rrf	___lwmod@divisor,f
  1774  050C  3EFF               	addlw	-1
  1775  050D  1D03               	skipz
  1776  050E  2D09               	goto	u845
  1777  050F  3001               	movlw	1
  1778  0510  02B4               	subwf	___lwmod@counter,f
  1779  0511  1D03               	btfss	3,2
  1780  0512  2CFA               	goto	l1186
  1781  0513                     l1194:	
  1782  0513  0832               	movf	___lwmod@dividend+1,w
  1783  0514  00B0               	movwf	?___lwmod+1
  1784  0515  0831               	movf	___lwmod@dividend,w
  1785  0516  00AF               	movwf	?___lwmod
  1786  0517  0008               	return
  1787  0518                     __end_of___lwmod:	
  1788                           
  1789                           	psect	text7
  1790  0469                     __ptext7:	
  1791 ;; *************** function ___lwdiv *****************
  1792 ;; Defined at:
  1793 ;;		line 5 in file "D:\Mplab X\xc8\pic\sources\c90\common\lwdiv.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;  divisor         2   21[BANK0 ] unsigned int 
  1796 ;;  dividend        2   23[BANK0 ] unsigned int 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  quotient        2   26[BANK0 ] unsigned int 
  1799 ;;  counter         1   28[BANK0 ] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  2   21[BANK0 ] unsigned int 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1809 ;;      Params:         0       4       0       0       0
  1810 ;;      Locals:         0       3       0       0       0
  1811 ;;      Temps:          0       1       0       0       0
  1812 ;;      Totals:         0       8       0       0       0
  1813 ;;Total ram usage:        8 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    3
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_Lcd_Display
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function ___lwdiv
  1825  0469                     ___lwdiv:	
  1826                           
  1827                           ;incstack = 0
  1828                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1829  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1830  046A  1303               	bcf	3,6	;RP1=0, select bank0
  1831  046B  01BA               	clrf	___lwdiv@quotient
  1832  046C  01BB               	clrf	___lwdiv@quotient+1
  1833  046D  0835               	movf	___lwdiv@divisor,w
  1834  046E  0436               	iorwf	___lwdiv@divisor+1,w
  1835  046F  1903               	btfsc	3,2
  1836  0470  2CA2               	goto	l1172
  1837  0471  01BC               	clrf	___lwdiv@counter
  1838  0472  0ABC               	incf	___lwdiv@counter,f
  1839  0473                     l1160:	
  1840  0473  1BB6               	btfsc	___lwdiv@divisor+1,7
  1841  0474  2C81               	goto	l1162
  1842  0475  3001               	movlw	1
  1843  0476                     u745:	
  1844  0476  1003               	clrc
  1845  0477  0DB5               	rlf	___lwdiv@divisor,f
  1846  0478  0DB6               	rlf	___lwdiv@divisor+1,f
  1847  0479  3EFF               	addlw	-1
  1848  047A  1D03               	skipz
  1849  047B  2C76               	goto	u745
  1850  047C  3001               	movlw	1
  1851  047D  00B9               	movwf	??___lwdiv
  1852  047E  0839               	movf	??___lwdiv,w
  1853  047F  07BC               	addwf	___lwdiv@counter,f
  1854  0480  2C73               	goto	l1160
  1855  0481                     l1162:	
  1856  0481  3001               	movlw	1
  1857  0482                     u765:	
  1858  0482  1003               	clrc
  1859  0483  0DBA               	rlf	___lwdiv@quotient,f
  1860  0484  0DBB               	rlf	___lwdiv@quotient+1,f
  1861  0485  3EFF               	addlw	-1
  1862  0486  1D03               	skipz
  1863  0487  2C82               	goto	u765
  1864  0488  0836               	movf	___lwdiv@divisor+1,w
  1865  0489  0238               	subwf	___lwdiv@dividend+1,w
  1866  048A  1D03               	skipz
  1867  048B  2C8E               	goto	u775
  1868  048C  0835               	movf	___lwdiv@divisor,w
  1869  048D  0237               	subwf	___lwdiv@dividend,w
  1870  048E                     u775:	
  1871  048E  1C03               	skipc
  1872  048F  2C97               	goto	l1168
  1873  0490  0835               	movf	___lwdiv@divisor,w
  1874  0491  02B7               	subwf	___lwdiv@dividend,f
  1875  0492  0836               	movf	___lwdiv@divisor+1,w
  1876  0493  1C03               	skipc
  1877  0494  03B8               	decf	___lwdiv@dividend+1,f
  1878  0495  02B8               	subwf	___lwdiv@dividend+1,f
  1879  0496  143A               	bsf	___lwdiv@quotient,0
  1880  0497                     l1168:	
  1881  0497  3001               	movlw	1
  1882  0498                     u785:	
  1883  0498  1003               	clrc
  1884  0499  0CB6               	rrf	___lwdiv@divisor+1,f
  1885  049A  0CB5               	rrf	___lwdiv@divisor,f
  1886  049B  3EFF               	addlw	-1
  1887  049C  1D03               	skipz
  1888  049D  2C98               	goto	u785
  1889  049E  3001               	movlw	1
  1890  049F  02BC               	subwf	___lwdiv@counter,f
  1891  04A0  1D03               	btfss	3,2
  1892  04A1  2C81               	goto	l1162
  1893  04A2                     l1172:	
  1894  04A2  083B               	movf	___lwdiv@quotient+1,w
  1895  04A3  00B6               	movwf	?___lwdiv+1
  1896  04A4  083A               	movf	___lwdiv@quotient,w
  1897  04A5  00B5               	movwf	?___lwdiv
  1898  04A6  0008               	return
  1899  04A7                     __end_of___lwdiv:	
  1900                           
  1901                           	psect	text8
  1902  04A7                     __ptext8:	
  1903 ;; *************** function _Lcd_Write_Char *****************
  1904 ;; Defined at:
  1905 ;;		line 82 in file "lcd4.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  a               1    wreg     unsigned char 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  a               1   19[BANK0 ] unsigned char 
  1910 ;;  y               1   18[BANK0 ] unsigned char 
  1911 ;;  temp            1   17[BANK0 ] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0, pclath, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         0       0       0       0       0
  1922 ;;      Locals:         0       3       0       0       0
  1923 ;;      Temps:          0       1       0       0       0
  1924 ;;      Totals:         0       4       0       0       0
  1925 ;;Total ram usage:        4 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    4
  1928 ;; This function calls:
  1929 ;;		_Lcd_Port
  1930 ;; This function is called by:
  1931 ;;		_Lcd_Display
  1932 ;;		_Lcd_Write_String
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           
  1937                           ;psect for function _Lcd_Write_Char
  1938  04A7                     _Lcd_Write_Char:	
  1939                           
  1940                           ;incstack = 0
  1941                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1942                           ;Lcd_Write_Char@a stored from wreg
  1943  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  1944  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  1945  04A9  00B3               	movwf	Lcd_Write_Char@a
  1946                           
  1947                           ;lcd4.c: 82: void Lcd_Write_Char(char a);lcd4.c: 83: {;lcd4.c: 84:    char temp,y;;lcd4.
      +                          c: 85:    temp = a&0x0F;
  1948  04AA  0833               	movf	Lcd_Write_Char@a,w
  1949  04AB  390F               	andlw	15
  1950  04AC  00B0               	movwf	??_Lcd_Write_Char
  1951  04AD  0830               	movf	??_Lcd_Write_Char,w
  1952  04AE  00B1               	movwf	Lcd_Write_Char@temp
  1953                           
  1954                           ;lcd4.c: 86:    y = a&0xF0;
  1955  04AF  0833               	movf	Lcd_Write_Char@a,w
  1956  04B0  39F0               	andlw	240
  1957  04B1  00B0               	movwf	??_Lcd_Write_Char
  1958  04B2  0830               	movf	??_Lcd_Write_Char,w
  1959  04B3  00B2               	movwf	Lcd_Write_Char@y
  1960                           
  1961                           ;lcd4.c: 87:    RD0 = 1;
  1962  04B4  1408               	bsf	8,0	;volatile
  1963                           
  1964                           ;lcd4.c: 88:    Lcd_Port(y>>4);
  1965  04B5  0832               	movf	Lcd_Write_Char@y,w
  1966  04B6  00B0               	movwf	??_Lcd_Write_Char
  1967  04B7  3004               	movlw	4
  1968  04B8                     u1115:	
  1969  04B8  1003               	clrc
  1970  04B9  0CB0               	rrf	??_Lcd_Write_Char,f
  1971  04BA  3EFF               	addlw	-1
  1972  04BB  1D03               	skipz
  1973  04BC  2CB8               	goto	u1115
  1974  04BD  0830               	movf	??_Lcd_Write_Char,w
  1975  04BE  120A  118A  259B  120A  118A  	fcall	_Lcd_Port
  1976                           
  1977                           ;lcd4.c: 89:    RD1 = 1;
  1978  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1979  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  1980  04C5  1488               	bsf	8,1	;volatile
  1981                           
  1982                           ;lcd4.c: 90:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1983  04C6  3041               	movlw	65
  1984  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1985  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1986  04C9  00B0               	movwf	??_Lcd_Write_Char
  1987  04CA                     u1167:	
  1988  04CA  0BB0               	decfsz	??_Lcd_Write_Char,f
  1989  04CB  2CCA               	goto	u1167
  1990  04CC  2CCD               	nop2
  1991                           
  1992                           ;lcd4.c: 91:    RD1 = 0;
  1993  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1994  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1995  04CF  1088               	bcf	8,1	;volatile
  1996                           
  1997                           ;lcd4.c: 92:    Lcd_Port(temp);
  1998  04D0  0831               	movf	Lcd_Write_Char@temp,w
  1999  04D1  120A  118A  259B  120A  118A  	fcall	_Lcd_Port
  2000                           
  2001                           ;lcd4.c: 93:    RD1 = 1;
  2002  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2003  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2004  04D8  1488               	bsf	8,1	;volatile
  2005                           
  2006                           ;lcd4.c: 94:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  2007  04D9  3041               	movlw	65
  2008  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  2009  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  2010  04DC  00B0               	movwf	??_Lcd_Write_Char
  2011  04DD                     u1177:	
  2012  04DD  0BB0               	decfsz	??_Lcd_Write_Char,f
  2013  04DE  2CDD               	goto	u1177
  2014  04DF  2CE0               	nop2
  2015                           
  2016                           ;lcd4.c: 95:    RD1 = 0;
  2017  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2018  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2019  04E2  1088               	bcf	8,1	;volatile
  2020  04E3  0008               	return
  2021  04E4                     __end_of_Lcd_Write_Char:	
  2022                           
  2023                           	psect	text9
  2024  03D2                     __ptext9:	
  2025 ;; *************** function _Lcd_Set_Cursor *****************
  2026 ;; Defined at:
  2027 ;;		line 42 in file "lcd4.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  a               1    wreg     unsigned char 
  2030 ;;  b               1   19[BANK0 ] unsigned char 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  a               1   22[BANK0 ] unsigned char 
  2033 ;;  temp            1   25[BANK0 ] unsigned char 
  2034 ;;  y               1   24[BANK0 ] unsigned char 
  2035 ;;  z               1   23[BANK0 ] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		wreg, status,2, status,0, pclath, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2045 ;;      Params:         0       1       0       0       0
  2046 ;;      Locals:         0       4       0       0       0
  2047 ;;      Temps:          0       2       0       0       0
  2048 ;;      Totals:         0       7       0       0       0
  2049 ;;Total ram usage:        7 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    5
  2052 ;; This function calls:
  2053 ;;		_Lcd_Cmd
  2054 ;; This function is called by:
  2055 ;;		_main
  2056 ;;		_Lcd_Display
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           
  2061                           ;psect for function _Lcd_Set_Cursor
  2062  03D2                     _Lcd_Set_Cursor:	
  2063                           
  2064                           ;incstack = 0
  2065                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2066                           ;Lcd_Set_Cursor@a stored from wreg
  2067  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2068  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2069  03D4  00B6               	movwf	Lcd_Set_Cursor@a
  2070                           
  2071                           ;lcd4.c: 42: void Lcd_Set_Cursor(char a, char b);lcd4.c: 43: {;lcd4.c: 44:  char temp,z,
      +                          y;;lcd4.c: 45:  if(a == 1)
  2072  03D5  0336               	decf	Lcd_Set_Cursor@a,w
  2073  03D6  1D03               	btfss	3,2
  2074  03D7  2BFB               	goto	l1340
  2075                           
  2076                           ;lcd4.c: 46:  {;lcd4.c: 47:    temp = 0x80 + b - 1;
  2077  03D8  0833               	movf	Lcd_Set_Cursor@b,w
  2078  03D9  3E7F               	addlw	127
  2079  03DA  00B4               	movwf	??_Lcd_Set_Cursor
  2080  03DB  0834               	movf	??_Lcd_Set_Cursor,w
  2081  03DC  00B9               	movwf	Lcd_Set_Cursor@temp
  2082                           
  2083                           ;lcd4.c: 48:   z = temp>>4;
  2084  03DD  0839               	movf	Lcd_Set_Cursor@temp,w
  2085  03DE  00B4               	movwf	??_Lcd_Set_Cursor
  2086  03DF  3004               	movlw	4
  2087  03E0                     u1085:	
  2088  03E0  1003               	clrc
  2089  03E1  0CB4               	rrf	??_Lcd_Set_Cursor,f
  2090  03E2  3EFF               	addlw	-1
  2091  03E3  1D03               	skipz
  2092  03E4  2BE0               	goto	u1085
  2093  03E5  0834               	movf	??_Lcd_Set_Cursor,w
  2094  03E6  00B5               	movwf	??_Lcd_Set_Cursor+1
  2095  03E7  0835               	movf	??_Lcd_Set_Cursor+1,w
  2096  03E8  00B7               	movwf	Lcd_Set_Cursor@z
  2097                           
  2098                           ;lcd4.c: 49:   y = temp & 0x0F;
  2099  03E9  0839               	movf	Lcd_Set_Cursor@temp,w
  2100  03EA  390F               	andlw	15
  2101  03EB  00B4               	movwf	??_Lcd_Set_Cursor
  2102  03EC  0834               	movf	??_Lcd_Set_Cursor,w
  2103  03ED  00B8               	movwf	Lcd_Set_Cursor@y
  2104                           
  2105                           ;lcd4.c: 50:   Lcd_Cmd(z);
  2106  03EE  0837               	movf	Lcd_Set_Cursor@z,w
  2107  03EF  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  2108                           
  2109                           ;lcd4.c: 51:   Lcd_Cmd(y);
  2110  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  2111  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  2112  03F6  0838               	movf	Lcd_Set_Cursor@y,w
  2113  03F7  120A  118A  257F   	fcall	_Lcd_Cmd
  2114                           
  2115                           ;lcd4.c: 52:  }
  2116  03FA  0008               	return
  2117  03FB                     l1340:	
  2118  03FB  3002               	movlw	2
  2119  03FC  0636               	xorwf	Lcd_Set_Cursor@a,w
  2120  03FD  1D03               	btfss	3,2
  2121  03FE  0008               	return
  2122                           
  2123                           ;lcd4.c: 54:  {;lcd4.c: 55:   temp = 0xC0 + b - 1;
  2124  03FF  0833               	movf	Lcd_Set_Cursor@b,w
  2125  0400  3EBF               	addlw	191
  2126  0401  00B4               	movwf	??_Lcd_Set_Cursor
  2127  0402  0834               	movf	??_Lcd_Set_Cursor,w
  2128  0403  00B9               	movwf	Lcd_Set_Cursor@temp
  2129                           
  2130                           ;lcd4.c: 56:   z = temp>>4;
  2131  0404  0839               	movf	Lcd_Set_Cursor@temp,w
  2132  0405  00B4               	movwf	??_Lcd_Set_Cursor
  2133  0406  3004               	movlw	4
  2134  0407                     u1105:	
  2135  0407  1003               	clrc
  2136  0408  0CB4               	rrf	??_Lcd_Set_Cursor,f
  2137  0409  3EFF               	addlw	-1
  2138  040A  1D03               	skipz
  2139  040B  2C07               	goto	u1105
  2140  040C  0834               	movf	??_Lcd_Set_Cursor,w
  2141  040D  00B5               	movwf	??_Lcd_Set_Cursor+1
  2142  040E  0835               	movf	??_Lcd_Set_Cursor+1,w
  2143  040F  00B7               	movwf	Lcd_Set_Cursor@z
  2144                           
  2145                           ;lcd4.c: 57:   y = temp & 0x0F;
  2146  0410  0839               	movf	Lcd_Set_Cursor@temp,w
  2147  0411  390F               	andlw	15
  2148  0412  00B4               	movwf	??_Lcd_Set_Cursor
  2149  0413  0834               	movf	??_Lcd_Set_Cursor,w
  2150  0414  00B8               	movwf	Lcd_Set_Cursor@y
  2151                           
  2152                           ;lcd4.c: 58:   Lcd_Cmd(z);
  2153  0415  0837               	movf	Lcd_Set_Cursor@z,w
  2154  0416  120A  118A  257F  120A  118A  	fcall	_Lcd_Cmd
  2155                           
  2156                           ;lcd4.c: 59:   Lcd_Cmd(y);
  2157  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2158  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2159  041D  0838               	movf	Lcd_Set_Cursor@y,w
  2160  041E  120A  118A  257F   	fcall	_Lcd_Cmd
  2161  0421  0008               	return
  2162  0422                     __end_of_Lcd_Set_Cursor:	
  2163                           
  2164                           	psect	text10
  2165  057F                     __ptext10:	
  2166 ;; *************** function _Lcd_Cmd *****************
  2167 ;; Defined at:
  2168 ;;		line 27 in file "lcd4.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  a               1    wreg     unsigned char 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  a               1   18[BANK0 ] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2182 ;;      Params:         0       0       0       0       0
  2183 ;;      Locals:         0       1       0       0       0
  2184 ;;      Temps:          0       2       0       0       0
  2185 ;;      Totals:         0       3       0       0       0
  2186 ;;Total ram usage:        3 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		_Lcd_Port
  2191 ;; This function is called by:
  2192 ;;		_Lcd_Set_Cursor
  2193 ;;		_Lcd_Init
  2194 ;;		_Lcd_Clear
  2195 ;;		_Lcd_Shift_Right
  2196 ;;		_Lcd_Shift_Left
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           
  2201                           ;psect for function _Lcd_Cmd
  2202  057F                     _Lcd_Cmd:	
  2203                           
  2204                           ;incstack = 0
  2205                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2206                           ;Lcd_Cmd@a stored from wreg
  2207  057F  1283               	bcf	3,5	;RP0=0, select bank0
  2208  0580  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0581  00B2               	movwf	Lcd_Cmd@a
  2210                           
  2211                           ;lcd4.c: 27: void Lcd_Cmd(char a);lcd4.c: 28: {;lcd4.c: 29:  RD0 = 0;
  2212  0582  1008               	bcf	8,0	;volatile
  2213                           
  2214                           ;lcd4.c: 30:  Lcd_Port(a);
  2215  0583  0832               	movf	Lcd_Cmd@a,w
  2216  0584  120A  118A  259B  120A  118A  	fcall	_Lcd_Port
  2217                           
  2218                           ;lcd4.c: 31:  RD1 = 1;
  2219  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2220  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2221  058B  1488               	bsf	8,1	;volatile
  2222                           
  2223                           ;lcd4.c: 32:         _delay((unsigned long)((4)*(20000000/4000.0)));
  2224  058C  301A               	movlw	26
  2225  058D  1283               	bcf	3,5	;RP0=0, select bank0
  2226  058E  1303               	bcf	3,6	;RP1=0, select bank0
  2227  058F  00B1               	movwf	??_Lcd_Cmd+1
  2228  0590  30F7               	movlw	247
  2229  0591  00B0               	movwf	??_Lcd_Cmd
  2230  0592                     u1187:	
  2231  0592  0BB0               	decfsz	??_Lcd_Cmd,f
  2232  0593  2D92               	goto	u1187
  2233  0594  0BB1               	decfsz	??_Lcd_Cmd+1,f
  2234  0595  2D92               	goto	u1187
  2235  0596  2D97               	nop2
  2236                           
  2237                           ;lcd4.c: 33:         RD1 = 0;
  2238  0597  1283               	bcf	3,5	;RP0=0, select bank0
  2239  0598  1303               	bcf	3,6	;RP1=0, select bank0
  2240  0599  1088               	bcf	8,1	;volatile
  2241  059A  0008               	return
  2242  059B                     __end_of_Lcd_Cmd:	
  2243                           
  2244                           	psect	text11
  2245  059B                     __ptext11:	
  2246 ;; *************** function _Lcd_Port *****************
  2247 ;; Defined at:
  2248 ;;		line 5 in file "lcd4.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  a               1    wreg     unsigned char 
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  a               1   15[BANK0 ] unsigned char 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2262 ;;      Params:         0       0       0       0       0
  2263 ;;      Locals:         0       1       0       0       0
  2264 ;;      Temps:          0       0       0       0       0
  2265 ;;      Totals:         0       1       0       0       0
  2266 ;;Total ram usage:        1 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    3
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_Lcd_Cmd
  2273 ;;		_Lcd_Init
  2274 ;;		_Lcd_Write_Char
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           
  2279                           ;psect for function _Lcd_Port
  2280  059B                     _Lcd_Port:	
  2281                           
  2282                           ;incstack = 0
  2283                           ; Regs used in _Lcd_Port: [wreg]
  2284                           ;Lcd_Port@a stored from wreg
  2285  059B  1283               	bcf	3,5	;RP0=0, select bank0
  2286  059C  1303               	bcf	3,6	;RP1=0, select bank0
  2287  059D  00AF               	movwf	Lcd_Port@a
  2288                           
  2289                           ;lcd4.c: 5: void Lcd_Port(char a);lcd4.c: 6: {;lcd4.c: 7:  if(a & 1)
  2290  059E  1C2F               	btfss	Lcd_Port@a,0
  2291  059F  2DA2               	goto	l132
  2292                           
  2293                           ;lcd4.c: 8:   RD2 = 1;
  2294  05A0  1508               	bsf	8,2	;volatile
  2295  05A1  2DA3               	goto	l133
  2296  05A2                     l132:	
  2297                           ;lcd4.c: 9:  else
  2298                           
  2299                           
  2300                           ;lcd4.c: 10:   RD2 = 0;
  2301  05A2  1108               	bcf	8,2	;volatile
  2302  05A3                     l133:	
  2303                           
  2304                           ;lcd4.c: 12:  if(a & 2)
  2305  05A3  1CAF               	btfss	Lcd_Port@a,1
  2306  05A4  2DA7               	goto	l134
  2307                           
  2308                           ;lcd4.c: 13:   RD3 = 1;
  2309  05A5  1588               	bsf	8,3	;volatile
  2310  05A6  2DA8               	goto	l135
  2311  05A7                     l134:	
  2312                           ;lcd4.c: 14:  else
  2313                           
  2314                           
  2315                           ;lcd4.c: 15:   RD3 = 0;
  2316  05A7  1188               	bcf	8,3	;volatile
  2317  05A8                     l135:	
  2318                           
  2319                           ;lcd4.c: 17:  if(a & 4)
  2320  05A8  1D2F               	btfss	Lcd_Port@a,2
  2321  05A9  2DAC               	goto	l136
  2322                           
  2323                           ;lcd4.c: 18:   RD4 = 1;
  2324  05AA  1608               	bsf	8,4	;volatile
  2325  05AB  2DAD               	goto	l137
  2326  05AC                     l136:	
  2327                           ;lcd4.c: 19:  else
  2328                           
  2329                           
  2330                           ;lcd4.c: 20:   RD4 = 0;
  2331  05AC  1208               	bcf	8,4	;volatile
  2332  05AD                     l137:	
  2333                           
  2334                           ;lcd4.c: 22:  if(a & 8)
  2335  05AD  1DAF               	btfss	Lcd_Port@a,3
  2336  05AE  2DB1               	goto	l138
  2337                           
  2338                           ;lcd4.c: 23:   RD5 = 1;
  2339  05AF  1688               	bsf	8,5	;volatile
  2340  05B0  0008               	return
  2341  05B1                     l138:	
  2342                           ;lcd4.c: 24:  else
  2343                           
  2344                           
  2345                           ;lcd4.c: 25:   RD5 = 0;
  2346  05B1  1288               	bcf	8,5	;volatile
  2347  05B2  0008               	return
  2348  05B3                     __end_of_Lcd_Port:	
  2349                           
  2350                           	psect	text12
  2351  0212                     __ptext12:	
  2352 ;; *************** function _My_interrupt *****************
  2353 ;; Defined at:
  2354 ;;		line 56 in file "UART_receive.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2368 ;;      Params:         0       0       0       0       0
  2369 ;;      Locals:         0       0       0       0       0
  2370 ;;      Temps:          0      15       0       0       0
  2371 ;;      Totals:         0      15       0       0       0
  2372 ;;Total ram usage:       15 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    2
  2375 ;; This function calls:
  2376 ;;		_UART_Read
  2377 ;;		_UART_Read_Text
  2378 ;;		___wmul
  2379 ;; This function is called by:
  2380 ;;		Interrupt level 1
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           
  2385                           ;psect for function _My_interrupt
  2386  0212                     _My_interrupt:	
  2387                           
  2388                           ;UART_receive.c: 58:   if(RCIE == 1 && RCIF == 1)
  2389  0212  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0213  1303               	bcf	3,6	;RP1=0, select bank1
  2391  0214  1E8C               	btfss	12,5	;volatile
  2392  0215  2AD8               	goto	i1l56
  2393  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2394  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2395  0218  1E8C               	btfss	12,5	;volatile
  2396  0219  2AD8               	goto	i1l56
  2397                           
  2398                           ;UART_receive.c: 59:   {;UART_receive.c: 60:     a = UART_Read();
  2399  021A  120A  118A  25C3  120A  118A  	fcall	_UART_Read
  2400  021F  1283               	bcf	3,5	;RP0=0, select bank0
  2401  0220  1303               	bcf	3,6	;RP1=0, select bank0
  2402  0221  00A0               	movwf	??_My_interrupt
  2403  0222  0820               	movf	??_My_interrupt,w
  2404  0223  00F7               	movwf	_a
  2405                           
  2406                           ;UART_receive.c: 61:     if(a == ':')
  2407  0224  303A               	movlw	58
  2408  0225  0677               	xorwf	_a,w
  2409  0226  1D03               	btfss	3,2
  2410  0227  2A32               	goto	i1l1300
  2411                           
  2412                           ;UART_receive.c: 62:     {;UART_receive.c: 63:         UART_Read_Text(data, 8);
  2413  0228  3008               	movlw	8
  2414  0229  00F0               	movwf	UART_Read_Text@length
  2415  022A  3000               	movlw	0
  2416  022B  00F1               	movwf	UART_Read_Text@length+1
  2417  022C  3054               	movlw	(low (_data| 0))& (0+255)
  2418  022D  120A  118A  255F  120A  118A  	fcall	_UART_Read_Text
  2419  0232                     i1l1300:	
  2420                           
  2421                           ;UART_receive.c: 65:     x_value = data[0]*1000+data[1]*100+data[2]*10+data[3];
  2422  0232  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0233  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0234  0854               	movf	_data,w
  2425  0235  00A0               	movwf	??_My_interrupt
  2426  0236  01A1               	clrf	??_My_interrupt+1
  2427  0237  0820               	movf	??_My_interrupt,w
  2428  0238  00F0               	movwf	___wmul@multiplier
  2429  0239  0821               	movf	??_My_interrupt+1,w
  2430  023A  00F1               	movwf	___wmul@multiplier+1
  2431  023B  30E8               	movlw	232
  2432  023C  00F2               	movwf	___wmul@multiplicand
  2433  023D  3003               	movlw	3
  2434  023E  00F3               	movwf	___wmul@multiplicand+1
  2435  023F  120A  118A  253E  120A  118A  	fcall	___wmul
  2436  0244  0870               	movf	?___wmul,w
  2437  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2438  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2439  0247  00A2               	movwf	??_My_interrupt+2
  2440  0248  0871               	movf	?___wmul+1,w
  2441  0249  00A3               	movwf	??_My_interrupt+3
  2442  024A  0855               	movf	_data+1,w
  2443  024B  00A4               	movwf	??_My_interrupt+4
  2444  024C  01A5               	clrf	??_My_interrupt+5
  2445  024D  0824               	movf	??_My_interrupt+4,w
  2446  024E  00F0               	movwf	___wmul@multiplier
  2447  024F  0825               	movf	??_My_interrupt+5,w
  2448  0250  00F1               	movwf	___wmul@multiplier+1
  2449  0251  3064               	movlw	100
  2450  0252  00F2               	movwf	___wmul@multiplicand
  2451  0253  3000               	movlw	0
  2452  0254  00F3               	movwf	___wmul@multiplicand+1
  2453  0255  120A  118A  253E  120A  118A  	fcall	___wmul
  2454  025A  0870               	movf	?___wmul,w
  2455  025B  1283               	bcf	3,5	;RP0=0, select bank0
  2456  025C  1303               	bcf	3,6	;RP1=0, select bank0
  2457  025D  0722               	addwf	??_My_interrupt+2,w
  2458  025E  00A6               	movwf	??_My_interrupt+6
  2459  025F  0871               	movf	?___wmul+1,w
  2460  0260  1803               	skipnc
  2461  0261  0A71               	incf	?___wmul+1,w
  2462  0262  0723               	addwf	??_My_interrupt+3,w
  2463  0263  00A7               	movwf	??_My_interrupt+7
  2464  0264  0856               	movf	_data+2,w
  2465  0265  00A8               	movwf	??_My_interrupt+8
  2466  0266  01A9               	clrf	??_My_interrupt+9
  2467  0267  0828               	movf	??_My_interrupt+8,w
  2468  0268  00F0               	movwf	___wmul@multiplier
  2469  0269  0829               	movf	??_My_interrupt+9,w
  2470  026A  00F1               	movwf	___wmul@multiplier+1
  2471  026B  300A               	movlw	10
  2472  026C  00F2               	movwf	___wmul@multiplicand
  2473  026D  3000               	movlw	0
  2474  026E  00F3               	movwf	___wmul@multiplicand+1
  2475  026F  120A  118A  253E  120A  118A  	fcall	___wmul
  2476  0274  0870               	movf	?___wmul,w
  2477  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2478  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2479  0277  0726               	addwf	??_My_interrupt+6,w
  2480  0278  00AA               	movwf	??_My_interrupt+10
  2481  0279  0871               	movf	?___wmul+1,w
  2482  027A  1803               	skipnc
  2483  027B  0A71               	incf	?___wmul+1,w
  2484  027C  0727               	addwf	??_My_interrupt+7,w
  2485  027D  00AB               	movwf	??_My_interrupt+11
  2486  027E  0857               	movf	_data+3,w
  2487  027F  072A               	addwf	??_My_interrupt+10,w
  2488  0280  00D2               	movwf	_x_value
  2489  0281  3000               	movlw	0
  2490  0282  1803               	skipnc
  2491  0283  3001               	movlw	1
  2492  0284  072B               	addwf	??_My_interrupt+11,w
  2493  0285  00D3               	movwf	_x_value+1
  2494                           
  2495                           ;UART_receive.c: 66:     y_value = data[4]*1000+data[5]*100+data[6]*10+data[7];
  2496  0286  0858               	movf	_data+4,w
  2497  0287  00A0               	movwf	??_My_interrupt
  2498  0288  01A1               	clrf	??_My_interrupt+1
  2499  0289  0820               	movf	??_My_interrupt,w
  2500  028A  00F0               	movwf	___wmul@multiplier
  2501  028B  0821               	movf	??_My_interrupt+1,w
  2502  028C  00F1               	movwf	___wmul@multiplier+1
  2503  028D  30E8               	movlw	232
  2504  028E  00F2               	movwf	___wmul@multiplicand
  2505  028F  3003               	movlw	3
  2506  0290  00F3               	movwf	___wmul@multiplicand+1
  2507  0291  120A  118A  253E  120A  118A  	fcall	___wmul
  2508  0296  0870               	movf	?___wmul,w
  2509  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2510  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2511  0299  00A2               	movwf	??_My_interrupt+2
  2512  029A  0871               	movf	?___wmul+1,w
  2513  029B  00A3               	movwf	??_My_interrupt+3
  2514  029C  0859               	movf	_data+5,w
  2515  029D  00A4               	movwf	??_My_interrupt+4
  2516  029E  01A5               	clrf	??_My_interrupt+5
  2517  029F  0824               	movf	??_My_interrupt+4,w
  2518  02A0  00F0               	movwf	___wmul@multiplier
  2519  02A1  0825               	movf	??_My_interrupt+5,w
  2520  02A2  00F1               	movwf	___wmul@multiplier+1
  2521  02A3  3064               	movlw	100
  2522  02A4  00F2               	movwf	___wmul@multiplicand
  2523  02A5  3000               	movlw	0
  2524  02A6  00F3               	movwf	___wmul@multiplicand+1
  2525  02A7  120A  118A  253E  120A  118A  	fcall	___wmul
  2526  02AC  0870               	movf	?___wmul,w
  2527  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2528  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2529  02AF  0722               	addwf	??_My_interrupt+2,w
  2530  02B0  00A6               	movwf	??_My_interrupt+6
  2531  02B1  0871               	movf	?___wmul+1,w
  2532  02B2  1803               	skipnc
  2533  02B3  0A71               	incf	?___wmul+1,w
  2534  02B4  0723               	addwf	??_My_interrupt+3,w
  2535  02B5  00A7               	movwf	??_My_interrupt+7
  2536  02B6  085A               	movf	_data+6,w
  2537  02B7  00A8               	movwf	??_My_interrupt+8
  2538  02B8  01A9               	clrf	??_My_interrupt+9
  2539  02B9  0828               	movf	??_My_interrupt+8,w
  2540  02BA  00F0               	movwf	___wmul@multiplier
  2541  02BB  0829               	movf	??_My_interrupt+9,w
  2542  02BC  00F1               	movwf	___wmul@multiplier+1
  2543  02BD  300A               	movlw	10
  2544  02BE  00F2               	movwf	___wmul@multiplicand
  2545  02BF  3000               	movlw	0
  2546  02C0  00F3               	movwf	___wmul@multiplicand+1
  2547  02C1  120A  118A  253E  120A  118A  	fcall	___wmul
  2548  02C6  0870               	movf	?___wmul,w
  2549  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2550  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2551  02C9  0726               	addwf	??_My_interrupt+6,w
  2552  02CA  00AA               	movwf	??_My_interrupt+10
  2553  02CB  0871               	movf	?___wmul+1,w
  2554  02CC  1803               	skipnc
  2555  02CD  0A71               	incf	?___wmul+1,w
  2556  02CE  0727               	addwf	??_My_interrupt+7,w
  2557  02CF  00AB               	movwf	??_My_interrupt+11
  2558  02D0  085B               	movf	_data+7,w
  2559  02D1  072A               	addwf	??_My_interrupt+10,w
  2560  02D2  00D0               	movwf	_y_value
  2561  02D3  3000               	movlw	0
  2562  02D4  1803               	skipnc
  2563  02D5  3001               	movlw	1
  2564  02D6  072B               	addwf	??_My_interrupt+11,w
  2565  02D7  00D1               	movwf	_y_value+1
  2566  02D8                     i1l56:	
  2567  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2568  02D9  082E               	movf	??_My_interrupt+14,w
  2569  02DA  008A               	movwf	10
  2570  02DB  082D               	movf	??_My_interrupt+13,w
  2571  02DC  0084               	movwf	4
  2572  02DD  0E2C               	swapf	(??_My_interrupt+12)^0,w
  2573  02DE  0083               	movwf	3
  2574  02DF  0EFE               	swapf	126,f
  2575  02E0  0E7E               	swapf	126,w
  2576  02E1  0009               	retfie
  2577  02E2                     __end_of_My_interrupt:	
  2578                           
  2579                           	psect	intentry
  2580  0004                     __pintentry:	
  2581                           ;incstack = 0
  2582                           ; Regs used in _My_interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2583                           
  2584  0004                     interrupt_function:	
  2585  007E                     saved_w	set	btemp
  2586  0004  00FE               	movwf	btemp
  2587  0005  0E03               	swapf	3,w
  2588  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2589  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2590  0008  00AC               	movwf	??_My_interrupt+12
  2591  0009  0804               	movf	4,w
  2592  000A  00AD               	movwf	??_My_interrupt+13
  2593  000B  080A               	movf	10,w
  2594  000C  00AE               	movwf	??_My_interrupt+14
  2595  000D  120A  118A  2A12   	ljmp	_My_interrupt
  2596                           
  2597                           	psect	text13
  2598  053E                     __ptext13:	
  2599 ;; *************** function ___wmul *****************
  2600 ;; Defined at:
  2601 ;;		line 15 in file "D:\Mplab X\xc8\pic\sources\c90\common\Umul16.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  multiplier      2    0[COMMON] unsigned int 
  2604 ;;  multiplicand    2    2[COMMON] unsigned int 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;  product         2    4[COMMON] unsigned int 
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  2    0[COMMON] unsigned int 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, status,0
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2616 ;;      Params:         4       0       0       0       0
  2617 ;;      Locals:         2       0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0
  2619 ;;      Totals:         6       0       0       0       0
  2620 ;;Total ram usage:        6 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_My_interrupt
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function ___wmul
  2631  053E                     ___wmul:	
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2635  053E  01F4               	clrf	___wmul@product
  2636  053F  01F5               	clrf	___wmul@product+1
  2637  0540                     i1l1254:	
  2638  0540  1C70               	btfss	___wmul@multiplier,0
  2639  0541  2D48               	goto	i1l256
  2640  0542  0872               	movf	___wmul@multiplicand,w
  2641  0543  07F4               	addwf	___wmul@product,f
  2642  0544  1803               	skipnc
  2643  0545  0AF5               	incf	___wmul@product+1,f
  2644  0546  0873               	movf	___wmul@multiplicand+1,w
  2645  0547  07F5               	addwf	___wmul@product+1,f
  2646  0548                     i1l256:	
  2647  0548  3001               	movlw	1
  2648  0549                     u97_25:	
  2649  0549  1003               	clrc
  2650  054A  0DF2               	rlf	___wmul@multiplicand,f
  2651  054B  0DF3               	rlf	___wmul@multiplicand+1,f
  2652  054C  3EFF               	addlw	-1
  2653  054D  1D03               	skipz
  2654  054E  2D49               	goto	u97_25
  2655  054F  3001               	movlw	1
  2656  0550                     u98_25:	
  2657  0550  1003               	clrc
  2658  0551  0CF1               	rrf	___wmul@multiplier+1,f
  2659  0552  0CF0               	rrf	___wmul@multiplier,f
  2660  0553  3EFF               	addlw	-1
  2661  0554  1D03               	skipz
  2662  0555  2D50               	goto	u98_25
  2663  0556  0870               	movf	___wmul@multiplier,w
  2664  0557  0471               	iorwf	___wmul@multiplier+1,w
  2665  0558  1D03               	btfss	3,2
  2666  0559  2D40               	goto	i1l1254
  2667  055A  0875               	movf	___wmul@product+1,w
  2668  055B  00F1               	movwf	?___wmul+1
  2669  055C  0874               	movf	___wmul@product,w
  2670  055D  00F0               	movwf	?___wmul
  2671  055E  0008               	return
  2672  055F                     __end_of___wmul:	
  2673                           
  2674                           	psect	text14
  2675  055F                     __ptext14:	
  2676 ;; *************** function _UART_Read_Text *****************
  2677 ;; Defined at:
  2678 ;;		line 45 in file "USART.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  Output          1    wreg     PTR unsigned char 
  2681 ;;		 -> data(8), 
  2682 ;;  length          2    0[COMMON] unsigned int 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  Output          1    4[COMMON] PTR unsigned char 
  2685 ;;		 -> data(8), 
  2686 ;;  i               2    5[COMMON] int 
  2687 ;;  i               2    0        unsigned int 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2697 ;;      Params:         2       0       0       0       0
  2698 ;;      Locals:         3       0       0       0       0
  2699 ;;      Temps:          2       0       0       0       0
  2700 ;;      Totals:         7       0       0       0       0
  2701 ;;Total ram usage:        7 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    1
  2704 ;; This function calls:
  2705 ;;		_UART_Read
  2706 ;; This function is called by:
  2707 ;;		_My_interrupt
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           
  2712                           ;psect for function _UART_Read_Text
  2713  055F                     _UART_Read_Text:	
  2714                           
  2715                           ;incstack = 0
  2716                           ; Regs used in _UART_Read_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2717                           ;UART_Read_Text@Output stored from wreg
  2718  055F  00F4               	movwf	UART_Read_Text@Output
  2719                           
  2720                           ;USART.c: 45: void UART_Read_Text(char *Output, unsigned int length);USART.c: 46: {;USAR
      +                          T.c: 47:  unsigned int i;;USART.c: 48:  for(int i=0;i<length;i++)
  2721  0560  01F5               	clrf	UART_Read_Text@i_111
  2722  0561  01F6               	clrf	UART_Read_Text@i_111+1
  2723  0562                     i1l1250:	
  2724  0562  0871               	movf	UART_Read_Text@length+1,w
  2725  0563  0276               	subwf	UART_Read_Text@i_111+1,w
  2726  0564  1D03               	skipz
  2727  0565  2D68               	goto	u95_25
  2728  0566  0870               	movf	UART_Read_Text@length,w
  2729  0567  0275               	subwf	UART_Read_Text@i_111,w
  2730  0568                     u95_25:	
  2731  0568  1803               	btfsc	3,0
  2732  0569  0008               	return
  2733                           
  2734                           ;USART.c: 49:   Output[i] = UART_Read();
  2735  056A  120A  118A  25C3  120A  118A  	fcall	_UART_Read
  2736  056F  00F2               	movwf	??_UART_Read_Text
  2737  0570  0875               	movf	UART_Read_Text@i_111,w
  2738  0571  0774               	addwf	UART_Read_Text@Output,w
  2739  0572  00F3               	movwf	??_UART_Read_Text+1
  2740  0573  0873               	movf	??_UART_Read_Text+1,w
  2741  0574  0084               	movwf	4
  2742  0575  0872               	movf	??_UART_Read_Text,w
  2743  0576  1383               	bcf	3,7	;select IRP bank0
  2744  0577  0080               	movwf	0
  2745  0578  3001               	movlw	1
  2746  0579  07F5               	addwf	UART_Read_Text@i_111,f
  2747  057A  1803               	skipnc
  2748  057B  0AF6               	incf	UART_Read_Text@i_111+1,f
  2749  057C  3000               	movlw	0
  2750  057D  07F6               	addwf	UART_Read_Text@i_111+1,f
  2751  057E  2D62               	goto	i1l1250
  2752  057F                     __end_of_UART_Read_Text:	
  2753                           
  2754                           	psect	text15
  2755  05C3                     __ptext15:	
  2756 ;; *************** function _UART_Read *****************
  2757 ;; Defined at:
  2758 ;;		line 38 in file "USART.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      unsigned char 
  2765 ;; Registers used:
  2766 ;;		wreg
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2772 ;;      Params:         0       0       0       0       0
  2773 ;;      Locals:         0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0
  2775 ;;      Totals:         0       0       0       0       0
  2776 ;;Total ram usage:        0 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_My_interrupt
  2782 ;;		_UART_Read_Text
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           
  2787                           ;psect for function _UART_Read
  2788  05C3                     _UART_Read:	
  2789  05C3                     i1l94:	
  2790                           ;USART.c: 41:   while(!RCIF);
  2791                           
  2792                           ;incstack = 0
  2793                           ; Regs used in _UART_Read: [wreg]
  2794                           
  2795  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  2796  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  2797  05C5  1E8C               	btfss	12,5	;volatile
  2798  05C6  2DC3               	goto	i1l94
  2799                           
  2800                           ;USART.c: 42:   return RCREG;
  2801  05C7  081A               	movf	26,w	;volatile
  2802  05C8  0008               	return
  2803  05C9                     __end_of_UART_Read:	
  2804  007E                     btemp	set	126	;btemp
  2805  007E                     wtemp0	set	126


Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       8
    BANK0            80     48      60
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    UART_Read_Text@Output	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _My_interrupt in COMMON

    _My_interrupt->_UART_Read_Text

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Display->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _My_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _My_interrupt in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _My_interrupt in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _My_interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6028
                        _Lcd_Display
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _UART_Init
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                             30 BANK0     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                             15 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     456
                                             20 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                             19 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Display                                          5     1      4    3642
                                             29 BANK0      5     1      4
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4    1071
                                             15 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1074
                                             21 BANK0      8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     254
                                             16 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     815
                                             19 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     155
                                             16 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             15 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _My_interrupt                                        15    15      0    1203
                                              0 BANK0     15    15      0
                          _UART_Read
                     _UART_Read_Text
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _UART_Read_Text                                       9     7      2     199
                                              0 COMMON     7     5      2
                          _UART_Read
 ---------------------------------------------------------------------------------
 (7) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Display
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Init
     ___aldiv

 _My_interrupt (ROOT)
   _UART_Read
   _UART_Read_Text
     _UART_Read
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      44       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     30      3C       5       75.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      44      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 30 00:18:24 2019

                        _a 0077                          pc 0002                __CFG_CP$OFF 0000  
                       fsr 0004        ___wmul@multiplicand 0072                        l132 05A2  
                      l133 05A3                        l134 05A7                        l135 05A8  
                      l136 05AC                        l137 05AD                        l321 02F4  
                      l138 05B1                        _GIE 005F                        _RD0 0040  
                      _RD1 0041                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045               __CFG_CPD$OFF 0000  
                      u705 034E                        u815 04EF                        u745 0476  
                      u665 0319                        u921 01D4                        u905 01A4  
                      u922 01D5                        u835 0500                        u923 01DA  
                      u915 01BD                        u924 01DB                        u765 0482  
                      u845 0509                        u685 0327                        u925 01E0  
                      u926 01E1                        u775 048E                        u695 033C  
                      u785 0498                        u881 0174                        u865 0144  
                      u882 0175                        u883 017A                        u875 015D  
                      u884 017B                        u885 0180                        u886 0181  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
      __end_of_Lcd_Display 0139               __CFG_LVP$OFF 0000                       l1120 0305  
                     l1130 0325                       l1142 035A                       l1206 01F7  
                     l1160 0473                       l1128 0315                       l1162 0481  
                     l1146 0368                       l1138 034D                       l1340 03FB  
                     l1172 04A2                       l1412 0459                       l1190 0508  
                     l1168 0497                       l1184 04EC                       l1186 04FA  
                     l1194 0513                       l1386 051D                       STR_1 05B9  
                     STR_2 05BE                       _BRGH 04C2                       _CREN 00C4  
                     u1105 0407                       u1115 04B8                       u1137 037D  
                     u1147 038D                       u1085 03E0                       u1157 039E  
                     u1167 04CA                       u1177 04DD                       u1187 0592  
                     _PEIE 005E                       _RCIE 0465                       _RCIF 0065  
                     i1l56 02D8                       i1l94 05C3                       _SPEN 00C7  
                     _TRMT 04C1                       _TXEN 04C5                       _SYNC 04C4  
             __CFG_WRT$OFF 0000                       _data 0054          ?_Lcd_Write_String 0070  
                     _main 0422                       btemp 007E                       start 0010  
       ??_Lcd_Write_String 0034            __end_of_Lcd_Cmd 059B            __end_of___aldiv 0371  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___lwdiv 04A7  
                    i1l256 0548            __end_of___lwmod 0518                      _RCREG 001A  
     UART_Read_Text@Output 0074                      _SPBRG 0099                      _PORTB 0006  
  __size_of_Lcd_Set_Cursor 0050                      _TRISB 0086                      _TRISD 0088  
                    u95_25 0568                      _TXREG 0019                      u97_25 0549  
                    u98_25 0550         __size_of_UART_Init 00D9         __size_of_UART_Read 0006  
     UART_Read_Text@length 0070             __CFG_BOREN$OFF 0000                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 03D2  
         __end_of_Lcd_Port 05B3            __initialization 0013               __end_of_main 0469  
              _Lcd_Display 0026                     ??_main 0050                     i1l1300 0232  
                   i1l1250 0562                     i1l1254 0540                  ??_Lcd_Cmd 0030  
  __size_of_Lcd_Write_Char 003D                     _TRISC6 043E                     _TRISC7 043F  
           __CFG_PWRTE$OFF 0000          __end_of_UART_Init 0212          __end_of_UART_Read 05C9  
                ??___aldiv 0037                     ___wmul 053E                  ??___lwdiv 0039  
                ??___lwmod 0033    __size_of_UART_Read_Text 0020                     saved_w 007E  
          Lcd_Set_Cursor@a 0036            Lcd_Set_Cursor@b 0033            Lcd_Set_Cursor@y 0038  
          Lcd_Set_Cursor@z 0037    __end_of__initialization 0022             __pcstackCOMMON 0070  
           _Lcd_Set_Cursor 03D2                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
               __pbssBANK0 0050                 __pmaintext 0422              ?_My_interrupt 0070  
                  ?___wmul 0070                 __pintentry 0004  __size_of_Lcd_Write_String 0026  
   __end_of_Lcd_Set_Cursor 0422                 ??_Lcd_Init 0033                 ??_Lcd_Port 002F  
               __stringtab 05B3             _Lcd_Write_Char 04A7                    _Lcd_Cmd 057F  
       Lcd_Display@x_value 003D         Lcd_Display@y_value 003F             ??_My_interrupt 0020  
                  ___aldiv 02E2            __size_of___wmul 0021                    ___lwdiv 0469  
                  ___lwmod 04E4             _UART_Read_Text 055F            ?_Lcd_Set_Cursor 0033  
             ?_Lcd_Display 003D                    __ptext1 0139                    __ptext2 02E2  
                  __ptext3 0518                    __ptext4 0371                    __ptext5 0026  
                  __ptext6 04E4                    __ptext7 0469                    __ptext8 04A7  
                  __ptext9 03D2           ___aldiv@dividend 0033                    _x_value 0052  
                  _y_value 0050     __end_of_Lcd_Write_Char 04E4       end_of_initialization 0022  
   __end_of_UART_Read_Text 057F           ___aldiv@quotient 003A                  Lcd_Port@a 002F  
                _UART_Init 0139                  _UART_Read 05C3            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0036          Lcd_Write_String@i 0034            ?_UART_Read_Text 0070  
      UART_Read_Text@i_111 0075             __end_of___wmul 055F           _Lcd_Write_String 0518  
               ?_UART_Init 003E                 ?_UART_Read 0070        start_initialization 0013  
     __end_of_My_interrupt 02E2          __size_of_Lcd_Init 0061          __size_of_Lcd_Port 0018  
                 ??___wmul 0074            Lcd_Write_Char@a 0033            Lcd_Write_Char@y 0032  
     __size_of_Lcd_Display 0113                __pbssCOMMON 0077                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070           ___lwdiv@dividend 0037  
         ??_Lcd_Set_Cursor 0034                   ?___aldiv 002F                   ?___lwdiv 0035  
                 ?___lwmod 002F                ??_UART_Init 0042                ??_UART_Read 0070  
                __pstrings 05B3           ___lwdiv@quotient 003A                 UART_Init@x 004E  
          ___aldiv@divisor 002F          interrupt_function 0004            ___aldiv@counter 0038  
           ___wmul@product 0074                   Lcd_Cmd@a 0032          UART_Init@baudrate 003E  
              __stringbase 05B8          ___wmul@multiplier 0070      __size_of_My_interrupt 00D0  
         ??_Lcd_Write_Char 0030                   _Lcd_Init 0371                   _Lcd_Port 059B  
 __end_of_Lcd_Write_String 053E           ??_UART_Read_Text 0072           __size_of_Lcd_Cmd 001C  
             _My_interrupt 0212           __size_of___aldiv 008F           __size_of___lwdiv 003E  
         __size_of___lwmod 0034         __end_of__stringtab 05B9            ___lwdiv@divisor 0035  
          ___lwdiv@counter 003C                   __ptext10 057F                   __ptext11 059B  
                 __ptext12 0212                   __ptext13 053E                   __ptext14 055F  
                 __ptext15 05C3              __size_of_main 0047         Lcd_Write_Char@temp 0031  
                 intlevel1 0000           ___lwmod@dividend 0031                  stringcode 05B3  
       Lcd_Set_Cursor@temp 0039              ??_Lcd_Display 0041            ___lwmod@divisor 002F  
          ___lwmod@counter 0034                   stringdir 05B3                   stringtab 05B3  
             ___aldiv@sign 0039  
