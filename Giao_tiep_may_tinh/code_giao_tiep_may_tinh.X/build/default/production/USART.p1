Version 4.0 HI-TECH Software Intermediate Code
"2416 D:\Mplab X\xc8\pic\include\pic16f877a.h
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2416: extern volatile __bit BRGH __attribute__((address(0x4C2)));
[v _BRGH `Vb ~T0 @X0 0 e@1218 ]
"2080
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2080: extern volatile unsigned char SPBRG __attribute__((address(0x099)));
[v _SPBRG `Vuc ~T0 @X0 0 e@153 ]
"2842
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2842: extern volatile __bit SYNC __attribute__((address(0x4C4)));
[v _SYNC `Vb ~T0 @X0 0 e@1220 ]
"2812
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2812: extern volatile __bit SPEN __attribute__((address(0xC7)));
[v _SPEN `Vb ~T0 @X0 0 e@199 ]
"2980
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2980: extern volatile __bit TRISC7 __attribute__((address(0x43F)));
[v _TRISC7 `Vb ~T0 @X0 0 e@1087 ]
"2977
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2977: extern volatile __bit TRISC6 __attribute__((address(0x43E)));
[v _TRISC6 `Vb ~T0 @X0 0 e@1086 ]
"2515
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2515: extern volatile __bit CREN __attribute__((address(0xC4)));
[v _CREN `Vb ~T0 @X0 0 e@196 ]
"3031
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 3031: extern volatile __bit TXEN __attribute__((address(0x4C5)));
[v _TXEN `Vb ~T0 @X0 0 e@1221 ]
"3016
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 3016: extern volatile __bit TRMT __attribute__((address(0x4C1)));
[v _TRMT `Vb ~T0 @X0 0 e@1217 ]
"2743
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2743: extern volatile __bit RCIF __attribute__((address(0x65)));
[v _RCIF `Vb ~T0 @X0 0 e@101 ]
"1066
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1066: extern volatile unsigned char RCREG __attribute__((address(0x01A)));
[v _RCREG `Vuc ~T0 @X0 0 e@26 ]
"1059
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1059: extern volatile unsigned char TXREG __attribute__((address(0x019)));
[v _TXREG `Vuc ~T0 @X0 0 e@25 ]
"54 D:\Mplab X\xc8\pic\include\pic16f877a.h
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 54: __asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
"61
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 61: __asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
"68
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 68: __asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
"75
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 75: __asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
"161
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 161: __asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
"168
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 168: __asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
"218
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 218: __asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
"280
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 280: __asm("PORTC equ 07h");
[; <" PORTC equ 07h ;# ">
"342
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 342: __asm("PORTD equ 08h");
[; <" PORTD equ 08h ;# ">
"404
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 404: __asm("PORTE equ 09h");
[; <" PORTE equ 09h ;# ">
"436
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 436: __asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
"456
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 456: __asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
"534
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 534: __asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
"596
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 596: __asm("PIR2 equ 0Dh");
[; <" PIR2 equ 0Dh ;# ">
"636
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 636: __asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
"643
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 643: __asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
"650
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 650: __asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
"657
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 657: __asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
"732
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 732: __asm("TMR2 equ 011h");
[; <" TMR2 equ 011h ;# ">
"739
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 739: __asm("T2CON equ 012h");
[; <" T2CON equ 012h ;# ">
"810
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 810: __asm("SSPBUF equ 013h");
[; <" SSPBUF equ 013h ;# ">
"817
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 817: __asm("SSPCON equ 014h");
[; <" SSPCON equ 014h ;# ">
"887
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 887: __asm("CCPR1 equ 015h");
[; <" CCPR1 equ 015h ;# ">
"894
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 894: __asm("CCPR1L equ 015h");
[; <" CCPR1L equ 015h ;# ">
"901
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 901: __asm("CCPR1H equ 016h");
[; <" CCPR1H equ 016h ;# ">
"908
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 908: __asm("CCP1CON equ 017h");
[; <" CCP1CON equ 017h ;# ">
"966
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 966: __asm("RCSTA equ 018h");
[; <" RCSTA equ 018h ;# ">
"1061
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1061: __asm("TXREG equ 019h");
[; <" TXREG equ 019h ;# ">
"1068
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1068: __asm("RCREG equ 01Ah");
[; <" RCREG equ 01Ah ;# ">
"1075
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1075: __asm("CCPR2 equ 01Bh");
[; <" CCPR2 equ 01Bh ;# ">
"1082
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1082: __asm("CCPR2L equ 01Bh");
[; <" CCPR2L equ 01Bh ;# ">
"1089
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1089: __asm("CCPR2H equ 01Ch");
[; <" CCPR2H equ 01Ch ;# ">
"1096
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1096: __asm("CCP2CON equ 01Dh");
[; <" CCP2CON equ 01Dh ;# ">
"1154
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1154: __asm("ADRESH equ 01Eh");
[; <" ADRESH equ 01Eh ;# ">
"1161
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1161: __asm("ADCON0 equ 01Fh");
[; <" ADCON0 equ 01Fh ;# ">
"1257
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1257: __asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
"1327
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1327: __asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
"1377
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1377: __asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
"1439
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1439: __asm("TRISC equ 087h");
[; <" TRISC equ 087h ;# ">
"1501
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1501: __asm("TRISD equ 088h");
[; <" TRISD equ 088h ;# ">
"1563
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1563: __asm("TRISE equ 089h");
[; <" TRISE equ 089h ;# ">
"1620
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1620: __asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
"1682
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1682: __asm("PIE2 equ 08Dh");
[; <" PIE2 equ 08Dh ;# ">
"1722
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1722: __asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
"1756
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1756: __asm("SSPCON2 equ 091h");
[; <" SSPCON2 equ 091h ;# ">
"1818
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1818: __asm("PR2 equ 092h");
[; <" PR2 equ 092h ;# ">
"1825
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1825: __asm("SSPADD equ 093h");
[; <" SSPADD equ 093h ;# ">
"1832
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 1832: __asm("SSPSTAT equ 094h");
[; <" SSPSTAT equ 094h ;# ">
"2001
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2001: __asm("TXSTA equ 098h");
[; <" TXSTA equ 098h ;# ">
"2082
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2082: __asm("SPBRG equ 099h");
[; <" SPBRG equ 099h ;# ">
"2089
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2089: __asm("CMCON equ 09Ch");
[; <" CMCON equ 09Ch ;# ">
"2159
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2159: __asm("CVRCON equ 09Dh");
[; <" CVRCON equ 09Dh ;# ">
"2224
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2224: __asm("ADRESL equ 09Eh");
[; <" ADRESL equ 09Eh ;# ">
"2231
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2231: __asm("ADCON1 equ 09Fh");
[; <" ADCON1 equ 09Fh ;# ">
"2290
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2290: __asm("EEDATA equ 010Ch");
[; <" EEDATA equ 010Ch ;# ">
"2297
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2297: __asm("EEADR equ 010Dh");
[; <" EEADR equ 010Dh ;# ">
"2304
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2304: __asm("EEDATH equ 010Eh");
[; <" EEDATH equ 010Eh ;# ">
"2311
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2311: __asm("EEADRH equ 010Fh");
[; <" EEADRH equ 010Fh ;# ">
"2318
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2318: __asm("EECON1 equ 018Ch");
[; <" EECON1 equ 018Ch ;# ">
"2363
[; ;D:\Mplab X\xc8\pic\include\pic16f877a.h: 2363: __asm("EECON2 equ 018Dh");
[; <" EECON2 equ 018Dh ;# ">
"5 ./main.h
[p x FOSC = HS ]
"6
[p x WDTE = OFF ]
"7
[p x PWRTE = OFF ]
"8
[p x BOREN = OFF ]
"9
[p x LVP = OFF ]
"10
[p x CPD = OFF ]
"11
[p x WRT = OFF ]
"12
[p x CP = OFF ]
"5 USART.c
[; ;USART.c: 5: char UART_Init(const long int baudrate)
[v _UART_Init `(uc ~T0 @X0 1 ef1`Cl ]
"6
[; ;USART.c: 6: {
{
[e :U _UART_Init ]
"5
[; ;USART.c: 5: char UART_Init(const long int baudrate)
[v _baudrate `Cl ~T0 @X0 1 r1 ]
"6
[; ;USART.c: 6: {
[f ]
"7
[; ;USART.c: 7:  unsigned int x;
[v _x `ui ~T0 @X0 1 a ]
"8
[; ;USART.c: 8:  x = (20000000 - baudrate*64)/(baudrate*64);
[e = _x -> / - -> 20000000 `l * _baudrate -> -> 64 `i `l * _baudrate -> -> 64 `i `l `ui ]
"9
[; ;USART.c: 9:  if(x>255)
[e $ ! > _x -> -> 255 `i `ui 96  ]
"10
[; ;USART.c: 10:  {
{
"11
[; ;USART.c: 11:   x = (20000000 - baudrate*16)/(baudrate*16);
[e = _x -> / - -> 20000000 `l * _baudrate -> -> 16 `i `l * _baudrate -> -> 16 `i `l `ui ]
"12
[; ;USART.c: 12:   BRGH = 1;
[e = _BRGH -> -> 1 `i `b ]
"13
[; ;USART.c: 13:  }
}
[e :U 96 ]
"14
[; ;USART.c: 14:  if(x<256)
[e $ ! < _x -> -> 256 `i `ui 97  ]
"15
[; ;USART.c: 15:  {
{
"16
[; ;USART.c: 16:    SPBRG = x;
[e = _SPBRG -> _x `uc ]
"17
[; ;USART.c: 17:    SYNC = 0;
[e = _SYNC -> -> 0 `i `b ]
"18
[; ;USART.c: 18:    SPEN = 1;
[e = _SPEN -> -> 1 `i `b ]
"19
[; ;USART.c: 19:       TRISC7 = 1;
[e = _TRISC7 -> -> 1 `i `b ]
"20
[; ;USART.c: 20:       TRISC6 = 0;
[e = _TRISC6 -> -> 0 `i `b ]
"21
[; ;USART.c: 21:       CREN = 1;
[e = _CREN -> -> 1 `i `b ]
"22
[; ;USART.c: 22:       TXEN = 1;
[e = _TXEN -> -> 1 `i `b ]
"23
[; ;USART.c: 23:    return 1;
[e ) -> -> 1 `i `uc ]
[e $UE 95  ]
"24
[; ;USART.c: 24:  }
}
[e :U 97 ]
"25
[; ;USART.c: 25:  return 0;
[e ) -> -> 0 `i `uc ]
[e $UE 95  ]
"26
[; ;USART.c: 26: }
[e :UE 95 ]
}
"28
[; ;USART.c: 28: char UART_TX_Empty()
[v _UART_TX_Empty `(uc ~T0 @X0 1 ef ]
"29
[; ;USART.c: 29: {
{
[e :U _UART_TX_Empty ]
[f ]
"30
[; ;USART.c: 30:   return TRMT;
[e ) -> _TRMT `uc ]
[e $UE 98  ]
"31
[; ;USART.c: 31: }
[e :UE 98 ]
}
"33
[; ;USART.c: 33: char UART_Data_Ready()
[v _UART_Data_Ready `(uc ~T0 @X0 1 ef ]
"34
[; ;USART.c: 34: {
{
[e :U _UART_Data_Ready ]
[f ]
"35
[; ;USART.c: 35:    return RCIF;
[e ) -> _RCIF `uc ]
[e $UE 99  ]
"36
[; ;USART.c: 36: }
[e :UE 99 ]
}
"37
[; ;USART.c: 37: char UART_Read()
[v _UART_Read `(uc ~T0 @X0 1 ef ]
"38
[; ;USART.c: 38: {
{
[e :U _UART_Read ]
[f ]
"40
[; ;USART.c: 40:   while(!RCIF);
[e $U 101  ]
[e :U 102 ]
[e :U 101 ]
[e $ ! _RCIF 102  ]
[e :U 103 ]
"41
[; ;USART.c: 41:   return RCREG;
[e ) -> _RCREG `uc ]
[e $UE 100  ]
"42
[; ;USART.c: 42: }
[e :UE 100 ]
}
"44
[; ;USART.c: 44: void UART_Read_Text(char *Output, unsigned int length)
[v _UART_Read_Text `(v ~T0 @X0 1 ef2`*uc`ui ]
"45
[; ;USART.c: 45: {
{
[e :U _UART_Read_Text ]
"44
[; ;USART.c: 44: void UART_Read_Text(char *Output, unsigned int length)
[v _Output `*uc ~T0 @X0 1 r1 ]
[v _length `ui ~T0 @X0 1 r2 ]
"45
[; ;USART.c: 45: {
[f ]
"46
[; ;USART.c: 46:  unsigned int i;
[v _i `ui ~T0 @X0 1 a ]
"47
[; ;USART.c: 47:  for(int i=0;i<length;i++)
{
[v _i `i ~T0 @X0 1 a ]
[e = _i -> 0 `i ]
[e $U 108  ]
[e :U 105 ]
"48
[; ;USART.c: 48:   Output[i] = UART_Read();
[e = *U + _Output * -> _i `x -> -> # *U _Output `i `x ( _UART_Read ..  ]
[e ++ _i -> 1 `i ]
[e :U 108 ]
[e $ < -> _i `ui _length 105  ]
[e :U 106 ]
}
"49
[; ;USART.c: 49: }
[e :UE 104 ]
}
"51
[; ;USART.c: 51: void UART_Write(char data)
[v _UART_Write `(v ~T0 @X0 1 ef1`uc ]
"52
[; ;USART.c: 52: {
{
[e :U _UART_Write ]
"51
[; ;USART.c: 51: void UART_Write(char data)
[v _data `uc ~T0 @X0 1 r1 ]
"52
[; ;USART.c: 52: {
[f ]
"53
[; ;USART.c: 53:   while(!TRMT);
[e $U 110  ]
[e :U 111 ]
[e :U 110 ]
[e $ ! _TRMT 111  ]
[e :U 112 ]
"54
[; ;USART.c: 54:   TXREG = data;
[e = _TXREG -> _data `uc ]
"55
[; ;USART.c: 55: }
[e :UE 109 ]
}
"57
[; ;USART.c: 57: void UART_Write_Text(char *text)
[v _UART_Write_Text `(v ~T0 @X0 1 ef1`*uc ]
"58
[; ;USART.c: 58: {
{
[e :U _UART_Write_Text ]
"57
[; ;USART.c: 57: void UART_Write_Text(char *text)
[v _text `*uc ~T0 @X0 1 r1 ]
"58
[; ;USART.c: 58: {
[f ]
"59
[; ;USART.c: 59:   int i;
[v _i `i ~T0 @X0 1 a ]
"60
[; ;USART.c: 60:   for(i=0;text[i]!='\0';i++)
{
[e = _i -> 0 `i ]
[e $U 117  ]
[e :U 114 ]
"61
[; ;USART.c: 61:    UART_Write(text[i]);
[e ( _UART_Write (1 *U + _text * -> _i `x -> -> # *U _text `i `x ]
[e ++ _i -> 1 `i ]
[e :U 117 ]
[e $ != -> *U + _text * -> _i `x -> -> # *U _text `i `x `ui -> 0 `ui 114  ]
[e :U 115 ]
}
"62
[; ;USART.c: 62: }
[e :UE 113 ]
}
