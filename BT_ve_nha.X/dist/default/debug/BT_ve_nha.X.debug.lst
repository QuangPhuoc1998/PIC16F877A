

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 07 23:20:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237                           
   238                           	psect	idataBANK0
   239  0558                     __pidataBANK0:	
   240                           
   241                           ;initializer for _mang_3
   242  0558  3454               	retlw	84
   243  0559  3468               	retlw	104
   244  055A  3475               	retlw	117
   245  055B  3420               	retlw	32
   246  055C  3436               	retlw	54
   247  055D  342F               	retlw	47
   248  055E  3433               	retlw	51
   249  055F  342F               	retlw	47
   250  0560  3432               	retlw	50
   251  0561  3430               	retlw	48
   252  0562  3431               	retlw	49
   253  0563  3439               	retlw	57
   254                           
   255                           ;initializer for _mang_5
   256  0564  3448               	retlw	72
   257  0565  346F               	retlw	111
   258  0566  346D               	retlw	109
   259  0567  3420               	retlw	32
   260  0568  346E               	retlw	110
   261  0569  3461               	retlw	97
   262  056A  3479               	retlw	121
   263  056B  3420               	retlw	32
   264  056C  346C               	retlw	108
   265  056D  3461               	retlw	97
   266                           
   267                           ;initializer for _mang_1
   268  056E  342A               	retlw	42
   269  056F  342A               	retlw	42
   270  0570  342A               	retlw	42
   271  0571  3448               	retlw	72
   272  0572  3449               	retlw	73
   273  0573  3448               	retlw	72
   274  0574  3449               	retlw	73
   275  0575  342A               	retlw	42
   276  0576  342A               	retlw	42
   277  0577  342A               	retlw	42
   278                           
   279                           ;initializer for _mang_4
   280  0578  3447               	retlw	71
   281  0579  344F               	retlw	79
   282  057A  344F               	retlw	79
   283  057B  3444               	retlw	68
   284  057C  3420               	retlw	32
   285  057D  344D               	retlw	77
   286  057E  344F               	retlw	79
   287  057F  3452               	retlw	82
   288  0580  344E               	retlw	78
   289  0581  3449               	retlw	73
   290  0582  344E               	retlw	78
   291  0583  3447               	retlw	71
   292  0584  3400               	retlw	0
   293  0585  3400               	retlw	0
   294  0586  3400               	retlw	0
   295  0587  3400               	retlw	0
   296                           
   297                           ;initializer for _mang_2
   298  0588  3443               	retlw	67
   299  0589  3468               	retlw	104
   300  058A  3461               	retlw	97
   301  058B  346F               	retlw	111
   302  058C  3420               	retlw	32
   303  058D  3463               	retlw	99
   304  058E  3461               	retlw	97
   305  058F  3463               	retlw	99
   306  0590  3420               	retlw	32
   307  0591  3462               	retlw	98
   308  0592  3461               	retlw	97
   309  0593  346E               	retlw	110
   310  0041                     _RD1	set	65
   311  0040                     _RD0	set	64
   312  0045                     _RD5	set	69
   313  0044                     _RD4	set	68
   314  0043                     _RD3	set	67
   315  0042                     _RD2	set	66
   316  0088                     _TRISD	set	136
   317                           
   318                           	psect	strings
   319  0003                     __pstrings:	
   320  0003                     stringtab:	
   321  0003                     __stringtab:	
   322                           
   323                           ;	String table - string pointers are 1 byte each
   324  0003  1BFF               	btfsc	btemp+1,7
   325  0004  280D               	ljmp	stringcode
   326  0005  1383               	bcf	3,7
   327  0006  187F               	btfsc	btemp+1,0
   328  0007  1783               	bsf	3,7
   329  0008  0800               	movf	0,w
   330  0009  0A84               	incf	4,f
   331  000A  1903               	skipnz
   332  000B  0AFF               	incf	btemp+1,f
   333  000C  0008               	return
   334  000D                     stringcode:	
   335  000D                     stringdir:	
   336  000D  3000               	movlw	high stringdir
   337  000E  008A               	movwf	10
   338  000F  0804               	movf	4,w
   339  0010  0A84               	incf	4,f
   340  0011  0782               	addwf	2,f
   341  0012                     __stringbase:	
   342  0012  3400               	retlw	0
   343  0013                     __end_of__stringtab:	
   344  0013                     STR_1:	
   345  0013  3448               	retlw	72	;'H'
   346  0014  346F               	retlw	111	;'o'
   347  0015  346D               	retlw	109	;'m'
   348  0016  3420               	retlw	32	;' '
   349  0017  346E               	retlw	110	;'n'
   350  0018  3461               	retlw	97	;'a'
   351  0019  3479               	retlw	121	;'y'
   352  001A  3420               	retlw	32	;' '
   353  001B  346C               	retlw	108	;'l'
   354  001C  3461               	retlw	97	;'a'
   355  001D  343A               	retlw	58	;':'
   356  001E  3420               	retlw	32	;' '
   357  001F  3400               	retlw	0
   358                           
   359                           ; #config settings
   360  0000                     
   361                           	psect	cinit
   362  07F0                     start_initialization:	
   363  07F0                     __initialization:	
   364                           
   365                           ; Initialize objects allocated to BANK0
   366  07F0  1383               	bcf	3,7	;select IRP bank0
   367  07F1  305C               	movlw	low (__pdataBANK0+60)
   368  07F2  00FD               	movwf	btemp+-1
   369  07F3  3005               	movlw	high __pidataBANK0
   370  07F4  00FE               	movwf	btemp
   371  07F5  3058               	movlw	low __pidataBANK0
   372  07F6  00FF               	movwf	btemp+1
   373  07F7  3020               	movlw	low __pdataBANK0
   374  07F8  0084               	movwf	4
   375  07F9  120A  118A  24DE   	fcall	init_ram0
   376  07FC                     end_of_initialization:	
   377                           ;End of C runtime variable initialization code
   378                           
   379  07FC                     __end_of__initialization:	
   380  07FC  0183               	clrf	3
   381  07FD  120A  118A  2E77   	ljmp	_main	;jump to C main() function
   382                           
   383                           	psect	dataBANK0
   384  0020                     __pdataBANK0:	
   385  0020                     _mang_3:	
   386  0020                     	ds	12
   387  002C                     _mang_5:	
   388  002C                     	ds	10
   389  0036                     _mang_1:	
   390  0036                     	ds	10
   391  0040                     _mang_4:	
   392  0040                     	ds	16
   393  0050                     _mang_2:	
   394  0050                     	ds	12
   395                           
   396                           	psect	inittext
   397  04DA                     init_fetch0:	
   398                           ;	Called with low address in FSR and high address in W
   399                           
   400  04DA  087E               	movf	126,w
   401  04DB  008A               	movwf	10
   402  04DC  087F               	movf	127,w
   403  04DD  0082               	movwf	2
   404  04DE                     init_ram0:	
   405                           ;Called with:
   406                           ;	high address of idata address in btemp 
   407                           ;	low address of idata address in btemp+1 
   408                           ;	low address of data in FSR
   409                           ;	high address + 1 of data in btemp-1
   410                           
   411  04DE  24DA  120A  118A   	fcall	init_fetch0
   412  04E1  0080               	movwf	0
   413  04E2  0A84               	incf	4,f
   414  04E3  0804               	movf	4,w
   415  04E4  067D               	xorwf	125,w
   416  04E5  1903               	btfsc	3,2
   417  04E6  3400               	retlw	0
   418  04E7  0AFF               	incf	127,f
   419  04E8  1903               	btfsc	3,2
   420  04E9  0AFE               	incf	126,f
   421  04EA  2CDE               	goto	init_ram0
   422                           
   423                           	psect	cstackCOMMON
   424  0070                     __pcstackCOMMON:	
   425  0070                     ?_Lcd_Init:	
   426  0070                     ?_Lcd_Write_Char:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_Lcd_Clear:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_Lcd_Shift_Right:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_Lcd_Shift_Left:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_main:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_Lcd_Port:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ??_Lcd_Port:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_Lcd_Cmd:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     Lcd_Port@a:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 1 bytes @ 0x0
   455  0070                     	ds	1
   456  0071                     ??_Lcd_Write_Char:	
   457  0071                     ??_Lcd_Cmd:	
   458                           ; 1 bytes @ 0x1
   459                           
   460                           
   461                           ; 1 bytes @ 0x1
   462  0071                     	ds	1
   463  0072                     Lcd_Write_Char@temp:	
   464                           
   465                           ; 1 bytes @ 0x2
   466  0072                     	ds	1
   467  0073                     Lcd_Cmd@a:	
   468  0073                     Lcd_Write_Char@y:	
   469                           ; 1 bytes @ 0x3
   470                           
   471                           
   472                           ; 1 bytes @ 0x3
   473  0073                     	ds	1
   474  0074                     ??_Lcd_Init:	
   475  0074                     ?_Lcd_Set_Cursor:	
   476                           ; 1 bytes @ 0x4
   477                           
   478  0074                     ??_Lcd_Clear:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0074                     ??_Lcd_Shift_Right:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     ??_Lcd_Shift_Left:	
   485                           ; 1 bytes @ 0x4
   486                           
   487  0074                     Lcd_Set_Cursor@b:	
   488                           ; 1 bytes @ 0x4
   489                           
   490  0074                     Lcd_Write_Char@a:	
   491                           ; 1 bytes @ 0x4
   492                           
   493                           
   494                           ; 1 bytes @ 0x4
   495  0074                     	ds	1
   496  0075                     ??_Lcd_Set_Cursor:	
   497  0075                     ?_Lcd_Write_String:	
   498                           ; 1 bytes @ 0x5
   499                           
   500  0075                     Lcd_Write_String@a:	
   501                           ; 1 bytes @ 0x5
   502                           
   503                           
   504                           ; 2 bytes @ 0x5
   505  0075                     	ds	2
   506  0077                     ??_Lcd_Write_String:	
   507  0077                     Lcd_Set_Cursor@a:	
   508                           ; 1 bytes @ 0x7
   509                           
   510                           
   511                           ; 1 bytes @ 0x7
   512  0077                     	ds	1
   513  0078                     Lcd_Set_Cursor@z:	
   514                           
   515                           ; 1 bytes @ 0x8
   516  0078                     	ds	1
   517  0079                     Lcd_Set_Cursor@y:	
   518                           
   519                           ; 1 bytes @ 0x9
   520  0079                     	ds	1
   521  007A                     Lcd_Set_Cursor@temp:	
   522  007A                     Lcd_Write_String@i:	
   523                           ; 1 bytes @ 0xA
   524                           
   525                           
   526                           ; 2 bytes @ 0xA
   527  007A                     	ds	2
   528  007C                     main@i:	
   529                           
   530                           ; 1 bytes @ 0xC
   531  007C                     	ds	1
   532                           
   533                           	psect	cstackBANK0
   534  005C                     __pcstackBANK0:	
   535  005C                     ??_main:	
   536                           
   537                           ; 1 bytes @ 0x0
   538  005C                     	ds	3
   539                           
   540                           	psect	maintext
   541  0677                     __pmaintext:	
   542 ;;
   543 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   544 ;;
   545 ;; *************** function _main *****************
   546 ;; Defined at:
   547 ;;		line 9 in file "BT.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  i               1   12[COMMON] unsigned char 
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : B00/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   561 ;;      Params:         0       0       0       0       0
   562 ;;      Locals:         1       0       0       0       0
   563 ;;      Temps:          0       3       0       0       0
   564 ;;      Totals:         1       3       0       0       0
   565 ;;Total ram usage:        4 bytes
   566 ;; Hardware stack levels required when called:    3
   567 ;; This function calls:
   568 ;;		_Lcd_Clear
   569 ;;		_Lcd_Init
   570 ;;		_Lcd_Set_Cursor
   571 ;;		_Lcd_Shift_Left
   572 ;;		_Lcd_Shift_Right
   573 ;;		_Lcd_Write_Char
   574 ;;		_Lcd_Write_String
   575 ;; This function is called by:
   576 ;;		Startup code after reset
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           
   581                           ;psect for function _main
   582  0677                     _main:	
   583                           
   584                           ;BT.c: 11:     unsigned char i;;BT.c: 12:     TRISD = 0x00;
   585                           
   586                           ;incstack = 0
   587                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   588  0677  1683               	bsf	3,5	;RP0=1, select bank1
   589  0678  1303               	bcf	3,6	;RP1=0, select bank1
   590  0679  0188               	clrf	8	;volatile
   591                           
   592                           ;BT.c: 13:     Lcd_Init();
   593  067A  120A  118A  261B  120A  118A  	fcall	_Lcd_Init
   594  067F                     l995:	
   595                           
   596                           ;BT.c: 17:     {;BT.c: 18:       Lcd_Set_Cursor(1,4);
   597  067F  3004               	movlw	4
   598  0680  1283               	bcf	3,5	;RP0=0, select bank0
   599  0681  1303               	bcf	3,6	;RP1=0, select bank0
   600  0682  00DC               	movwf	??_main
   601  0683  085C               	movf	??_main,w
   602  0684  00F4               	movwf	Lcd_Set_Cursor@b
   603  0685  3001               	movlw	1
   604  0686  120A  118A  25D1  120A  118A  	fcall	_Lcd_Set_Cursor
   605                           
   606                           ;BT.c: 19:       for(i=0;i<10;i++)
   607  068B  01FC               	clrf	main@i
   608  068C                     l1001:	
   609                           
   610                           ;BT.c: 20:       {;BT.c: 21:           Lcd_Write_Char(mang_1[i]);
   611  068C  087C               	movf	main@i,w
   612  068D  3E36               	addlw	(low (_mang_1| 0))& (0+255)
   613  068E  0084               	movwf	4
   614  068F  1383               	bcf	3,7	;select IRP bank0
   615  0690  0800               	movf	0,w
   616  0691  120A  118A  251F  120A  118A  	fcall	_Lcd_Write_Char
   617                           
   618                           ;BT.c: 22:           _delay((unsigned long)((100)*(20000000/4000.0)));
   619  0696  3003               	movlw	3
   620  0697  1283               	bcf	3,5	;RP0=0, select bank0
   621  0698  1303               	bcf	3,6	;RP1=0, select bank0
   622  0699  00DE               	movwf	??_main+2
   623  069A  308A               	movlw	138
   624  069B  00DD               	movwf	??_main+1
   625  069C  3055               	movlw	85
   626  069D  00DC               	movwf	??_main
   627  069E                     u397:	
   628  069E  0BDC               	decfsz	??_main,f
   629  069F  2E9E               	goto	u397
   630  06A0  0BDD               	decfsz	??_main+1,f
   631  06A1  2E9E               	goto	u397
   632  06A2  0BDE               	decfsz	??_main+2,f
   633  06A3  2E9E               	goto	u397
   634                           
   635                           ;BT.c: 23:       }
   636  06A4  3001               	movlw	1
   637  06A5  1283               	bcf	3,5	;RP0=0, select bank0
   638  06A6  1303               	bcf	3,6	;RP1=0, select bank0
   639  06A7  00DC               	movwf	??_main
   640  06A8  085C               	movf	??_main,w
   641  06A9  07FC               	addwf	main@i,f
   642  06AA  300A               	movlw	10
   643  06AB  027C               	subwf	main@i,w
   644  06AC  1C03               	skipc
   645  06AD  2E8C               	goto	l1001
   646                           
   647                           ;BT.c: 24:       for(i=17;i>2;i--)
   648  06AE  3011               	movlw	17
   649  06AF  00DC               	movwf	??_main
   650  06B0  085C               	movf	??_main,w
   651  06B1  00FC               	movwf	main@i
   652  06B2                     l1013:	
   653                           
   654                           ;BT.c: 25:       {;BT.c: 26:           Lcd_Set_Cursor(2,i);
   655  06B2  087C               	movf	main@i,w
   656  06B3  1283               	bcf	3,5	;RP0=0, select bank0
   657  06B4  1303               	bcf	3,6	;RP1=0, select bank0
   658  06B5  00DC               	movwf	??_main
   659  06B6  085C               	movf	??_main,w
   660  06B7  00F4               	movwf	Lcd_Set_Cursor@b
   661  06B8  3002               	movlw	2
   662  06B9  120A  118A  25D1  120A  118A  	fcall	_Lcd_Set_Cursor
   663                           
   664                           ;BT.c: 27:           Lcd_Write_String(mang_2);
   665  06BE  3050               	movlw	(low (_mang_2| 0))& (0+255)
   666  06BF  00F5               	movwf	Lcd_Write_String@a
   667  06C0  3000               	movlw	0
   668  06C1  00F6               	movwf	Lcd_Write_String@a+1
   669  06C2  120A  118A  2594  120A  118A  	fcall	_Lcd_Write_String
   670                           
   671                           ;BT.c: 28:           _delay((unsigned long)((100)*(20000000/4000.0)));
   672  06C7  3003               	movlw	3
   673  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   674  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   675  06CA  00DE               	movwf	??_main+2
   676  06CB  308A               	movlw	138
   677  06CC  00DD               	movwf	??_main+1
   678  06CD  3055               	movlw	85
   679  06CE  00DC               	movwf	??_main
   680  06CF                     u407:	
   681  06CF  0BDC               	decfsz	??_main,f
   682  06D0  2ECF               	goto	u407
   683  06D1  0BDD               	decfsz	??_main+1,f
   684  06D2  2ECF               	goto	u407
   685  06D3  0BDE               	decfsz	??_main+2,f
   686  06D4  2ECF               	goto	u407
   687                           
   688                           ;BT.c: 29:       }
   689  06D5  3001               	movlw	1
   690  06D6  02FC               	subwf	main@i,f
   691  06D7  3003               	movlw	3
   692  06D8  027C               	subwf	main@i,w
   693  06D9  1803               	skipnc
   694  06DA  2EB2               	goto	l1013
   695                           
   696                           ;BT.c: 30:       _delay((unsigned long)((1500)*(20000000/4000.0)));
   697  06DB  3027               	movlw	39
   698  06DC  1283               	bcf	3,5	;RP0=0, select bank0
   699  06DD  1303               	bcf	3,6	;RP1=0, select bank0
   700  06DE  00DE               	movwf	??_main+2
   701  06DF  300D               	movlw	13
   702  06E0  00DD               	movwf	??_main+1
   703  06E1  3025               	movlw	37
   704  06E2  00DC               	movwf	??_main
   705  06E3                     u417:	
   706  06E3  0BDC               	decfsz	??_main,f
   707  06E4  2EE3               	goto	u417
   708  06E5  0BDD               	decfsz	??_main+1,f
   709  06E6  2EE3               	goto	u417
   710  06E7  0BDE               	decfsz	??_main+2,f
   711  06E8  2EE3               	goto	u417
   712  06E9  2EEA               	nop2
   713                           
   714                           ;BT.c: 31:       Lcd_Clear();
   715  06EA  120A  118A  24B9  120A  118A  	fcall	_Lcd_Clear
   716                           
   717                           ;BT.c: 32:       Lcd_Set_Cursor(1,1);
   718  06EF  01F4               	clrf	Lcd_Set_Cursor@b
   719  06F0  0AF4               	incf	Lcd_Set_Cursor@b,f
   720  06F1  3001               	movlw	1
   721  06F2  120A  118A  25D1  120A  118A  	fcall	_Lcd_Set_Cursor
   722                           
   723                           ;BT.c: 33:       Lcd_Write_String("Hom nay la: ");
   724  06F7  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   725  06F8  00F5               	movwf	Lcd_Write_String@a
   726  06F9  3080               	movlw	128
   727  06FA  00F6               	movwf	Lcd_Write_String@a+1
   728  06FB  120A  118A  2594  120A  118A  	fcall	_Lcd_Write_String
   729                           
   730                           ;BT.c: 34:     _delay((unsigned long)((500)*(20000000/4000.0)));
   731  0700  300D               	movlw	13
   732  0701  1283               	bcf	3,5	;RP0=0, select bank0
   733  0702  1303               	bcf	3,6	;RP1=0, select bank0
   734  0703  00DE               	movwf	??_main+2
   735  0704  30AF               	movlw	175
   736  0705  00DD               	movwf	??_main+1
   737  0706  30B5               	movlw	181
   738  0707  00DC               	movwf	??_main
   739  0708                     u427:	
   740  0708  0BDC               	decfsz	??_main,f
   741  0709  2F08               	goto	u427
   742  070A  0BDD               	decfsz	??_main+1,f
   743  070B  2F08               	goto	u427
   744  070C  0BDE               	decfsz	??_main+2,f
   745  070D  2F08               	goto	u427
   746  070E  2F0F               	nop2
   747                           
   748                           ;BT.c: 35:     Lcd_Set_Cursor(2,1);
   749  070F  01F4               	clrf	Lcd_Set_Cursor@b
   750  0710  0AF4               	incf	Lcd_Set_Cursor@b,f
   751  0711  3002               	movlw	2
   752  0712  120A  118A  25D1  120A  118A  	fcall	_Lcd_Set_Cursor
   753                           
   754                           ;BT.c: 36:     for(i=0;i<12;i++)
   755  0717  01FC               	clrf	main@i
   756  0718                     l1041:	
   757                           
   758                           ;BT.c: 37:     {;BT.c: 38:         Lcd_Write_Char(mang_3[i]);
   759  0718  087C               	movf	main@i,w
   760  0719  3E20               	addlw	(low (_mang_3| 0))& (0+255)
   761  071A  0084               	movwf	4
   762  071B  1383               	bcf	3,7	;select IRP bank0
   763  071C  0800               	movf	0,w
   764  071D  120A  118A  251F  120A  118A  	fcall	_Lcd_Write_Char
   765                           
   766                           ;BT.c: 39:         _delay((unsigned long)((100)*(20000000/4000.0)));
   767  0722  3003               	movlw	3
   768  0723  1283               	bcf	3,5	;RP0=0, select bank0
   769  0724  1303               	bcf	3,6	;RP1=0, select bank0
   770  0725  00DE               	movwf	??_main+2
   771  0726  308A               	movlw	138
   772  0727  00DD               	movwf	??_main+1
   773  0728  3055               	movlw	85
   774  0729  00DC               	movwf	??_main
   775  072A                     u437:	
   776  072A  0BDC               	decfsz	??_main,f
   777  072B  2F2A               	goto	u437
   778  072C  0BDD               	decfsz	??_main+1,f
   779  072D  2F2A               	goto	u437
   780  072E  0BDE               	decfsz	??_main+2,f
   781  072F  2F2A               	goto	u437
   782                           
   783                           ;BT.c: 40:     }
   784  0730  3001               	movlw	1
   785  0731  1283               	bcf	3,5	;RP0=0, select bank0
   786  0732  1303               	bcf	3,6	;RP1=0, select bank0
   787  0733  00DC               	movwf	??_main
   788  0734  085C               	movf	??_main,w
   789  0735  07FC               	addwf	main@i,f
   790  0736  300C               	movlw	12
   791  0737  027C               	subwf	main@i,w
   792  0738  1C03               	skipc
   793  0739  2F18               	goto	l1041
   794                           
   795                           ;BT.c: 41:     _delay((unsigned long)((1500)*(20000000/4000.0)));
   796  073A  3027               	movlw	39
   797  073B  1283               	bcf	3,5	;RP0=0, select bank0
   798  073C  1303               	bcf	3,6	;RP1=0, select bank0
   799  073D  00DE               	movwf	??_main+2
   800  073E  300D               	movlw	13
   801  073F  00DD               	movwf	??_main+1
   802  0740  3025               	movlw	37
   803  0741  00DC               	movwf	??_main
   804  0742                     u447:	
   805  0742  0BDC               	decfsz	??_main,f
   806  0743  2F42               	goto	u447
   807  0744  0BDD               	decfsz	??_main+1,f
   808  0745  2F42               	goto	u447
   809  0746  0BDE               	decfsz	??_main+2,f
   810  0747  2F42               	goto	u447
   811  0748  2F49               	nop2
   812                           
   813                           ;BT.c: 42:     Lcd_Clear();
   814  0749  120A  118A  24B9  120A  118A  	fcall	_Lcd_Clear
   815                           
   816                           ;BT.c: 43:     Lcd_Set_Cursor(1,3);
   817  074E  3003               	movlw	3
   818  074F  1283               	bcf	3,5	;RP0=0, select bank0
   819  0750  1303               	bcf	3,6	;RP1=0, select bank0
   820  0751  00DC               	movwf	??_main
   821  0752  085C               	movf	??_main,w
   822  0753  00F4               	movwf	Lcd_Set_Cursor@b
   823  0754  3001               	movlw	1
   824  0755  120A  118A  25D1  120A  118A  	fcall	_Lcd_Set_Cursor
   825                           
   826                           ;BT.c: 44:     Lcd_Write_String(mang_4);
   827  075A  3040               	movlw	(low (_mang_4| 0))& (0+255)
   828  075B  00F5               	movwf	Lcd_Write_String@a
   829  075C  3000               	movlw	0
   830  075D  00F6               	movwf	Lcd_Write_String@a+1
   831  075E  120A  118A  2594  120A  118A  	fcall	_Lcd_Write_String
   832                           
   833                           ;BT.c: 45:     _delay((unsigned long)((1000)*(20000000/4000.0)));
   834  0763  301A               	movlw	26
   835  0764  1283               	bcf	3,5	;RP0=0, select bank0
   836  0765  1303               	bcf	3,6	;RP1=0, select bank0
   837  0766  00DE               	movwf	??_main+2
   838  0767  305E               	movlw	94
   839  0768  00DD               	movwf	??_main+1
   840  0769  306D               	movlw	109
   841  076A  00DC               	movwf	??_main
   842  076B                     u457:	
   843  076B  0BDC               	decfsz	??_main,f
   844  076C  2F6B               	goto	u457
   845  076D  0BDD               	decfsz	??_main+1,f
   846  076E  2F6B               	goto	u457
   847  076F  0BDE               	decfsz	??_main+2,f
   848  0770  2F6B               	goto	u457
   849  0771  2F72               	nop2
   850                           
   851                           ;BT.c: 46:     for(i=0;i<14;i++)
   852  0772  01FC               	clrf	main@i
   853  0773                     l1065:	
   854                           
   855                           ;BT.c: 47:     {;BT.c: 48:         Lcd_Shift_Right();
   856  0773  120A  118A  24CF  120A  118A  	fcall	_Lcd_Shift_Right
   857                           
   858                           ;BT.c: 49:         _delay((unsigned long)((100)*(20000000/4000.0)));
   859  0778  3003               	movlw	3
   860  0779  1283               	bcf	3,5	;RP0=0, select bank0
   861  077A  1303               	bcf	3,6	;RP1=0, select bank0
   862  077B  00DE               	movwf	??_main+2
   863  077C  308A               	movlw	138
   864  077D  00DD               	movwf	??_main+1
   865  077E  3055               	movlw	85
   866  077F  00DC               	movwf	??_main
   867  0780                     u467:	
   868  0780  0BDC               	decfsz	??_main,f
   869  0781  2F80               	goto	u467
   870  0782  0BDD               	decfsz	??_main+1,f
   871  0783  2F80               	goto	u467
   872  0784  0BDE               	decfsz	??_main+2,f
   873  0785  2F80               	goto	u467
   874                           
   875                           ;BT.c: 50:     }
   876  0786  3001               	movlw	1
   877  0787  1283               	bcf	3,5	;RP0=0, select bank0
   878  0788  1303               	bcf	3,6	;RP1=0, select bank0
   879  0789  00DC               	movwf	??_main
   880  078A  085C               	movf	??_main,w
   881  078B  07FC               	addwf	main@i,f
   882  078C  300E               	movlw	14
   883  078D  027C               	subwf	main@i,w
   884  078E  1C03               	skipc
   885  078F  2F73               	goto	l1065
   886                           
   887                           ;BT.c: 51:     for(i=0;i<29;i++)
   888  0790  01FC               	clrf	main@i
   889  0791                     l1079:	
   890                           
   891                           ;BT.c: 52:     {;BT.c: 53:         Lcd_Shift_Left();
   892  0791  120A  118A  24C4  120A  118A  	fcall	_Lcd_Shift_Left
   893                           
   894                           ;BT.c: 54:         _delay((unsigned long)((100)*(20000000/4000.0)));
   895  0796  3003               	movlw	3
   896  0797  1283               	bcf	3,5	;RP0=0, select bank0
   897  0798  1303               	bcf	3,6	;RP1=0, select bank0
   898  0799  00DE               	movwf	??_main+2
   899  079A  308A               	movlw	138
   900  079B  00DD               	movwf	??_main+1
   901  079C  3055               	movlw	85
   902  079D  00DC               	movwf	??_main
   903  079E                     u477:	
   904  079E  0BDC               	decfsz	??_main,f
   905  079F  2F9E               	goto	u477
   906  07A0  0BDD               	decfsz	??_main+1,f
   907  07A1  2F9E               	goto	u477
   908  07A2  0BDE               	decfsz	??_main+2,f
   909  07A3  2F9E               	goto	u477
   910                           
   911                           ;BT.c: 55:     }
   912  07A4  3001               	movlw	1
   913  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   914  07A6  1303               	bcf	3,6	;RP1=0, select bank0
   915  07A7  00DC               	movwf	??_main
   916  07A8  085C               	movf	??_main,w
   917  07A9  07FC               	addwf	main@i,f
   918  07AA  301D               	movlw	29
   919  07AB  027C               	subwf	main@i,w
   920  07AC  1C03               	skipc
   921  07AD  2F91               	goto	l1079
   922                           
   923                           ;BT.c: 56:     for(i=0;i<29;i++)
   924  07AE  01FC               	clrf	main@i
   925  07AF                     l1093:	
   926                           
   927                           ;BT.c: 57:     {;BT.c: 58:         Lcd_Shift_Right();
   928  07AF  120A  118A  24CF  120A  118A  	fcall	_Lcd_Shift_Right
   929                           
   930                           ;BT.c: 59:         _delay((unsigned long)((100)*(20000000/4000.0)));
   931  07B4  3003               	movlw	3
   932  07B5  1283               	bcf	3,5	;RP0=0, select bank0
   933  07B6  1303               	bcf	3,6	;RP1=0, select bank0
   934  07B7  00DE               	movwf	??_main+2
   935  07B8  308A               	movlw	138
   936  07B9  00DD               	movwf	??_main+1
   937  07BA  3055               	movlw	85
   938  07BB  00DC               	movwf	??_main
   939  07BC                     u487:	
   940  07BC  0BDC               	decfsz	??_main,f
   941  07BD  2FBC               	goto	u487
   942  07BE  0BDD               	decfsz	??_main+1,f
   943  07BF  2FBC               	goto	u487
   944  07C0  0BDE               	decfsz	??_main+2,f
   945  07C1  2FBC               	goto	u487
   946                           
   947                           ;BT.c: 60:     }
   948  07C2  3001               	movlw	1
   949  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   950  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   951  07C5  00DC               	movwf	??_main
   952  07C6  085C               	movf	??_main,w
   953  07C7  07FC               	addwf	main@i,f
   954  07C8  301D               	movlw	29
   955  07C9  027C               	subwf	main@i,w
   956  07CA  1C03               	skipc
   957  07CB  2FAF               	goto	l1093
   958                           
   959                           ;BT.c: 61:     for(i=0;i<29;i++)
   960  07CC  01FC               	clrf	main@i
   961  07CD                     l1107:	
   962                           
   963                           ;BT.c: 62:     {;BT.c: 63:         Lcd_Shift_Left();
   964  07CD  120A  118A  24C4  120A  118A  	fcall	_Lcd_Shift_Left
   965                           
   966                           ;BT.c: 64:         _delay((unsigned long)((100)*(20000000/4000.0)));
   967  07D2  3003               	movlw	3
   968  07D3  1283               	bcf	3,5	;RP0=0, select bank0
   969  07D4  1303               	bcf	3,6	;RP1=0, select bank0
   970  07D5  00DE               	movwf	??_main+2
   971  07D6  308A               	movlw	138
   972  07D7  00DD               	movwf	??_main+1
   973  07D8  3055               	movlw	85
   974  07D9  00DC               	movwf	??_main
   975  07DA                     u497:	
   976  07DA  0BDC               	decfsz	??_main,f
   977  07DB  2FDA               	goto	u497
   978  07DC  0BDD               	decfsz	??_main+1,f
   979  07DD  2FDA               	goto	u497
   980  07DE  0BDE               	decfsz	??_main+2,f
   981  07DF  2FDA               	goto	u497
   982                           
   983                           ;BT.c: 65:     }
   984  07E0  3001               	movlw	1
   985  07E1  1283               	bcf	3,5	;RP0=0, select bank0
   986  07E2  1303               	bcf	3,6	;RP1=0, select bank0
   987  07E3  00DC               	movwf	??_main
   988  07E4  085C               	movf	??_main,w
   989  07E5  07FC               	addwf	main@i,f
   990  07E6  301D               	movlw	29
   991  07E7  027C               	subwf	main@i,w
   992  07E8  1C03               	skipc
   993  07E9  2FCD               	goto	l1107
   994                           
   995                           ;BT.c: 66:     Lcd_Clear();
   996  07EA  120A  118A  24B9  120A  118A  	fcall	_Lcd_Clear
   997  07EF  2E7F               	goto	l995
   998  07F0                     __end_of_main:	
   999                           
  1000                           	psect	text1
  1001  0594                     __ptext1:	
  1002 ;; *************** function _Lcd_Write_String *****************
  1003 ;; Defined at:
  1004 ;;		line 98 in file "lcd4.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  a               2    5[COMMON] PTR unsigned char 
  1007 ;;		 -> mang_4(16), STR_1(13), mang_2(12), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  i               2   10[COMMON] int 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1019 ;;      Params:         2       0       0       0       0
  1020 ;;      Locals:         2       0       0       0       0
  1021 ;;      Temps:          3       0       0       0       0
  1022 ;;      Totals:         7       0       0       0       0
  1023 ;;Total ram usage:        7 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    2
  1026 ;; This function calls:
  1027 ;;		_Lcd_Write_Char
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           
  1034                           ;psect for function _Lcd_Write_String
  1035  0594                     _Lcd_Write_String:	
  1036                           
  1037                           ;lcd4.c: 98: void Lcd_Write_String(char *a);lcd4.c: 99: {;lcd4.c: 100:  int i;;lcd4.c: 1
      +                          01:  for(i=0;a[i]!='\0';i++)
  1038                           
  1039                           ;incstack = 0
  1040                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1041  0594  01FA               	clrf	Lcd_Write_String@i
  1042  0595  01FB               	clrf	Lcd_Write_String@i+1
  1043  0596                     l983:	
  1044  0596  087A               	movf	Lcd_Write_String@i,w
  1045  0597  0775               	addwf	Lcd_Write_String@a,w
  1046  0598  00F8               	movwf	??_Lcd_Write_String+1
  1047  0599  0876               	movf	Lcd_Write_String@a+1,w
  1048  059A  00F7               	movwf	??_Lcd_Write_String
  1049  059B  1803               	skipnc
  1050  059C  0AF7               	incf	??_Lcd_Write_String,f
  1051  059D  1BFA               	btfsc	Lcd_Write_String@i,7
  1052  059E  03F7               	decf	??_Lcd_Write_String,f
  1053  059F  0877               	movf	??_Lcd_Write_String,w
  1054  05A0  00F9               	movwf	??_Lcd_Write_String+2
  1055  05A1  0879               	movf	??_Lcd_Write_String+2,w
  1056  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1057  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1058  05A4  00FF               	movwf	127
  1059  05A5  0878               	movf	??_Lcd_Write_String+1,w
  1060  05A6  0084               	movwf	4
  1061  05A7  120A  118A  2003  120A  118A  	fcall	stringtab
  1062  05AC  3A00               	xorlw	0
  1063  05AD  1903               	btfsc	3,2
  1064  05AE  0008               	return
  1065                           
  1066                           ;lcd4.c: 102:     Lcd_Write_Char(a[i]);
  1067  05AF  087A               	movf	Lcd_Write_String@i,w
  1068  05B0  0775               	addwf	Lcd_Write_String@a,w
  1069  05B1  00F8               	movwf	??_Lcd_Write_String+1
  1070  05B2  0876               	movf	Lcd_Write_String@a+1,w
  1071  05B3  00F7               	movwf	??_Lcd_Write_String
  1072  05B4  1803               	skipnc
  1073  05B5  0AF7               	incf	??_Lcd_Write_String,f
  1074  05B6  1BFA               	btfsc	Lcd_Write_String@i,7
  1075  05B7  03F7               	decf	??_Lcd_Write_String,f
  1076  05B8  0877               	movf	??_Lcd_Write_String,w
  1077  05B9  00F9               	movwf	??_Lcd_Write_String+2
  1078  05BA  0879               	movf	??_Lcd_Write_String+2,w
  1079  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  1080  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  1081  05BD  00FF               	movwf	127
  1082  05BE  0878               	movf	??_Lcd_Write_String+1,w
  1083  05BF  0084               	movwf	4
  1084  05C0  120A  118A  2003  120A  118A  	fcall	stringtab
  1085  05C5  120A  118A  251F  120A  118A  	fcall	_Lcd_Write_Char
  1086  05CA  3001               	movlw	1
  1087  05CB  07FA               	addwf	Lcd_Write_String@i,f
  1088  05CC  1803               	skipnc
  1089  05CD  0AFB               	incf	Lcd_Write_String@i+1,f
  1090  05CE  3000               	movlw	0
  1091  05CF  07FB               	addwf	Lcd_Write_String@i+1,f
  1092  05D0  2D96               	goto	l983
  1093  05D1                     __end_of_Lcd_Write_String:	
  1094                           
  1095                           	psect	text2
  1096  051F                     __ptext2:	
  1097 ;; *************** function _Lcd_Write_Char *****************
  1098 ;; Defined at:
  1099 ;;		line 82 in file "lcd4.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  a               1    wreg     unsigned char 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  a               1    4[COMMON] unsigned char 
  1104 ;;  y               1    3[COMMON] unsigned char 
  1105 ;;  temp            1    2[COMMON] unsigned char 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, status,2, status,0, pclath, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1115 ;;      Params:         0       0       0       0       0
  1116 ;;      Locals:         3       0       0       0       0
  1117 ;;      Temps:          1       0       0       0       0
  1118 ;;      Totals:         4       0       0       0       0
  1119 ;;Total ram usage:        4 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    1
  1122 ;; This function calls:
  1123 ;;		_Lcd_Port
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;;		_Lcd_Write_String
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           
  1131                           ;psect for function _Lcd_Write_Char
  1132  051F                     _Lcd_Write_Char:	
  1133                           
  1134                           ;incstack = 0
  1135                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1136                           ;Lcd_Write_Char@a stored from wreg
  1137  051F  00F4               	movwf	Lcd_Write_Char@a
  1138                           
  1139                           ;lcd4.c: 82: void Lcd_Write_Char(char a);lcd4.c: 83: {;lcd4.c: 84:    char temp,y;;lcd4.
      +                          c: 85:    temp = a&0x0F;
  1140  0520  0874               	movf	Lcd_Write_Char@a,w
  1141  0521  390F               	andlw	15
  1142  0522  00F1               	movwf	??_Lcd_Write_Char
  1143  0523  0871               	movf	??_Lcd_Write_Char,w
  1144  0524  00F2               	movwf	Lcd_Write_Char@temp
  1145                           
  1146                           ;lcd4.c: 86:    y = a&0xF0;
  1147  0525  0874               	movf	Lcd_Write_Char@a,w
  1148  0526  39F0               	andlw	240
  1149  0527  00F1               	movwf	??_Lcd_Write_Char
  1150  0528  0871               	movf	??_Lcd_Write_Char,w
  1151  0529  00F3               	movwf	Lcd_Write_Char@y
  1152                           
  1153                           ;lcd4.c: 87:    RD0 = 1;
  1154  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1155  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1156  052C  1408               	bsf	8,0	;volatile
  1157                           
  1158                           ;lcd4.c: 88:    Lcd_Port(y>>4);
  1159  052D  0873               	movf	Lcd_Write_Char@y,w
  1160  052E  00F1               	movwf	??_Lcd_Write_Char
  1161  052F  3004               	movlw	4
  1162  0530                     u245:	
  1163  0530  1003               	clrc
  1164  0531  0CF1               	rrf	??_Lcd_Write_Char,f
  1165  0532  3EFF               	addlw	-1
  1166  0533  1D03               	skipz
  1167  0534  2D30               	goto	u245
  1168  0535  0871               	movf	??_Lcd_Write_Char,w
  1169  0536  120A  118A  24EB  120A  118A  	fcall	_Lcd_Port
  1170                           
  1171                           ;lcd4.c: 89:    RD1 = 1;
  1172  053B  1283               	bcf	3,5	;RP0=0, select bank0
  1173  053C  1303               	bcf	3,6	;RP1=0, select bank0
  1174  053D  1488               	bsf	8,1	;volatile
  1175                           
  1176                           ;lcd4.c: 90:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1177  053E  3042               	movlw	66
  1178  053F  00F1               	movwf	??_Lcd_Write_Char
  1179  0540                     u507:	
  1180  0540  0BF1               	decfsz	??_Lcd_Write_Char,f
  1181  0541  2D40               	goto	u507
  1182  0542  0000               	nop
  1183                           
  1184                           ;lcd4.c: 91:    RD1 = 0;
  1185  0543  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0544  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0545  1088               	bcf	8,1	;volatile
  1188                           
  1189                           ;lcd4.c: 92:    Lcd_Port(temp);
  1190  0546  0872               	movf	Lcd_Write_Char@temp,w
  1191  0547  120A  118A  24EB  120A  118A  	fcall	_Lcd_Port
  1192                           
  1193                           ;lcd4.c: 93:    RD1 = 1;
  1194  054C  1283               	bcf	3,5	;RP0=0, select bank0
  1195  054D  1303               	bcf	3,6	;RP1=0, select bank0
  1196  054E  1488               	bsf	8,1	;volatile
  1197                           
  1198                           ;lcd4.c: 94:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1199  054F  3042               	movlw	66
  1200  0550  00F1               	movwf	??_Lcd_Write_Char
  1201  0551                     u517:	
  1202  0551  0BF1               	decfsz	??_Lcd_Write_Char,f
  1203  0552  2D51               	goto	u517
  1204  0553  0000               	nop
  1205                           
  1206                           ;lcd4.c: 95:    RD1 = 0;
  1207  0554  1283               	bcf	3,5	;RP0=0, select bank0
  1208  0555  1303               	bcf	3,6	;RP1=0, select bank0
  1209  0556  1088               	bcf	8,1	;volatile
  1210  0557  0008               	return
  1211  0558                     __end_of_Lcd_Write_Char:	
  1212                           
  1213                           	psect	text3
  1214  04CF                     __ptext3:	
  1215 ;; *************** function _Lcd_Shift_Right *****************
  1216 ;; Defined at:
  1217 ;;		line 105 in file "lcd4.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0, pclath, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1231 ;;      Params:         0       0       0       0       0
  1232 ;;      Locals:         0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0
  1234 ;;      Totals:         0       0       0       0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    2
  1238 ;; This function calls:
  1239 ;;		_Lcd_Cmd
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           
  1246                           ;psect for function _Lcd_Shift_Right
  1247  04CF                     _Lcd_Shift_Right:	
  1248                           
  1249                           ;lcd4.c: 107:  Lcd_Cmd(0x01);
  1250                           
  1251                           ;incstack = 0
  1252                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  1253  04CF  3001               	movlw	1
  1254  04D0  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1255                           
  1256                           ;lcd4.c: 108:  Lcd_Cmd(0x0C);
  1257  04D5  300C               	movlw	12
  1258  04D6  120A  118A  2505   	fcall	_Lcd_Cmd
  1259  04D9  0008               	return
  1260  04DA                     __end_of_Lcd_Shift_Right:	
  1261                           
  1262                           	psect	text4
  1263  04C4                     __ptext4:	
  1264 ;; *************** function _Lcd_Shift_Left *****************
  1265 ;; Defined at:
  1266 ;;		line 111 in file "lcd4.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;		None
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;		None
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  1    wreg      void 
  1273 ;; Registers used:
  1274 ;;		wreg, status,2, status,0, pclath, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1280 ;;      Params:         0       0       0       0       0
  1281 ;;      Locals:         0       0       0       0       0
  1282 ;;      Temps:          0       0       0       0       0
  1283 ;;      Totals:         0       0       0       0       0
  1284 ;;Total ram usage:        0 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    2
  1287 ;; This function calls:
  1288 ;;		_Lcd_Cmd
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           
  1295                           ;psect for function _Lcd_Shift_Left
  1296  04C4                     _Lcd_Shift_Left:	
  1297                           
  1298                           ;lcd4.c: 113:  Lcd_Cmd(0x01);
  1299                           
  1300                           ;incstack = 0
  1301                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  1302  04C4  3001               	movlw	1
  1303  04C5  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1304                           
  1305                           ;lcd4.c: 114:  Lcd_Cmd(0x08);
  1306  04CA  3008               	movlw	8
  1307  04CB  120A  118A  2505   	fcall	_Lcd_Cmd
  1308  04CE  0008               	return
  1309  04CF                     __end_of_Lcd_Shift_Left:	
  1310                           
  1311                           	psect	text5
  1312  05D1                     __ptext5:	
  1313 ;; *************** function _Lcd_Set_Cursor *****************
  1314 ;; Defined at:
  1315 ;;		line 42 in file "lcd4.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  a               1    wreg     unsigned char 
  1318 ;;  b               1    4[COMMON] unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  a               1    7[COMMON] unsigned char 
  1321 ;;  temp            1   10[COMMON] unsigned char 
  1322 ;;  y               1    9[COMMON] unsigned char 
  1323 ;;  z               1    8[COMMON] unsigned char 
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  1    wreg      void 
  1326 ;; Registers used:
  1327 ;;		wreg, status,2, status,0, pclath, cstack
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1333 ;;      Params:         1       0       0       0       0
  1334 ;;      Locals:         4       0       0       0       0
  1335 ;;      Temps:          2       0       0       0       0
  1336 ;;      Totals:         7       0       0       0       0
  1337 ;;Total ram usage:        7 bytes
  1338 ;; Hardware stack levels used:    1
  1339 ;; Hardware stack levels required when called:    2
  1340 ;; This function calls:
  1341 ;;		_Lcd_Cmd
  1342 ;; This function is called by:
  1343 ;;		_main
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           
  1348                           ;psect for function _Lcd_Set_Cursor
  1349  05D1                     _Lcd_Set_Cursor:	
  1350                           
  1351                           ;incstack = 0
  1352                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1353                           ;Lcd_Set_Cursor@a stored from wreg
  1354  05D1  00F7               	movwf	Lcd_Set_Cursor@a
  1355                           
  1356                           ;lcd4.c: 42: void Lcd_Set_Cursor(char a, char b);lcd4.c: 43: {;lcd4.c: 44:  char temp,z,
      +                          y;;lcd4.c: 45:  if(a == 1)
  1357  05D2  0377               	decf	Lcd_Set_Cursor@a,w
  1358  05D3  1D03               	btfss	3,2
  1359  05D4  2DF6               	goto	l967
  1360                           
  1361                           ;lcd4.c: 46:  {;lcd4.c: 47:    temp = 0x80 + b - 1;
  1362  05D5  0874               	movf	Lcd_Set_Cursor@b,w
  1363  05D6  3E7F               	addlw	127
  1364  05D7  00F5               	movwf	??_Lcd_Set_Cursor
  1365  05D8  0875               	movf	??_Lcd_Set_Cursor,w
  1366  05D9  00FA               	movwf	Lcd_Set_Cursor@temp
  1367                           
  1368                           ;lcd4.c: 48:   z = temp>>4;
  1369  05DA  087A               	movf	Lcd_Set_Cursor@temp,w
  1370  05DB  00F5               	movwf	??_Lcd_Set_Cursor
  1371  05DC  3004               	movlw	4
  1372  05DD                     u265:	
  1373  05DD  1003               	clrc
  1374  05DE  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1375  05DF  3EFF               	addlw	-1
  1376  05E0  1D03               	skipz
  1377  05E1  2DDD               	goto	u265
  1378  05E2  0875               	movf	??_Lcd_Set_Cursor,w
  1379  05E3  00F6               	movwf	??_Lcd_Set_Cursor+1
  1380  05E4  0876               	movf	??_Lcd_Set_Cursor+1,w
  1381  05E5  00F8               	movwf	Lcd_Set_Cursor@z
  1382                           
  1383                           ;lcd4.c: 49:   y = temp & 0x0F;
  1384  05E6  087A               	movf	Lcd_Set_Cursor@temp,w
  1385  05E7  390F               	andlw	15
  1386  05E8  00F5               	movwf	??_Lcd_Set_Cursor
  1387  05E9  0875               	movf	??_Lcd_Set_Cursor,w
  1388  05EA  00F9               	movwf	Lcd_Set_Cursor@y
  1389                           
  1390                           ;lcd4.c: 50:   Lcd_Cmd(z);
  1391  05EB  0878               	movf	Lcd_Set_Cursor@z,w
  1392  05EC  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1393                           
  1394                           ;lcd4.c: 51:   Lcd_Cmd(y);
  1395  05F1  0879               	movf	Lcd_Set_Cursor@y,w
  1396  05F2  120A  118A  2505   	fcall	_Lcd_Cmd
  1397                           
  1398                           ;lcd4.c: 52:  }
  1399  05F5  0008               	return
  1400  05F6                     l967:	
  1401  05F6  3002               	movlw	2
  1402  05F7  0677               	xorwf	Lcd_Set_Cursor@a,w
  1403  05F8  1D03               	btfss	3,2
  1404  05F9  0008               	return
  1405                           
  1406                           ;lcd4.c: 54:  {;lcd4.c: 55:   temp = 0xC0 + b - 1;
  1407  05FA  0874               	movf	Lcd_Set_Cursor@b,w
  1408  05FB  3EBF               	addlw	191
  1409  05FC  00F5               	movwf	??_Lcd_Set_Cursor
  1410  05FD  0875               	movf	??_Lcd_Set_Cursor,w
  1411  05FE  00FA               	movwf	Lcd_Set_Cursor@temp
  1412                           
  1413                           ;lcd4.c: 56:   z = temp>>4;
  1414  05FF  087A               	movf	Lcd_Set_Cursor@temp,w
  1415  0600  00F5               	movwf	??_Lcd_Set_Cursor
  1416  0601  3004               	movlw	4
  1417  0602                     u285:	
  1418  0602  1003               	clrc
  1419  0603  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1420  0604  3EFF               	addlw	-1
  1421  0605  1D03               	skipz
  1422  0606  2E02               	goto	u285
  1423  0607  0875               	movf	??_Lcd_Set_Cursor,w
  1424  0608  00F6               	movwf	??_Lcd_Set_Cursor+1
  1425  0609  0876               	movf	??_Lcd_Set_Cursor+1,w
  1426  060A  00F8               	movwf	Lcd_Set_Cursor@z
  1427                           
  1428                           ;lcd4.c: 57:   y = temp & 0x0F;
  1429  060B  087A               	movf	Lcd_Set_Cursor@temp,w
  1430  060C  390F               	andlw	15
  1431  060D  00F5               	movwf	??_Lcd_Set_Cursor
  1432  060E  0875               	movf	??_Lcd_Set_Cursor,w
  1433  060F  00F9               	movwf	Lcd_Set_Cursor@y
  1434                           
  1435                           ;lcd4.c: 58:   Lcd_Cmd(z);
  1436  0610  0878               	movf	Lcd_Set_Cursor@z,w
  1437  0611  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1438                           
  1439                           ;lcd4.c: 59:   Lcd_Cmd(y);
  1440  0616  0879               	movf	Lcd_Set_Cursor@y,w
  1441  0617  120A  118A  2505   	fcall	_Lcd_Cmd
  1442  061A  0008               	return
  1443  061B                     __end_of_Lcd_Set_Cursor:	
  1444                           
  1445                           	psect	text6
  1446  061B                     __ptext6:	
  1447 ;; *************** function _Lcd_Init *****************
  1448 ;; Defined at:
  1449 ;;		line 63 in file "lcd4.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, pclath, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1463 ;;      Params:         0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0
  1465 ;;      Temps:          2       0       0       0       0
  1466 ;;      Totals:         2       0       0       0       0
  1467 ;;Total ram usage:        2 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    2
  1470 ;; This function calls:
  1471 ;;		_Lcd_Cmd
  1472 ;;		_Lcd_Port
  1473 ;; This function is called by:
  1474 ;;		_main
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           
  1479                           ;psect for function _Lcd_Init
  1480  061B                     _Lcd_Init:	
  1481                           
  1482                           ;lcd4.c: 65:   Lcd_Port(0x00);
  1483                           
  1484                           ;incstack = 0
  1485                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1486  061B  3000               	movlw	0
  1487  061C  120A  118A  24EB  120A  118A  	fcall	_Lcd_Port
  1488                           
  1489                           ;lcd4.c: 66:    _delay((unsigned long)((20)*(20000000/4000.0)));
  1490  0621  3082               	movlw	130
  1491  0622  00F5               	movwf	??_Lcd_Init+1
  1492  0623  30DD               	movlw	221
  1493  0624  00F4               	movwf	??_Lcd_Init
  1494  0625                     u527:	
  1495  0625  0BF4               	decfsz	??_Lcd_Init,f
  1496  0626  2E25               	goto	u527
  1497  0627  0BF5               	decfsz	??_Lcd_Init+1,f
  1498  0628  2E25               	goto	u527
  1499  0629  2E2A               	nop2
  1500                           
  1501                           ;lcd4.c: 67:   Lcd_Cmd(0x03);
  1502  062A  3003               	movlw	3
  1503  062B  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1504                           
  1505                           ;lcd4.c: 68:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1506  0630  3021               	movlw	33
  1507  0631  00F5               	movwf	??_Lcd_Init+1
  1508  0632  3076               	movlw	118
  1509  0633  00F4               	movwf	??_Lcd_Init
  1510  0634                     u537:	
  1511  0634  0BF4               	decfsz	??_Lcd_Init,f
  1512  0635  2E34               	goto	u537
  1513  0636  0BF5               	decfsz	??_Lcd_Init+1,f
  1514  0637  2E34               	goto	u537
  1515  0638  0000               	nop
  1516                           
  1517                           ;lcd4.c: 69:   Lcd_Cmd(0x03);
  1518  0639  3003               	movlw	3
  1519  063A  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1520                           
  1521                           ;lcd4.c: 70:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1522  063F  3048               	movlw	72
  1523  0640  00F5               	movwf	??_Lcd_Init+1
  1524  0641  306C               	movlw	108
  1525  0642  00F4               	movwf	??_Lcd_Init
  1526  0643                     u547:	
  1527  0643  0BF4               	decfsz	??_Lcd_Init,f
  1528  0644  2E43               	goto	u547
  1529  0645  0BF5               	decfsz	??_Lcd_Init+1,f
  1530  0646  2E43               	goto	u547
  1531  0647  0000               	nop
  1532                           
  1533                           ;lcd4.c: 71:   Lcd_Cmd(0x03);
  1534  0648  3003               	movlw	3
  1535  0649  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1536                           
  1537                           ;lcd4.c: 73:   Lcd_Cmd(0x02);
  1538  064E  3002               	movlw	2
  1539  064F  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1540                           
  1541                           ;lcd4.c: 74:   Lcd_Cmd(0x02);
  1542  0654  3002               	movlw	2
  1543  0655  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1544                           
  1545                           ;lcd4.c: 75:   Lcd_Cmd(0x08);
  1546  065A  3008               	movlw	8
  1547  065B  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1548                           
  1549                           ;lcd4.c: 76:   Lcd_Cmd(0x00);
  1550  0660  3000               	movlw	0
  1551  0661  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1552                           
  1553                           ;lcd4.c: 77:   Lcd_Cmd(0x0C);
  1554  0666  300C               	movlw	12
  1555  0667  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1556                           
  1557                           ;lcd4.c: 78:   Lcd_Cmd(0x00);
  1558  066C  3000               	movlw	0
  1559  066D  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1560                           
  1561                           ;lcd4.c: 79:   Lcd_Cmd(0x06);
  1562  0672  3006               	movlw	6
  1563  0673  120A  118A  2505   	fcall	_Lcd_Cmd
  1564  0676  0008               	return
  1565  0677                     __end_of_Lcd_Init:	
  1566                           
  1567                           	psect	text7
  1568  04B9                     __ptext7:	
  1569 ;; *************** function _Lcd_Clear *****************
  1570 ;; Defined at:
  1571 ;;		line 36 in file "lcd4.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0, pclath, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1585 ;;      Params:         0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0
  1588 ;;      Totals:         0       0       0       0       0
  1589 ;;Total ram usage:        0 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    2
  1592 ;; This function calls:
  1593 ;;		_Lcd_Cmd
  1594 ;; This function is called by:
  1595 ;;		_main
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           
  1600                           ;psect for function _Lcd_Clear
  1601  04B9                     _Lcd_Clear:	
  1602                           
  1603                           ;lcd4.c: 38:  Lcd_Cmd(0);
  1604                           
  1605                           ;incstack = 0
  1606                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1607  04B9  3000               	movlw	0
  1608  04BA  120A  118A  2505  120A  118A  	fcall	_Lcd_Cmd
  1609                           
  1610                           ;lcd4.c: 39:  Lcd_Cmd(1);
  1611  04BF  3001               	movlw	1
  1612  04C0  120A  118A  2505   	fcall	_Lcd_Cmd
  1613  04C3  0008               	return
  1614  04C4                     __end_of_Lcd_Clear:	
  1615                           
  1616                           	psect	text8
  1617  0505                     __ptext8:	
  1618 ;; *************** function _Lcd_Cmd *****************
  1619 ;; Defined at:
  1620 ;;		line 27 in file "lcd4.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;  a               1    wreg     unsigned char 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  a               1    3[COMMON] unsigned char 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0, pclath, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1634 ;;      Params:         0       0       0       0       0
  1635 ;;      Locals:         1       0       0       0       0
  1636 ;;      Temps:          2       0       0       0       0
  1637 ;;      Totals:         3       0       0       0       0
  1638 ;;Total ram usage:        3 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    1
  1641 ;; This function calls:
  1642 ;;		_Lcd_Port
  1643 ;; This function is called by:
  1644 ;;		_Lcd_Clear
  1645 ;;		_Lcd_Set_Cursor
  1646 ;;		_Lcd_Init
  1647 ;;		_Lcd_Shift_Right
  1648 ;;		_Lcd_Shift_Left
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           
  1653                           ;psect for function _Lcd_Cmd
  1654  0505                     _Lcd_Cmd:	
  1655                           
  1656                           ;incstack = 0
  1657                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1658                           ;Lcd_Cmd@a stored from wreg
  1659  0505  00F3               	movwf	Lcd_Cmd@a
  1660                           
  1661                           ;lcd4.c: 27: void Lcd_Cmd(char a);lcd4.c: 28: {;lcd4.c: 29:  RD0 = 0;
  1662  0506  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0507  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0508  1008               	bcf	8,0	;volatile
  1665                           
  1666                           ;lcd4.c: 30:  Lcd_Port(a);
  1667  0509  0873               	movf	Lcd_Cmd@a,w
  1668  050A  120A  118A  24EB  120A  118A  	fcall	_Lcd_Port
  1669                           
  1670                           ;lcd4.c: 31:  RD1 = 1;
  1671  050F  1283               	bcf	3,5	;RP0=0, select bank0
  1672  0510  1303               	bcf	3,6	;RP1=0, select bank0
  1673  0511  1488               	bsf	8,1	;volatile
  1674                           
  1675                           ;lcd4.c: 32:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1676  0512  301A               	movlw	26
  1677  0513  00F2               	movwf	??_Lcd_Cmd+1
  1678  0514  30F8               	movlw	248
  1679  0515  00F1               	movwf	??_Lcd_Cmd
  1680  0516                     u557:	
  1681  0516  0BF1               	decfsz	??_Lcd_Cmd,f
  1682  0517  2D16               	goto	u557
  1683  0518  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1684  0519  2D16               	goto	u557
  1685  051A  0000               	nop
  1686                           
  1687                           ;lcd4.c: 33:         RD1 = 0;
  1688  051B  1283               	bcf	3,5	;RP0=0, select bank0
  1689  051C  1303               	bcf	3,6	;RP1=0, select bank0
  1690  051D  1088               	bcf	8,1	;volatile
  1691  051E  0008               	return
  1692  051F                     __end_of_Lcd_Cmd:	
  1693                           
  1694                           	psect	text9
  1695  04EB                     __ptext9:	
  1696 ;; *************** function _Lcd_Port *****************
  1697 ;; Defined at:
  1698 ;;		line 5 in file "lcd4.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  a               1    wreg     unsigned char 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  a               1    0[COMMON] unsigned char 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1712 ;;      Params:         0       0       0       0       0
  1713 ;;      Locals:         1       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0
  1715 ;;      Totals:         1       0       0       0       0
  1716 ;;Total ram usage:        1 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_Lcd_Cmd
  1722 ;;		_Lcd_Init
  1723 ;;		_Lcd_Write_Char
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           
  1728                           ;psect for function _Lcd_Port
  1729  04EB                     _Lcd_Port:	
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in _Lcd_Port: [wreg]
  1733                           ;Lcd_Port@a stored from wreg
  1734  04EB  00F0               	movwf	Lcd_Port@a
  1735                           
  1736                           ;lcd4.c: 5: void Lcd_Port(char a);lcd4.c: 6: {;lcd4.c: 7:  if(a & 1)
  1737  04EC  1C70               	btfss	Lcd_Port@a,0
  1738  04ED  2CF2               	goto	l67
  1739                           
  1740                           ;lcd4.c: 8:   RD2 = 1;
  1741  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  1742  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  1743  04F0  1508               	bsf	8,2	;volatile
  1744  04F1  2CF5               	goto	l68
  1745  04F2                     l67:	
  1746                           ;lcd4.c: 9:  else
  1747                           
  1748                           
  1749                           ;lcd4.c: 10:   RD2 = 0;
  1750  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  1751  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  1752  04F4  1108               	bcf	8,2	;volatile
  1753  04F5                     l68:	
  1754                           
  1755                           ;lcd4.c: 12:  if(a & 2)
  1756  04F5  1CF0               	btfss	Lcd_Port@a,1
  1757  04F6  2CF9               	goto	l69
  1758                           
  1759                           ;lcd4.c: 13:   RD3 = 1;
  1760  04F7  1588               	bsf	8,3	;volatile
  1761  04F8  2CFA               	goto	l70
  1762  04F9                     l69:	
  1763                           ;lcd4.c: 14:  else
  1764                           
  1765                           
  1766                           ;lcd4.c: 15:   RD3 = 0;
  1767  04F9  1188               	bcf	8,3	;volatile
  1768  04FA                     l70:	
  1769                           
  1770                           ;lcd4.c: 17:  if(a & 4)
  1771  04FA  1D70               	btfss	Lcd_Port@a,2
  1772  04FB  2CFE               	goto	l71
  1773                           
  1774                           ;lcd4.c: 18:   RD4 = 1;
  1775  04FC  1608               	bsf	8,4	;volatile
  1776  04FD  2CFF               	goto	l72
  1777  04FE                     l71:	
  1778                           ;lcd4.c: 19:  else
  1779                           
  1780                           
  1781                           ;lcd4.c: 20:   RD4 = 0;
  1782  04FE  1208               	bcf	8,4	;volatile
  1783  04FF                     l72:	
  1784                           
  1785                           ;lcd4.c: 22:  if(a & 8)
  1786  04FF  1DF0               	btfss	Lcd_Port@a,3
  1787  0500  2D03               	goto	l73
  1788                           
  1789                           ;lcd4.c: 23:   RD5 = 1;
  1790  0501  1688               	bsf	8,5	;volatile
  1791  0502  0008               	return
  1792  0503                     l73:	
  1793                           ;lcd4.c: 24:  else
  1794                           
  1795                           
  1796                           ;lcd4.c: 25:   RD5 = 0;
  1797  0503  1288               	bcf	8,5	;volatile
  1798  0504  0008               	return
  1799  0505                     __end_of_Lcd_Port:	
  1800  007E                     btemp	set	126	;btemp
  1801  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    0
    Data        60
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      3      63
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> mang_4(BANK0[16]), STR_1(CODE[13]), mang_2(BANK0[12]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2350
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     496
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     760
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4C      12        0.0%
ABS                  0      0      4C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 07 23:20:49 2019

                        pc 0002                __CFG_CP$OFF 0000                         l70 04FA  
                       l71 04FE                         l72 04FF                         l73 0503  
                       l67 04F2                         l68 04F5                         l69 04F9  
                       fsr 0004                        l967 05F6                        l983 0596  
                      l995 067F                        _RD0 0040                        _RD1 0041  
                      _RD2 0042                        _RD3 0043                        _RD4 0044  
                      _RD5 0045                        u245 0530                        u407 06CF  
                      u265 05DD                        u417 06E3               __CFG_CPD$OFF 0000  
                      u507 0540                        u427 0708                        u285 0602  
                      u517 0551                        u437 072A                        u527 0625  
                      u447 0742                        u537 0634                        u457 076B  
                      u547 0643                        u467 0780                        u557 0516  
                      u477 079E                        u397 069E                        u487 07BC  
                      u497 07DA                        fsr0 0004                        indf 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       l1001 068C  
                     l1013 06B2                       l1041 0718                       l1107 07CD  
                     l1065 0773                       l1093 07AF                       l1079 0791  
                     STR_1 0013               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0075  
                     _main 0677                       btemp 007E                       start 0000  
       ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 051F                      ?_main 0070  
            __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 004A                      _TRISD 0088  
  __size_of_Lcd_Shift_Left 000B                      main@i 007C             __CFG_BOREN$OFF 0000  
                    pclath 000A                      status 0003                      wtemp0 007E  
         __end_of_Lcd_Init 0677           __end_of_Lcd_Port 0505            __initialization 07F0  
             __end_of_main 07F0                     ??_main 005C         __size_of_Lcd_Clear 000B  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000  
 __size_of_Lcd_Shift_Right 000B                     _mang_1 0036                     _mang_2 0050  
                   _mang_3 0020                     _mang_4 0040                     _mang_5 002C  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC          __end_of_Lcd_Clear 04C4  
           __pcstackCOMMON 0070               __pidataBANK0 0558             _Lcd_Set_Cursor 05D1  
           _Lcd_Shift_Left 04C4                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
               __pmaintext 0677  __size_of_Lcd_Write_String 003D     __end_of_Lcd_Set_Cursor 061B  
   __end_of_Lcd_Shift_Left 04CF          ??_Lcd_Shift_Right 0074                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 051F  
                  _Lcd_Cmd 0505            ?_Lcd_Set_Cursor 0074                    __ptext1 0594  
                  __ptext2 051F                    __ptext3 04CF                    __ptext4 04C4  
                  __ptext5 05D1                    __ptext6 061B                    __ptext7 04B9  
                  __ptext8 0505                    __ptext9 04EB            ?_Lcd_Shift_Left 0070  
   __end_of_Lcd_Write_Char 0558       end_of_initialization 07FC                  Lcd_Port@a 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075          Lcd_Write_String@i 007A  
                _Lcd_Clear 04B9           _Lcd_Write_String 0594        start_initialization 07F0  
        __size_of_Lcd_Init 005C          __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070  
          _Lcd_Shift_Right 04CF                 init_fetch0 04DA                __pdataBANK0 0020  
          Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073                  ___latbits 0002  
            __pcstackBANK0 005C                   ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075  
         ??_Lcd_Shift_Left 0074                  __pstrings 0003    __end_of_Lcd_Shift_Right 04DA  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074                __stringbase 0012  
         ??_Lcd_Write_Char 0071                   _Lcd_Init 061B                   _Lcd_Port 04EB  
 __end_of_Lcd_Write_String 05D1           __size_of_Lcd_Cmd 001A         __end_of__stringtab 0013  
            __size_of_main 0179           ?_Lcd_Shift_Right 0070                   init_ram0 04DE  
       Lcd_Write_Char@temp 0072                  stringcode 000D         Lcd_Set_Cursor@temp 007A  
                 stringdir 000D                   stringtab 0003  
