

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat May 18 21:17:20 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.05
    23                           ; Generated 20/12/2018 GMT
    24                           ; 
    25                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001D                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  0088                     	;# 
   156  0089                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  001E                     _ADRESH	set	30
   237  001F                     _ADCON0	set	31
   238  0041                     _RD1	set	65
   239  0040                     _RD0	set	64
   240  0045                     _RD5	set	69
   241  0044                     _RD4	set	68
   242  0043                     _RD3	set	67
   243  0042                     _RD2	set	66
   244  00FA                     _GO_nDONE	set	250
   245  0066                     _ADIF	set	102
   246  00F8                     _ADON	set	248
   247  00FF                     _ADCS1	set	255
   248  00FE                     _ADCS0	set	254
   249  009E                     _ADRESL	set	158
   250  0085                     _TRISA	set	133
   251  0088                     _TRISD	set	136
   252  0466                     _ADIE	set	1126
   253  04FF                     _ADFM	set	1279
   254  04FE                     _ADCS2	set	1278
   255  04FB                     _PCFG3	set	1275
   256  04FA                     _PCFG2	set	1274
   257  04F9                     _PCFG1	set	1273
   258  04F8                     _PCFG0	set	1272
   259                           
   260                           	psect	strings
   261  0003                     __pstrings:	
   262  0003                     stringtab:	
   263  0003                     __stringtab:	
   264  0003                     stringcode:	
   265                           ;	String table - string pointers are 1 byte each
   266                           
   267  0003                     stringdir:	
   268  0003  3000               	movlw	high stringdir
   269  0004  008A               	movwf	10
   270  0005  0804               	movf	4,w
   271  0006  0A84               	incf	4,f
   272  0007  0782               	addwf	2,f
   273  0008                     __stringbase:	
   274  0008  3400               	retlw	0
   275  0009                     __end_of__stringtab:	
   276  0009                     STR_1:	
   277  0009  3478               	retlw	120	;'x'
   278  000A  345F               	retlw	95	;'_'
   279  000B  3476               	retlw	118	;'v'
   280  000C  3461               	retlw	97	;'a'
   281  000D  346C               	retlw	108	;'l'
   282  000E  3475               	retlw	117	;'u'
   283  000F  3465               	retlw	101	;'e'
   284  0010  3420               	retlw	32	;' '
   285  0011  343D               	retlw	61	;'='
   286  0012  3420               	retlw	32	;' '
   287  0013  3400               	retlw	0
   288  0014                     STR_2:	
   289  0014  3479               	retlw	121	;'y'
   290  0015  345F               	retlw	95	;'_'
   291  0016  3476               	retlw	118	;'v'
   292  0017  3461               	retlw	97	;'a'
   293  0018  346C               	retlw	108	;'l'
   294  0019  3475               	retlw	117	;'u'
   295  001A  3465               	retlw	101	;'e'
   296  001B  3420               	retlw	32	;' '
   297  001C  343D               	retlw	61	;'='
   298  001D  3420               	retlw	32	;' '
   299  001E  3400               	retlw	0
   300                           
   301                           ; #config settings
   302  0000                     
   303                           	psect	cinit
   304  07FC                     start_initialization:	
   305  07FC                     __initialization:	
   306  07FC                     end_of_initialization:	
   307                           ;End of C runtime variable initialization code
   308                           
   309  07FC                     __end_of__initialization:	
   310  07FC  0183               	clrf	3
   311  07FD  120A  118A  2E4D   	ljmp	_main	;jump to C main() function
   312                           
   313                           	psect	cstackCOMMON
   314  0070                     __pcstackCOMMON:	
   315  0070                     ?_Lcd_Init:	
   316  0070                     ?_ADC_Init:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ??_ADC_Init:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_Lcd_Write_String:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_Lcd_Write_Char:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_main:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_Lcd_Port:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ??_Lcd_Port:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_Lcd_Cmd:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_Read_ADC:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?___lwmod:	
   344                           ; 2 bytes @ 0x0
   345                           
   346  0070                     Lcd_Port@a:	
   347                           ; 2 bytes @ 0x0
   348                           
   349  0070                     ___lwmod@divisor:	
   350                           ; 1 bytes @ 0x0
   351                           
   352                           
   353                           ; 2 bytes @ 0x0
   354  0070                     	ds	1
   355  0071                     ??_Lcd_Write_Char:	
   356  0071                     ??_Lcd_Cmd:	
   357                           ; 1 bytes @ 0x1
   358                           
   359                           
   360                           ; 1 bytes @ 0x1
   361  0071                     	ds	1
   362  0072                     ??_Read_ADC:	
   363  0072                     Lcd_Write_Char@temp:	
   364                           ; 1 bytes @ 0x2
   365                           
   366  0072                     ___lwmod@dividend:	
   367                           ; 1 bytes @ 0x2
   368                           
   369                           
   370                           ; 2 bytes @ 0x2
   371  0072                     	ds	1
   372  0073                     Lcd_Cmd@a:	
   373  0073                     Lcd_Write_Char@y:	
   374                           ; 1 bytes @ 0x3
   375                           
   376                           
   377                           ; 1 bytes @ 0x3
   378  0073                     	ds	1
   379  0074                     ??_Lcd_Init:	
   380  0074                     ?_Lcd_Set_Cursor:	
   381                           ; 1 bytes @ 0x4
   382                           
   383  0074                     ??___lwmod:	
   384                           ; 1 bytes @ 0x4
   385                           
   386  0074                     Lcd_Set_Cursor@b:	
   387                           ; 1 bytes @ 0x4
   388                           
   389  0074                     Lcd_Write_Char@a:	
   390                           ; 1 bytes @ 0x4
   391                           
   392                           
   393                           ; 1 bytes @ 0x4
   394  0074                     	ds	1
   395  0075                     ??_Lcd_Write_String:	
   396  0075                     ??_Lcd_Set_Cursor:	
   397                           ; 1 bytes @ 0x5
   398                           
   399  0075                     ___lwmod@counter:	
   400                           ; 1 bytes @ 0x5
   401                           
   402  0075                     Lcd_Write_String@i:	
   403                           ; 1 bytes @ 0x5
   404                           
   405                           
   406                           ; 2 bytes @ 0x5
   407  0075                     	ds	1
   408  0076                     ?___lwdiv:	
   409  0076                     Read_ADC@N:	
   410                           ; 2 bytes @ 0x6
   411                           
   412  0076                     ___lwdiv@divisor:	
   413                           ; 2 bytes @ 0x6
   414                           
   415                           
   416                           ; 2 bytes @ 0x6
   417  0076                     	ds	1
   418  0077                     Lcd_Set_Cursor@a:	
   419  0077                     Lcd_Write_String@a:	
   420                           ; 1 bytes @ 0x7
   421                           
   422                           
   423                           ; 1 bytes @ 0x7
   424  0077                     	ds	1
   425  0078                     Read_ADC@channel:	
   426  0078                     Lcd_Set_Cursor@z:	
   427                           ; 1 bytes @ 0x8
   428                           
   429  0078                     ___lwdiv@dividend:	
   430                           ; 1 bytes @ 0x8
   431                           
   432                           
   433                           ; 2 bytes @ 0x8
   434  0078                     	ds	1
   435  0079                     Lcd_Set_Cursor@y:	
   436                           
   437                           ; 1 bytes @ 0x9
   438  0079                     	ds	1
   439  007A                     ??___lwdiv:	
   440  007A                     Lcd_Set_Cursor@temp:	
   441                           ; 1 bytes @ 0xA
   442                           
   443                           
   444                           ; 1 bytes @ 0xA
   445  007A                     	ds	1
   446  007B                     ___lwdiv@quotient:	
   447                           
   448                           ; 2 bytes @ 0xB
   449  007B                     	ds	2
   450  007D                     ___lwdiv@counter:	
   451                           
   452                           ; 1 bytes @ 0xD
   453  007D                     	ds	1
   454                           
   455                           	psect	cstackBANK0
   456  0020                     __pcstackBANK0:	
   457  0020                     ?_Lcd_Display:	
   458  0020                     Lcd_Display@x_value:	
   459                           ; 1 bytes @ 0x0
   460                           
   461                           
   462                           ; 2 bytes @ 0x0
   463  0020                     	ds	2
   464  0022                     Lcd_Display@y_value:	
   465                           
   466                           ; 2 bytes @ 0x2
   467  0022                     	ds	2
   468  0024                     ??_Lcd_Display:	
   469                           
   470                           ; 1 bytes @ 0x4
   471  0024                     	ds	1
   472  0025                     ??_main:	
   473                           
   474                           ; 1 bytes @ 0x5
   475  0025                     	ds	1
   476  0026                     main@x_value:	
   477                           
   478                           ; 2 bytes @ 0x6
   479  0026                     	ds	2
   480  0028                     main@y_value:	
   481                           
   482                           ; 2 bytes @ 0x8
   483  0028                     	ds	2
   484  002A                     main@a:	
   485                           
   486                           ; 2 bytes @ 0xA
   487  002A                     	ds	2
   488                           
   489                           	psect	maintext
   490  064D                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 15 in file "Joystick.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  a               2   10[BANK0 ] unsigned int 
   501 ;;  y_value         2    8[BANK0 ] unsigned int 
   502 ;;  x_value         2    6[BANK0 ] unsigned int 
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : B00/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   512 ;;      Params:         0       0       0       0       0
   513 ;;      Locals:         0       6       0       0       0
   514 ;;      Temps:          0       1       0       0       0
   515 ;;      Totals:         0       7       0       0       0
   516 ;;Total ram usage:        7 bytes
   517 ;; Hardware stack levels required when called:    4
   518 ;; This function calls:
   519 ;;		_ADC_Init
   520 ;;		_Lcd_Display
   521 ;;		_Lcd_Init
   522 ;;		_Lcd_Set_Cursor
   523 ;;		_Lcd_Write_String
   524 ;;		_Read_ADC
   525 ;; This function is called by:
   526 ;;		Startup code after reset
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           
   531                           ;psect for function _main
   532  064D                     _main:	
   533                           
   534                           ;Joystick.c: 18:     unsigned int a;;Joystick.c: 19:     unsigned int x_value, y_value;;
      +                          Joystick.c: 21:     TRISD = 0x00;
   535                           
   536                           ;incstack = 0
   537                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   538  064D  1683               	bsf	3,5	;RP0=1, select bank1
   539  064E  1303               	bcf	3,6	;RP1=0, select bank1
   540  064F  0188               	clrf	8	;volatile
   541                           
   542                           ;Joystick.c: 22:     TRISA = 0xFF;
   543  0650  30FF               	movlw	255
   544  0651  0085               	movwf	5	;volatile
   545                           
   546                           ;Joystick.c: 24:     Lcd_Init();
   547  0652  120A  118A  26A5  120A  118A  	fcall	_Lcd_Init
   548                           
   549                           ;Joystick.c: 25:     ADC_Init();
   550  0657  120A  118A  24B3  120A  118A  	fcall	_ADC_Init
   551                           
   552                           ;Joystick.c: 27:     Lcd_Write_String("x_value = ");
   553  065C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   554  065D  120A  118A  24FF  120A  118A  	fcall	_Lcd_Write_String
   555                           
   556                           ;Joystick.c: 28:     Lcd_Set_Cursor(2,1);
   557  0662  01F4               	clrf	Lcd_Set_Cursor@b
   558  0663  0AF4               	incf	Lcd_Set_Cursor@b,f
   559  0664  3002               	movlw	2
   560  0665  120A  118A  2603  120A  118A  	fcall	_Lcd_Set_Cursor
   561                           
   562                           ;Joystick.c: 29:     Lcd_Write_String("y_value = ");
   563  066A  300C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   564  066B  120A  118A  24FF  120A  118A  	fcall	_Lcd_Write_String
   565  0670                     l1051:	
   566                           
   567                           ;Joystick.c: 31:     {;Joystick.c: 32:       a = Read_ADC(0);
   568  0670  3000               	movlw	0
   569  0671  120A  118A  258C  120A  118A  	fcall	_Read_ADC
   570  0676  0871               	movf	?_Read_ADC+1,w
   571  0677  1283               	bcf	3,5	;RP0=0, select bank0
   572  0678  1303               	bcf	3,6	;RP1=0, select bank0
   573  0679  00AB               	movwf	main@a+1
   574  067A  0870               	movf	?_Read_ADC,w
   575  067B  00AA               	movwf	main@a
   576                           
   577                           ;Joystick.c: 33:       x_value = a;
   578  067C  082B               	movf	main@a+1,w
   579  067D  00A7               	movwf	main@x_value+1
   580  067E  082A               	movf	main@a,w
   581  067F  00A6               	movwf	main@x_value
   582                           
   583                           ;Joystick.c: 34:       _delay((unsigned long)((100)*(20000000/4000000.0)));
   584  0680  30A5               	movlw	165
   585  0681  1283               	bcf	3,5	;RP0=0, select bank0
   586  0682  1303               	bcf	3,6	;RP1=0, select bank0
   587  0683  00A5               	movwf	??_main
   588  0684                     u517:	
   589  0684  0BA5               	decfsz	??_main,f
   590  0685  2E84               	goto	u517
   591  0686  2E87               	nop2
   592                           
   593                           ;Joystick.c: 35:       a = Read_ADC(1);
   594  0687  3001               	movlw	1
   595  0688  120A  118A  258C  120A  118A  	fcall	_Read_ADC
   596  068D  0871               	movf	?_Read_ADC+1,w
   597  068E  1283               	bcf	3,5	;RP0=0, select bank0
   598  068F  1303               	bcf	3,6	;RP1=0, select bank0
   599  0690  00AB               	movwf	main@a+1
   600  0691  0870               	movf	?_Read_ADC,w
   601  0692  00AA               	movwf	main@a
   602                           
   603                           ;Joystick.c: 36:       y_value = a;
   604  0693  082B               	movf	main@a+1,w
   605  0694  00A9               	movwf	main@y_value+1
   606  0695  082A               	movf	main@a,w
   607  0696  00A8               	movwf	main@y_value
   608                           
   609                           ;Joystick.c: 37:       Lcd_Display(x_value, y_value);
   610  0697  0827               	movf	main@x_value+1,w
   611  0698  00A1               	movwf	Lcd_Display@x_value+1
   612  0699  0826               	movf	main@x_value,w
   613  069A  00A0               	movwf	Lcd_Display@x_value
   614  069B  0829               	movf	main@y_value+1,w
   615  069C  00A3               	movwf	Lcd_Display@y_value+1
   616  069D  0828               	movf	main@y_value,w
   617  069E  00A2               	movwf	Lcd_Display@y_value
   618  069F  120A  118A  2701  120A  118A  	fcall	_Lcd_Display
   619  06A4  2E70               	goto	l1051
   620  06A5                     __end_of_main:	
   621                           
   622                           	psect	text1
   623  058C                     __ptext1:	
   624 ;; *************** function _Read_ADC *****************
   625 ;; Defined at:
   626 ;;		line 60 in file "Joystick.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  channel         1    wreg     unsigned char 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  channel         1    8[COMMON] unsigned char 
   631 ;;  N               2    6[COMMON] unsigned int 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  2    0[COMMON] unsigned int 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   641 ;;      Params:         2       0       0       0       0
   642 ;;      Locals:         3       0       0       0       0
   643 ;;      Temps:          4       0       0       0       0
   644 ;;      Totals:         9       0       0       0       0
   645 ;;Total ram usage:        9 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; This function calls:
   648 ;;		Nothing
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           
   655                           ;psect for function _Read_ADC
   656  058C                     _Read_ADC:	
   657                           
   658                           ;incstack = 0
   659                           ; Regs used in _Read_ADC: [wreg+status,2+status,0]
   660                           ;Read_ADC@channel stored from wreg
   661  058C  00F8               	movwf	Read_ADC@channel
   662                           
   663                           ;Joystick.c: 60: unsigned int Read_ADC(unsigned char channel);Joystick.c: 61: {;Joystick
      +                          .c: 62:     unsigned int N;;Joystick.c: 63:     ADCON0 &= 0x11000101;
   664  058D  3001               	movlw	1
   665  058E  00F2               	movwf	??_Read_ADC
   666  058F  0872               	movf	??_Read_ADC,w
   667  0590  1283               	bcf	3,5	;RP0=0, select bank0
   668  0591  1303               	bcf	3,6	;RP1=0, select bank0
   669  0592  059F               	andwf	31,f	;volatile
   670                           
   671                           ;Joystick.c: 64:     ADCON0 |= channel << 3;
   672  0593  0878               	movf	Read_ADC@channel,w	;volatile
   673  0594  00F2               	movwf	??_Read_ADC
   674  0595  3002               	movlw	2
   675  0596                     u495:	
   676  0596  1003               	clrc
   677  0597  0DF2               	rlf	??_Read_ADC,f
   678  0598  3EFF               	addlw	-1
   679  0599  1D03               	skipz
   680  059A  2D96               	goto	u495
   681  059B  1003               	clrc
   682  059C  0D72               	rlf	??_Read_ADC,w
   683  059D  00F3               	movwf	??_Read_ADC+1
   684  059E  0873               	movf	??_Read_ADC+1,w
   685  059F  049F               	iorwf	31,f	;volatile
   686                           
   687                           ;Joystick.c: 65:     _delay((unsigned long)((2)*(20000000/4000.0)));
   688  05A0  300D               	movlw	13
   689  05A1  00F3               	movwf	??_Read_ADC+1
   690  05A2  30FB               	movlw	251
   691  05A3  00F2               	movwf	??_Read_ADC
   692  05A4                     u527:	
   693  05A4  0BF2               	decfsz	??_Read_ADC,f
   694  05A5  2DA4               	goto	u527
   695  05A6  0BF3               	decfsz	??_Read_ADC+1,f
   696  05A7  2DA4               	goto	u527
   697  05A8  2DA9               	nop2
   698                           
   699                           ;Joystick.c: 66:     GO_nDONE = 1;
   700  05A9  1283               	bcf	3,5	;RP0=0, select bank0
   701  05AA  1303               	bcf	3,6	;RP1=0, select bank0
   702  05AB  151F               	bsf	31,2	;volatile
   703  05AC                     l64:	
   704                           ;Joystick.c: 67:     while(GO_nDONE);
   705                           
   706  05AC  191F               	btfsc	31,2	;volatile
   707  05AD  2DAC               	goto	l64
   708                           
   709                           ;Joystick.c: 68:     N = ADRESH;
   710  05AE  081E               	movf	30,w	;volatile
   711  05AF  00F2               	movwf	??_Read_ADC
   712  05B0  01F3               	clrf	??_Read_ADC+1
   713  05B1  0872               	movf	??_Read_ADC,w
   714  05B2  00F6               	movwf	Read_ADC@N
   715  05B3  0873               	movf	??_Read_ADC+1,w
   716  05B4  00F7               	movwf	Read_ADC@N+1
   717                           
   718                           ;Joystick.c: 69:     return ((N<<8)+ADRESL);
   719  05B5  0876               	movf	Read_ADC@N,w
   720  05B6  00F3               	movwf	??_Read_ADC+1
   721  05B7  01F2               	clrf	??_Read_ADC
   722  05B8  1683               	bsf	3,5	;RP0=1, select bank1
   723  05B9  1303               	bcf	3,6	;RP1=0, select bank1
   724  05BA  081E               	movf	30,w	;volatile
   725  05BB  0772               	addwf	??_Read_ADC,w
   726  05BC  00F4               	movwf	??_Read_ADC+2
   727  05BD  3000               	movlw	0
   728  05BE  1803               	skipnc
   729  05BF  3001               	movlw	1
   730  05C0  0773               	addwf	??_Read_ADC+1,w
   731  05C1  00F5               	movwf	??_Read_ADC+3
   732  05C2  0874               	movf	??_Read_ADC+2,w
   733  05C3  00F0               	movwf	?_Read_ADC
   734  05C4  0875               	movf	??_Read_ADC+3,w
   735  05C5  00F1               	movwf	?_Read_ADC+1
   736  05C6  0008               	return
   737  05C7                     __end_of_Read_ADC:	
   738                           
   739                           	psect	text2
   740  04FF                     __ptext2:	
   741 ;; *************** function _Lcd_Write_String *****************
   742 ;; Defined at:
   743 ;;		line 98 in file "lcd4.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  a               1    wreg     PTR unsigned char 
   746 ;;		 -> STR_2(11), STR_1(11), 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  a               1    7[COMMON] PTR unsigned char 
   749 ;;		 -> STR_2(11), STR_1(11), 
   750 ;;  i               2    5[COMMON] int 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         0       0       0       0       0
   761 ;;      Locals:         3       0       0       0       0
   762 ;;      Temps:          0       0       0       0       0
   763 ;;      Totals:         3       0       0       0       0
   764 ;;Total ram usage:        3 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    2
   767 ;; This function calls:
   768 ;;		_Lcd_Write_Char
   769 ;; This function is called by:
   770 ;;		_main
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           
   775                           ;psect for function _Lcd_Write_String
   776  04FF                     _Lcd_Write_String:	
   777                           
   778                           ;incstack = 0
   779                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   780                           ;Lcd_Write_String@a stored from wreg
   781  04FF  00F7               	movwf	Lcd_Write_String@a
   782                           
   783                           ;lcd4.c: 98: void Lcd_Write_String(char *a);lcd4.c: 99: {;lcd4.c: 100:  int i;;lcd4.c: 1
      +                          01:  for(i=0;a[i]!='\0';i++)
   784  0500  01F5               	clrf	Lcd_Write_String@i
   785  0501  01F6               	clrf	Lcd_Write_String@i+1
   786  0502                     l1019:	
   787  0502  0875               	movf	Lcd_Write_String@i,w
   788  0503  0777               	addwf	Lcd_Write_String@a,w
   789  0504  0084               	movwf	4
   790  0505  120A  118A  2003  120A  118A  	fcall	stringdir
   791  050A  3A00               	xorlw	0
   792  050B  1903               	btfsc	3,2
   793  050C  0008               	return
   794                           
   795                           ;lcd4.c: 102:     Lcd_Write_Char(a[i]);
   796  050D  0875               	movf	Lcd_Write_String@i,w
   797  050E  0777               	addwf	Lcd_Write_String@a,w
   798  050F  0084               	movwf	4
   799  0510  120A  118A  2003  120A  118A  	fcall	stringdir
   800  0515  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
   801  051A  3001               	movlw	1
   802  051B  07F5               	addwf	Lcd_Write_String@i,f
   803  051C  1803               	skipnc
   804  051D  0AF6               	incf	Lcd_Write_String@i+1,f
   805  051E  3000               	movlw	0
   806  051F  07F6               	addwf	Lcd_Write_String@i+1,f
   807  0520  2D02               	goto	l1019
   808  0521                     __end_of_Lcd_Write_String:	
   809                           
   810                           	psect	text3
   811  06A5                     __ptext3:	
   812 ;; *************** function _Lcd_Init *****************
   813 ;; Defined at:
   814 ;;		line 63 in file "lcd4.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   828 ;;      Params:         0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0
   830 ;;      Temps:          2       0       0       0       0
   831 ;;      Totals:         2       0       0       0       0
   832 ;;Total ram usage:        2 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		_Lcd_Cmd
   837 ;;		_Lcd_Port
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _Lcd_Init
   845  06A5                     _Lcd_Init:	
   846                           
   847                           ;lcd4.c: 65:   Lcd_Port(0x00);
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   851  06A5  3000               	movlw	0
   852  06A6  120A  118A  24CB  120A  118A  	fcall	_Lcd_Port
   853                           
   854                           ;lcd4.c: 66:    _delay((unsigned long)((20)*(20000000/4000.0)));
   855  06AB  3082               	movlw	130
   856  06AC  00F5               	movwf	??_Lcd_Init+1
   857  06AD  30DD               	movlw	221
   858  06AE  00F4               	movwf	??_Lcd_Init
   859  06AF                     u537:	
   860  06AF  0BF4               	decfsz	??_Lcd_Init,f
   861  06B0  2EAF               	goto	u537
   862  06B1  0BF5               	decfsz	??_Lcd_Init+1,f
   863  06B2  2EAF               	goto	u537
   864  06B3  2EB4               	nop2
   865                           
   866                           ;lcd4.c: 67:   Lcd_Cmd(0x03);
   867  06B4  3003               	movlw	3
   868  06B5  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   869                           
   870                           ;lcd4.c: 68:  _delay((unsigned long)((5)*(20000000/4000.0)));
   871  06BA  3021               	movlw	33
   872  06BB  00F5               	movwf	??_Lcd_Init+1
   873  06BC  3076               	movlw	118
   874  06BD  00F4               	movwf	??_Lcd_Init
   875  06BE                     u547:	
   876  06BE  0BF4               	decfsz	??_Lcd_Init,f
   877  06BF  2EBE               	goto	u547
   878  06C0  0BF5               	decfsz	??_Lcd_Init+1,f
   879  06C1  2EBE               	goto	u547
   880  06C2  0000               	nop
   881                           
   882                           ;lcd4.c: 69:   Lcd_Cmd(0x03);
   883  06C3  3003               	movlw	3
   884  06C4  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   885                           
   886                           ;lcd4.c: 70:  _delay((unsigned long)((11)*(20000000/4000.0)));
   887  06C9  3048               	movlw	72
   888  06CA  00F5               	movwf	??_Lcd_Init+1
   889  06CB  306C               	movlw	108
   890  06CC  00F4               	movwf	??_Lcd_Init
   891  06CD                     u557:	
   892  06CD  0BF4               	decfsz	??_Lcd_Init,f
   893  06CE  2ECD               	goto	u557
   894  06CF  0BF5               	decfsz	??_Lcd_Init+1,f
   895  06D0  2ECD               	goto	u557
   896  06D1  0000               	nop
   897                           
   898                           ;lcd4.c: 71:   Lcd_Cmd(0x03);
   899  06D2  3003               	movlw	3
   900  06D3  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   901                           
   902                           ;lcd4.c: 73:   Lcd_Cmd(0x02);
   903  06D8  3002               	movlw	2
   904  06D9  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   905                           
   906                           ;lcd4.c: 74:   Lcd_Cmd(0x02);
   907  06DE  3002               	movlw	2
   908  06DF  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   909                           
   910                           ;lcd4.c: 75:   Lcd_Cmd(0x08);
   911  06E4  3008               	movlw	8
   912  06E5  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   913                           
   914                           ;lcd4.c: 76:   Lcd_Cmd(0x00);
   915  06EA  3000               	movlw	0
   916  06EB  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   917                           
   918                           ;lcd4.c: 77:   Lcd_Cmd(0x0C);
   919  06F0  300C               	movlw	12
   920  06F1  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   921                           
   922                           ;lcd4.c: 78:   Lcd_Cmd(0x00);
   923  06F6  3000               	movlw	0
   924  06F7  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
   925                           
   926                           ;lcd4.c: 79:   Lcd_Cmd(0x06);
   927  06FC  3006               	movlw	6
   928  06FD  120A  118A  24E5   	fcall	_Lcd_Cmd
   929  0700  0008               	return
   930  0701                     __end_of_Lcd_Init:	
   931                           
   932                           	psect	text4
   933  0701                     __ptext4:	
   934 ;; *************** function _Lcd_Display *****************
   935 ;; Defined at:
   936 ;;		line 72 in file "Joystick.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  x_value         2    0[BANK0 ] unsigned int 
   939 ;;  y_value         2    2[BANK0 ] unsigned int 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0, pclath, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   951 ;;      Params:         0       4       0       0       0
   952 ;;      Locals:         0       0       0       0       0
   953 ;;      Temps:          0       1       0       0       0
   954 ;;      Totals:         0       5       0       0       0
   955 ;;Total ram usage:        5 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    3
   958 ;; This function calls:
   959 ;;		_Lcd_Set_Cursor
   960 ;;		_Lcd_Write_Char
   961 ;;		___lwdiv
   962 ;;		___lwmod
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           
   969                           ;psect for function _Lcd_Display
   970  0701                     _Lcd_Display:	
   971                           
   972                           ;Joystick.c: 72: void Lcd_Display(unsigned int x_value, unsigned int y_value);Joystick.c
      +                          : 73: {;Joystick.c: 74:     Lcd_Set_Cursor(1, 11);
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _Lcd_Display: [wreg+status,2+status,0+pclath+cstack]
   976  0701  300B               	movlw	11
   977  0702  1283               	bcf	3,5	;RP0=0, select bank0
   978  0703  1303               	bcf	3,6	;RP1=0, select bank0
   979  0704  00A4               	movwf	??_Lcd_Display
   980  0705  0824               	movf	??_Lcd_Display,w
   981  0706  00F4               	movwf	Lcd_Set_Cursor@b
   982  0707  3001               	movlw	1
   983  0708  120A  118A  2603  120A  118A  	fcall	_Lcd_Set_Cursor
   984                           
   985                           ;Joystick.c: 75:     Lcd_Write_Char(x_value/1000+48);
   986  070D  30E8               	movlw	232
   987  070E  00F6               	movwf	___lwdiv@divisor
   988  070F  3003               	movlw	3
   989  0710  00F7               	movwf	___lwdiv@divisor+1
   990  0711  1283               	bcf	3,5	;RP0=0, select bank0
   991  0712  1303               	bcf	3,6	;RP1=0, select bank0
   992  0713  0821               	movf	Lcd_Display@x_value+1,w
   993  0714  00F9               	movwf	___lwdiv@dividend+1
   994  0715  0820               	movf	Lcd_Display@x_value,w
   995  0716  00F8               	movwf	___lwdiv@dividend
   996  0717  120A  118A  25C7  120A  118A  	fcall	___lwdiv
   997  071C  0876               	movf	?___lwdiv,w
   998  071D  3E30               	addlw	48
   999  071E  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1000                           
  1001                           ;Joystick.c: 76:     Lcd_Write_Char(x_value%1000/100+48);
  1002  0723  3064               	movlw	100
  1003  0724  00F6               	movwf	___lwdiv@divisor
  1004  0725  3000               	movlw	0
  1005  0726  00F7               	movwf	___lwdiv@divisor+1
  1006  0727  1283               	bcf	3,5	;RP0=0, select bank0
  1007  0728  1303               	bcf	3,6	;RP1=0, select bank0
  1008  0729  0821               	movf	Lcd_Display@x_value+1,w
  1009  072A  00F3               	movwf	___lwmod@dividend+1
  1010  072B  0820               	movf	Lcd_Display@x_value,w
  1011  072C  00F2               	movwf	___lwmod@dividend
  1012  072D  30E8               	movlw	232
  1013  072E  00F0               	movwf	___lwmod@divisor
  1014  072F  3003               	movlw	3
  1015  0730  00F1               	movwf	___lwmod@divisor+1
  1016  0731  120A  118A  2521  120A  118A  	fcall	___lwmod
  1017  0736  0871               	movf	?___lwmod+1,w
  1018  0737  00F9               	movwf	___lwdiv@dividend+1
  1019  0738  0870               	movf	?___lwmod,w
  1020  0739  00F8               	movwf	___lwdiv@dividend
  1021  073A  120A  118A  25C7  120A  118A  	fcall	___lwdiv
  1022  073F  0876               	movf	?___lwdiv,w
  1023  0740  3E30               	addlw	48
  1024  0741  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1025                           
  1026                           ;Joystick.c: 77:     Lcd_Write_Char(x_value%100/10+48);
  1027  0746  300A               	movlw	10
  1028  0747  00F6               	movwf	___lwdiv@divisor
  1029  0748  3000               	movlw	0
  1030  0749  00F7               	movwf	___lwdiv@divisor+1
  1031  074A  1283               	bcf	3,5	;RP0=0, select bank0
  1032  074B  1303               	bcf	3,6	;RP1=0, select bank0
  1033  074C  0821               	movf	Lcd_Display@x_value+1,w
  1034  074D  00F3               	movwf	___lwmod@dividend+1
  1035  074E  0820               	movf	Lcd_Display@x_value,w
  1036  074F  00F2               	movwf	___lwmod@dividend
  1037  0750  3064               	movlw	100
  1038  0751  00F0               	movwf	___lwmod@divisor
  1039  0752  3000               	movlw	0
  1040  0753  00F1               	movwf	___lwmod@divisor+1
  1041  0754  120A  118A  2521  120A  118A  	fcall	___lwmod
  1042  0759  0871               	movf	?___lwmod+1,w
  1043  075A  00F9               	movwf	___lwdiv@dividend+1
  1044  075B  0870               	movf	?___lwmod,w
  1045  075C  00F8               	movwf	___lwdiv@dividend
  1046  075D  120A  118A  25C7  120A  118A  	fcall	___lwdiv
  1047  0762  0876               	movf	?___lwdiv,w
  1048  0763  3E30               	addlw	48
  1049  0764  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1050                           
  1051                           ;Joystick.c: 78:     Lcd_Write_Char(x_value%10+48);
  1052  0769  300A               	movlw	10
  1053  076A  00F0               	movwf	___lwmod@divisor
  1054  076B  3000               	movlw	0
  1055  076C  00F1               	movwf	___lwmod@divisor+1
  1056  076D  1283               	bcf	3,5	;RP0=0, select bank0
  1057  076E  1303               	bcf	3,6	;RP1=0, select bank0
  1058  076F  0821               	movf	Lcd_Display@x_value+1,w
  1059  0770  00F3               	movwf	___lwmod@dividend+1
  1060  0771  0820               	movf	Lcd_Display@x_value,w
  1061  0772  00F2               	movwf	___lwmod@dividend
  1062  0773  120A  118A  2521  120A  118A  	fcall	___lwmod
  1063  0778  0870               	movf	?___lwmod,w
  1064  0779  3E30               	addlw	48
  1065  077A  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1066                           
  1067                           ;Joystick.c: 80:     Lcd_Set_Cursor(2, 11);
  1068  077F  300B               	movlw	11
  1069  0780  1283               	bcf	3,5	;RP0=0, select bank0
  1070  0781  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0782  00A4               	movwf	??_Lcd_Display
  1072  0783  0824               	movf	??_Lcd_Display,w
  1073  0784  00F4               	movwf	Lcd_Set_Cursor@b
  1074  0785  3002               	movlw	2
  1075  0786  120A  118A  2603  120A  118A  	fcall	_Lcd_Set_Cursor
  1076                           
  1077                           ;Joystick.c: 81:     Lcd_Write_Char(y_value/1000+48);
  1078  078B  30E8               	movlw	232
  1079  078C  00F6               	movwf	___lwdiv@divisor
  1080  078D  3003               	movlw	3
  1081  078E  00F7               	movwf	___lwdiv@divisor+1
  1082  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1083  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1084  0791  0823               	movf	Lcd_Display@y_value+1,w
  1085  0792  00F9               	movwf	___lwdiv@dividend+1
  1086  0793  0822               	movf	Lcd_Display@y_value,w
  1087  0794  00F8               	movwf	___lwdiv@dividend
  1088  0795  120A  118A  25C7  120A  118A  	fcall	___lwdiv
  1089  079A  0876               	movf	?___lwdiv,w
  1090  079B  3E30               	addlw	48
  1091  079C  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1092                           
  1093                           ;Joystick.c: 82:     Lcd_Write_Char(y_value%1000/100+48);
  1094  07A1  3064               	movlw	100
  1095  07A2  00F6               	movwf	___lwdiv@divisor
  1096  07A3  3000               	movlw	0
  1097  07A4  00F7               	movwf	___lwdiv@divisor+1
  1098  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1099  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1100  07A7  0823               	movf	Lcd_Display@y_value+1,w
  1101  07A8  00F3               	movwf	___lwmod@dividend+1
  1102  07A9  0822               	movf	Lcd_Display@y_value,w
  1103  07AA  00F2               	movwf	___lwmod@dividend
  1104  07AB  30E8               	movlw	232
  1105  07AC  00F0               	movwf	___lwmod@divisor
  1106  07AD  3003               	movlw	3
  1107  07AE  00F1               	movwf	___lwmod@divisor+1
  1108  07AF  120A  118A  2521  120A  118A  	fcall	___lwmod
  1109  07B4  0871               	movf	?___lwmod+1,w
  1110  07B5  00F9               	movwf	___lwdiv@dividend+1
  1111  07B6  0870               	movf	?___lwmod,w
  1112  07B7  00F8               	movwf	___lwdiv@dividend
  1113  07B8  120A  118A  25C7  120A  118A  	fcall	___lwdiv
  1114  07BD  0876               	movf	?___lwdiv,w
  1115  07BE  3E30               	addlw	48
  1116  07BF  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1117                           
  1118                           ;Joystick.c: 83:     Lcd_Write_Char(y_value%100/10+48);
  1119  07C4  300A               	movlw	10
  1120  07C5  00F6               	movwf	___lwdiv@divisor
  1121  07C6  3000               	movlw	0
  1122  07C7  00F7               	movwf	___lwdiv@divisor+1
  1123  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1124  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  1125  07CA  0823               	movf	Lcd_Display@y_value+1,w
  1126  07CB  00F3               	movwf	___lwmod@dividend+1
  1127  07CC  0822               	movf	Lcd_Display@y_value,w
  1128  07CD  00F2               	movwf	___lwmod@dividend
  1129  07CE  3064               	movlw	100
  1130  07CF  00F0               	movwf	___lwmod@divisor
  1131  07D0  3000               	movlw	0
  1132  07D1  00F1               	movwf	___lwmod@divisor+1
  1133  07D2  120A  118A  2521  120A  118A  	fcall	___lwmod
  1134  07D7  0871               	movf	?___lwmod+1,w
  1135  07D8  00F9               	movwf	___lwdiv@dividend+1
  1136  07D9  0870               	movf	?___lwmod,w
  1137  07DA  00F8               	movwf	___lwdiv@dividend
  1138  07DB  120A  118A  25C7  120A  118A  	fcall	___lwdiv
  1139  07E0  0876               	movf	?___lwdiv,w
  1140  07E1  3E30               	addlw	48
  1141  07E2  120A  118A  2553  120A  118A  	fcall	_Lcd_Write_Char
  1142                           
  1143                           ;Joystick.c: 84:     Lcd_Write_Char(y_value%10+48);
  1144  07E7  300A               	movlw	10
  1145  07E8  00F0               	movwf	___lwmod@divisor
  1146  07E9  3000               	movlw	0
  1147  07EA  00F1               	movwf	___lwmod@divisor+1
  1148  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  1149  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  1150  07ED  0823               	movf	Lcd_Display@y_value+1,w
  1151  07EE  00F3               	movwf	___lwmod@dividend+1
  1152  07EF  0822               	movf	Lcd_Display@y_value,w
  1153  07F0  00F2               	movwf	___lwmod@dividend
  1154  07F1  120A  118A  2521  120A  118A  	fcall	___lwmod
  1155  07F6  0870               	movf	?___lwmod,w
  1156  07F7  3E30               	addlw	48
  1157  07F8  120A  118A  2553   	fcall	_Lcd_Write_Char
  1158  07FB  0008               	return
  1159  07FC                     __end_of_Lcd_Display:	
  1160                           
  1161                           	psect	text5
  1162  0521                     __ptext5:	
  1163 ;; *************** function ___lwmod *****************
  1164 ;; Defined at:
  1165 ;;		line 5 in file "D:\PROGRAM\XC8 v2.05\pic\sources\c90\common\lwmod.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  divisor         2    0[COMMON] unsigned int 
  1168 ;;  dividend        2    2[COMMON] unsigned int 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  counter         1    5[COMMON] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  2    0[COMMON] unsigned int 
  1173 ;; Registers used:
  1174 ;;		wreg, status,2, status,0
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1180 ;;      Params:         4       0       0       0       0
  1181 ;;      Locals:         1       0       0       0       0
  1182 ;;      Temps:          1       0       0       0       0
  1183 ;;      Totals:         6       0       0       0       0
  1184 ;;Total ram usage:        6 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_Lcd_Display
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           
  1194                           ;psect for function ___lwmod
  1195  0521                     ___lwmod:	
  1196                           
  1197                           ;incstack = 0
  1198                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1199  0521  0870               	movf	___lwmod@divisor,w
  1200  0522  0471               	iorwf	___lwmod@divisor+1,w
  1201  0523  1903               	btfsc	3,2
  1202  0524  2D4E               	goto	l997
  1203  0525  01F5               	clrf	___lwmod@counter
  1204  0526  0AF5               	incf	___lwmod@counter,f
  1205  0527                     l987:	
  1206  0527  1BF1               	btfsc	___lwmod@divisor+1,7
  1207  0528  2D35               	goto	l989
  1208  0529  3001               	movlw	1
  1209  052A                     u435:	
  1210  052A  1003               	clrc
  1211  052B  0DF0               	rlf	___lwmod@divisor,f
  1212  052C  0DF1               	rlf	___lwmod@divisor+1,f
  1213  052D  3EFF               	addlw	-1
  1214  052E  1D03               	skipz
  1215  052F  2D2A               	goto	u435
  1216  0530  3001               	movlw	1
  1217  0531  00F4               	movwf	??___lwmod
  1218  0532  0874               	movf	??___lwmod,w
  1219  0533  07F5               	addwf	___lwmod@counter,f
  1220  0534  2D27               	goto	l987
  1221  0535                     l989:	
  1222  0535  0871               	movf	___lwmod@divisor+1,w
  1223  0536  0273               	subwf	___lwmod@dividend+1,w
  1224  0537  1D03               	skipz
  1225  0538  2D3B               	goto	u455
  1226  0539  0870               	movf	___lwmod@divisor,w
  1227  053A  0272               	subwf	___lwmod@dividend,w
  1228  053B                     u455:	
  1229  053B  1C03               	skipc
  1230  053C  2D43               	goto	l993
  1231  053D  0870               	movf	___lwmod@divisor,w
  1232  053E  02F2               	subwf	___lwmod@dividend,f
  1233  053F  0871               	movf	___lwmod@divisor+1,w
  1234  0540  1C03               	skipc
  1235  0541  03F3               	decf	___lwmod@dividend+1,f
  1236  0542  02F3               	subwf	___lwmod@dividend+1,f
  1237  0543                     l993:	
  1238  0543  3001               	movlw	1
  1239  0544                     u465:	
  1240  0544  1003               	clrc
  1241  0545  0CF1               	rrf	___lwmod@divisor+1,f
  1242  0546  0CF0               	rrf	___lwmod@divisor,f
  1243  0547  3EFF               	addlw	-1
  1244  0548  1D03               	skipz
  1245  0549  2D44               	goto	u465
  1246  054A  3001               	movlw	1
  1247  054B  02F5               	subwf	___lwmod@counter,f
  1248  054C  1D03               	btfss	3,2
  1249  054D  2D35               	goto	l989
  1250  054E                     l997:	
  1251  054E  0873               	movf	___lwmod@dividend+1,w
  1252  054F  00F1               	movwf	?___lwmod+1
  1253  0550  0872               	movf	___lwmod@dividend,w
  1254  0551  00F0               	movwf	?___lwmod
  1255  0552  0008               	return
  1256  0553                     __end_of___lwmod:	
  1257                           
  1258                           	psect	text6
  1259  05C7                     __ptext6:	
  1260 ;; *************** function ___lwdiv *****************
  1261 ;; Defined at:
  1262 ;;		line 5 in file "D:\PROGRAM\XC8 v2.05\pic\sources\c90\common\lwdiv.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  divisor         2    6[COMMON] unsigned int 
  1265 ;;  dividend        2    8[COMMON] unsigned int 
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;  quotient        2   11[COMMON] unsigned int 
  1268 ;;  counter         1   13[COMMON] unsigned char 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  2    6[COMMON] unsigned int 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1278 ;;      Params:         4       0       0       0       0
  1279 ;;      Locals:         3       0       0       0       0
  1280 ;;      Temps:          1       0       0       0       0
  1281 ;;      Totals:         8       0       0       0       0
  1282 ;;Total ram usage:        8 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_Lcd_Display
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function ___lwdiv
  1293  05C7                     ___lwdiv:	
  1294                           
  1295                           ;incstack = 0
  1296                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1297  05C7  01FB               	clrf	___lwdiv@quotient
  1298  05C8  01FC               	clrf	___lwdiv@quotient+1
  1299  05C9  0876               	movf	___lwdiv@divisor,w
  1300  05CA  0477               	iorwf	___lwdiv@divisor+1,w
  1301  05CB  1903               	btfsc	3,2
  1302  05CC  2DFE               	goto	l975
  1303  05CD  01FD               	clrf	___lwdiv@counter
  1304  05CE  0AFD               	incf	___lwdiv@counter,f
  1305  05CF                     l963:	
  1306  05CF  1BF7               	btfsc	___lwdiv@divisor+1,7
  1307  05D0  2DDD               	goto	l965
  1308  05D1  3001               	movlw	1
  1309  05D2                     u365:	
  1310  05D2  1003               	clrc
  1311  05D3  0DF6               	rlf	___lwdiv@divisor,f
  1312  05D4  0DF7               	rlf	___lwdiv@divisor+1,f
  1313  05D5  3EFF               	addlw	-1
  1314  05D6  1D03               	skipz
  1315  05D7  2DD2               	goto	u365
  1316  05D8  3001               	movlw	1
  1317  05D9  00FA               	movwf	??___lwdiv
  1318  05DA  087A               	movf	??___lwdiv,w
  1319  05DB  07FD               	addwf	___lwdiv@counter,f
  1320  05DC  2DCF               	goto	l963
  1321  05DD                     l965:	
  1322  05DD  3001               	movlw	1
  1323  05DE                     u385:	
  1324  05DE  1003               	clrc
  1325  05DF  0DFB               	rlf	___lwdiv@quotient,f
  1326  05E0  0DFC               	rlf	___lwdiv@quotient+1,f
  1327  05E1  3EFF               	addlw	-1
  1328  05E2  1D03               	skipz
  1329  05E3  2DDE               	goto	u385
  1330  05E4  0877               	movf	___lwdiv@divisor+1,w
  1331  05E5  0279               	subwf	___lwdiv@dividend+1,w
  1332  05E6  1D03               	skipz
  1333  05E7  2DEA               	goto	u395
  1334  05E8  0876               	movf	___lwdiv@divisor,w
  1335  05E9  0278               	subwf	___lwdiv@dividend,w
  1336  05EA                     u395:	
  1337  05EA  1C03               	skipc
  1338  05EB  2DF3               	goto	l971
  1339  05EC  0876               	movf	___lwdiv@divisor,w
  1340  05ED  02F8               	subwf	___lwdiv@dividend,f
  1341  05EE  0877               	movf	___lwdiv@divisor+1,w
  1342  05EF  1C03               	skipc
  1343  05F0  03F9               	decf	___lwdiv@dividend+1,f
  1344  05F1  02F9               	subwf	___lwdiv@dividend+1,f
  1345  05F2  147B               	bsf	___lwdiv@quotient,0
  1346  05F3                     l971:	
  1347  05F3  3001               	movlw	1
  1348  05F4                     u405:	
  1349  05F4  1003               	clrc
  1350  05F5  0CF7               	rrf	___lwdiv@divisor+1,f
  1351  05F6  0CF6               	rrf	___lwdiv@divisor,f
  1352  05F7  3EFF               	addlw	-1
  1353  05F8  1D03               	skipz
  1354  05F9  2DF4               	goto	u405
  1355  05FA  3001               	movlw	1
  1356  05FB  02FD               	subwf	___lwdiv@counter,f
  1357  05FC  1D03               	btfss	3,2
  1358  05FD  2DDD               	goto	l965
  1359  05FE                     l975:	
  1360  05FE  087C               	movf	___lwdiv@quotient+1,w
  1361  05FF  00F7               	movwf	?___lwdiv+1
  1362  0600  087B               	movf	___lwdiv@quotient,w
  1363  0601  00F6               	movwf	?___lwdiv
  1364  0602  0008               	return
  1365  0603                     __end_of___lwdiv:	
  1366                           
  1367                           	psect	text7
  1368  0553                     __ptext7:	
  1369 ;; *************** function _Lcd_Write_Char *****************
  1370 ;; Defined at:
  1371 ;;		line 82 in file "lcd4.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  a               1    wreg     unsigned char 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  a               1    4[COMMON] unsigned char 
  1376 ;;  y               1    3[COMMON] unsigned char 
  1377 ;;  temp            1    2[COMMON] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0, pclath, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1387 ;;      Params:         0       0       0       0       0
  1388 ;;      Locals:         3       0       0       0       0
  1389 ;;      Temps:          1       0       0       0       0
  1390 ;;      Totals:         4       0       0       0       0
  1391 ;;Total ram usage:        4 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    1
  1394 ;; This function calls:
  1395 ;;		_Lcd_Port
  1396 ;; This function is called by:
  1397 ;;		_Lcd_Display
  1398 ;;		_Lcd_Write_String
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           
  1403                           ;psect for function _Lcd_Write_Char
  1404  0553                     _Lcd_Write_Char:	
  1405                           
  1406                           ;incstack = 0
  1407                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1408                           ;Lcd_Write_Char@a stored from wreg
  1409  0553  00F4               	movwf	Lcd_Write_Char@a
  1410                           
  1411                           ;lcd4.c: 82: void Lcd_Write_Char(char a);lcd4.c: 83: {;lcd4.c: 84:    char temp,y;;lcd4.
      +                          c: 85:    temp = a&0x0F;
  1412  0554  0874               	movf	Lcd_Write_Char@a,w
  1413  0555  390F               	andlw	15
  1414  0556  00F1               	movwf	??_Lcd_Write_Char
  1415  0557  0871               	movf	??_Lcd_Write_Char,w
  1416  0558  00F2               	movwf	Lcd_Write_Char@temp
  1417                           
  1418                           ;lcd4.c: 86:    y = a&0xF0;
  1419  0559  0874               	movf	Lcd_Write_Char@a,w
  1420  055A  39F0               	andlw	240
  1421  055B  00F1               	movwf	??_Lcd_Write_Char
  1422  055C  0871               	movf	??_Lcd_Write_Char,w
  1423  055D  00F3               	movwf	Lcd_Write_Char@y
  1424                           
  1425                           ;lcd4.c: 87:    RD0 = 1;
  1426  055E  1283               	bcf	3,5	;RP0=0, select bank0
  1427  055F  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0560  1408               	bsf	8,0	;volatile
  1429                           
  1430                           ;lcd4.c: 88:    Lcd_Port(y>>4);
  1431  0561  0873               	movf	Lcd_Write_Char@y,w
  1432  0562  00F1               	movwf	??_Lcd_Write_Char
  1433  0563  3004               	movlw	4
  1434  0564                     u345:	
  1435  0564  1003               	clrc
  1436  0565  0CF1               	rrf	??_Lcd_Write_Char,f
  1437  0566  3EFF               	addlw	-1
  1438  0567  1D03               	skipz
  1439  0568  2D64               	goto	u345
  1440  0569  0871               	movf	??_Lcd_Write_Char,w
  1441  056A  120A  118A  24CB  120A  118A  	fcall	_Lcd_Port
  1442                           
  1443                           ;lcd4.c: 89:    RD1 = 1;
  1444  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1445  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1446  0571  1488               	bsf	8,1	;volatile
  1447                           
  1448                           ;lcd4.c: 90:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1449  0572  3042               	movlw	66
  1450  0573  00F1               	movwf	??_Lcd_Write_Char
  1451  0574                     u567:	
  1452  0574  0BF1               	decfsz	??_Lcd_Write_Char,f
  1453  0575  2D74               	goto	u567
  1454  0576  0000               	nop
  1455                           
  1456                           ;lcd4.c: 91:    RD1 = 0;
  1457  0577  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0578  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0579  1088               	bcf	8,1	;volatile
  1460                           
  1461                           ;lcd4.c: 92:    Lcd_Port(temp);
  1462  057A  0872               	movf	Lcd_Write_Char@temp,w
  1463  057B  120A  118A  24CB  120A  118A  	fcall	_Lcd_Port
  1464                           
  1465                           ;lcd4.c: 93:    RD1 = 1;
  1466  0580  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0581  1303               	bcf	3,6	;RP1=0, select bank0
  1468  0582  1488               	bsf	8,1	;volatile
  1469                           
  1470                           ;lcd4.c: 94:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1471  0583  3042               	movlw	66
  1472  0584  00F1               	movwf	??_Lcd_Write_Char
  1473  0585                     u577:	
  1474  0585  0BF1               	decfsz	??_Lcd_Write_Char,f
  1475  0586  2D85               	goto	u577
  1476  0587  0000               	nop
  1477                           
  1478                           ;lcd4.c: 95:    RD1 = 0;
  1479  0588  1283               	bcf	3,5	;RP0=0, select bank0
  1480  0589  1303               	bcf	3,6	;RP1=0, select bank0
  1481  058A  1088               	bcf	8,1	;volatile
  1482  058B  0008               	return
  1483  058C                     __end_of_Lcd_Write_Char:	
  1484                           
  1485                           	psect	text8
  1486  0603                     __ptext8:	
  1487 ;; *************** function _Lcd_Set_Cursor *****************
  1488 ;; Defined at:
  1489 ;;		line 42 in file "lcd4.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  a               1    wreg     unsigned char 
  1492 ;;  b               1    4[COMMON] unsigned char 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  a               1    7[COMMON] unsigned char 
  1495 ;;  temp            1   10[COMMON] unsigned char 
  1496 ;;  y               1    9[COMMON] unsigned char 
  1497 ;;  z               1    8[COMMON] unsigned char 
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0, pclath, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1507 ;;      Params:         1       0       0       0       0
  1508 ;;      Locals:         4       0       0       0       0
  1509 ;;      Temps:          2       0       0       0       0
  1510 ;;      Totals:         7       0       0       0       0
  1511 ;;Total ram usage:        7 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    2
  1514 ;; This function calls:
  1515 ;;		_Lcd_Cmd
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;;		_Lcd_Display
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           
  1523                           ;psect for function _Lcd_Set_Cursor
  1524  0603                     _Lcd_Set_Cursor:	
  1525                           
  1526                           ;incstack = 0
  1527                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1528                           ;Lcd_Set_Cursor@a stored from wreg
  1529  0603  00F7               	movwf	Lcd_Set_Cursor@a
  1530                           
  1531                           ;lcd4.c: 42: void Lcd_Set_Cursor(char a, char b);lcd4.c: 43: {;lcd4.c: 44:  char temp,z,
      +                          y;;lcd4.c: 45:  if(a == 1)
  1532  0604  0377               	decf	Lcd_Set_Cursor@a,w
  1533  0605  1D03               	btfss	3,2
  1534  0606  2E28               	goto	l923
  1535                           
  1536                           ;lcd4.c: 46:  {;lcd4.c: 47:    temp = 0x80 + b - 1;
  1537  0607  0874               	movf	Lcd_Set_Cursor@b,w
  1538  0608  3E7F               	addlw	127
  1539  0609  00F5               	movwf	??_Lcd_Set_Cursor
  1540  060A  0875               	movf	??_Lcd_Set_Cursor,w
  1541  060B  00FA               	movwf	Lcd_Set_Cursor@temp
  1542                           
  1543                           ;lcd4.c: 48:   z = temp>>4;
  1544  060C  087A               	movf	Lcd_Set_Cursor@temp,w
  1545  060D  00F5               	movwf	??_Lcd_Set_Cursor
  1546  060E  3004               	movlw	4
  1547  060F                     u315:	
  1548  060F  1003               	clrc
  1549  0610  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1550  0611  3EFF               	addlw	-1
  1551  0612  1D03               	skipz
  1552  0613  2E0F               	goto	u315
  1553  0614  0875               	movf	??_Lcd_Set_Cursor,w
  1554  0615  00F6               	movwf	??_Lcd_Set_Cursor+1
  1555  0616  0876               	movf	??_Lcd_Set_Cursor+1,w
  1556  0617  00F8               	movwf	Lcd_Set_Cursor@z
  1557                           
  1558                           ;lcd4.c: 49:   y = temp & 0x0F;
  1559  0618  087A               	movf	Lcd_Set_Cursor@temp,w
  1560  0619  390F               	andlw	15
  1561  061A  00F5               	movwf	??_Lcd_Set_Cursor
  1562  061B  0875               	movf	??_Lcd_Set_Cursor,w
  1563  061C  00F9               	movwf	Lcd_Set_Cursor@y
  1564                           
  1565                           ;lcd4.c: 50:   Lcd_Cmd(z);
  1566  061D  0878               	movf	Lcd_Set_Cursor@z,w
  1567  061E  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
  1568                           
  1569                           ;lcd4.c: 51:   Lcd_Cmd(y);
  1570  0623  0879               	movf	Lcd_Set_Cursor@y,w
  1571  0624  120A  118A  24E5   	fcall	_Lcd_Cmd
  1572                           
  1573                           ;lcd4.c: 52:  }
  1574  0627  0008               	return
  1575  0628                     l923:	
  1576  0628  3002               	movlw	2
  1577  0629  0677               	xorwf	Lcd_Set_Cursor@a,w
  1578  062A  1D03               	btfss	3,2
  1579  062B  0008               	return
  1580                           
  1581                           ;lcd4.c: 54:  {;lcd4.c: 55:   temp = 0xC0 + b - 1;
  1582  062C  0874               	movf	Lcd_Set_Cursor@b,w
  1583  062D  3EBF               	addlw	191
  1584  062E  00F5               	movwf	??_Lcd_Set_Cursor
  1585  062F  0875               	movf	??_Lcd_Set_Cursor,w
  1586  0630  00FA               	movwf	Lcd_Set_Cursor@temp
  1587                           
  1588                           ;lcd4.c: 56:   z = temp>>4;
  1589  0631  087A               	movf	Lcd_Set_Cursor@temp,w
  1590  0632  00F5               	movwf	??_Lcd_Set_Cursor
  1591  0633  3004               	movlw	4
  1592  0634                     u335:	
  1593  0634  1003               	clrc
  1594  0635  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1595  0636  3EFF               	addlw	-1
  1596  0637  1D03               	skipz
  1597  0638  2E34               	goto	u335
  1598  0639  0875               	movf	??_Lcd_Set_Cursor,w
  1599  063A  00F6               	movwf	??_Lcd_Set_Cursor+1
  1600  063B  0876               	movf	??_Lcd_Set_Cursor+1,w
  1601  063C  00F8               	movwf	Lcd_Set_Cursor@z
  1602                           
  1603                           ;lcd4.c: 57:   y = temp & 0x0F;
  1604  063D  087A               	movf	Lcd_Set_Cursor@temp,w
  1605  063E  390F               	andlw	15
  1606  063F  00F5               	movwf	??_Lcd_Set_Cursor
  1607  0640  0875               	movf	??_Lcd_Set_Cursor,w
  1608  0641  00F9               	movwf	Lcd_Set_Cursor@y
  1609                           
  1610                           ;lcd4.c: 58:   Lcd_Cmd(z);
  1611  0642  0878               	movf	Lcd_Set_Cursor@z,w
  1612  0643  120A  118A  24E5  120A  118A  	fcall	_Lcd_Cmd
  1613                           
  1614                           ;lcd4.c: 59:   Lcd_Cmd(y);
  1615  0648  0879               	movf	Lcd_Set_Cursor@y,w
  1616  0649  120A  118A  24E5   	fcall	_Lcd_Cmd
  1617  064C  0008               	return
  1618  064D                     __end_of_Lcd_Set_Cursor:	
  1619                           
  1620                           	psect	text9
  1621  04E5                     __ptext9:	
  1622 ;; *************** function _Lcd_Cmd *****************
  1623 ;; Defined at:
  1624 ;;		line 27 in file "lcd4.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  a               1    wreg     unsigned char 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  a               1    3[COMMON] unsigned char 
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, pclath, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1638 ;;      Params:         0       0       0       0       0
  1639 ;;      Locals:         1       0       0       0       0
  1640 ;;      Temps:          2       0       0       0       0
  1641 ;;      Totals:         3       0       0       0       0
  1642 ;;Total ram usage:        3 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    1
  1645 ;; This function calls:
  1646 ;;		_Lcd_Port
  1647 ;; This function is called by:
  1648 ;;		_Lcd_Set_Cursor
  1649 ;;		_Lcd_Init
  1650 ;;		_Lcd_Clear
  1651 ;;		_Lcd_Shift_Right
  1652 ;;		_Lcd_Shift_Left
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           
  1657                           ;psect for function _Lcd_Cmd
  1658  04E5                     _Lcd_Cmd:	
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1662                           ;Lcd_Cmd@a stored from wreg
  1663  04E5  00F3               	movwf	Lcd_Cmd@a
  1664                           
  1665                           ;lcd4.c: 27: void Lcd_Cmd(char a);lcd4.c: 28: {;lcd4.c: 29:  RD0 = 0;
  1666  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1667  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1668  04E8  1008               	bcf	8,0	;volatile
  1669                           
  1670                           ;lcd4.c: 30:  Lcd_Port(a);
  1671  04E9  0873               	movf	Lcd_Cmd@a,w
  1672  04EA  120A  118A  24CB  120A  118A  	fcall	_Lcd_Port
  1673                           
  1674                           ;lcd4.c: 31:  RD1 = 1;
  1675  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  1676  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  1677  04F1  1488               	bsf	8,1	;volatile
  1678                           
  1679                           ;lcd4.c: 32:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1680  04F2  301A               	movlw	26
  1681  04F3  00F2               	movwf	??_Lcd_Cmd+1
  1682  04F4  30F8               	movlw	248
  1683  04F5  00F1               	movwf	??_Lcd_Cmd
  1684  04F6                     u587:	
  1685  04F6  0BF1               	decfsz	??_Lcd_Cmd,f
  1686  04F7  2CF6               	goto	u587
  1687  04F8  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1688  04F9  2CF6               	goto	u587
  1689  04FA  0000               	nop
  1690                           
  1691                           ;lcd4.c: 33:         RD1 = 0;
  1692  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  1693  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  1694  04FD  1088               	bcf	8,1	;volatile
  1695  04FE  0008               	return
  1696  04FF                     __end_of_Lcd_Cmd:	
  1697                           
  1698                           	psect	text10
  1699  04CB                     __ptext10:	
  1700 ;; *************** function _Lcd_Port *****************
  1701 ;; Defined at:
  1702 ;;		line 5 in file "lcd4.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  a               1    wreg     unsigned char 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  a               1    0[COMMON] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1716 ;;      Params:         0       0       0       0       0
  1717 ;;      Locals:         1       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0
  1719 ;;      Totals:         1       0       0       0       0
  1720 ;;Total ram usage:        1 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_Lcd_Cmd
  1726 ;;		_Lcd_Init
  1727 ;;		_Lcd_Write_Char
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function _Lcd_Port
  1733  04CB                     _Lcd_Port:	
  1734                           
  1735                           ;incstack = 0
  1736                           ; Regs used in _Lcd_Port: [wreg]
  1737                           ;Lcd_Port@a stored from wreg
  1738  04CB  00F0               	movwf	Lcd_Port@a
  1739                           
  1740                           ;lcd4.c: 5: void Lcd_Port(char a);lcd4.c: 6: {;lcd4.c: 7:  if(a & 1)
  1741  04CC  1C70               	btfss	Lcd_Port@a,0
  1742  04CD  2CD2               	goto	l87
  1743                           
  1744                           ;lcd4.c: 8:   RD2 = 1;
  1745  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  1746  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  1747  04D0  1508               	bsf	8,2	;volatile
  1748  04D1  2CD5               	goto	l88
  1749  04D2                     l87:	
  1750                           ;lcd4.c: 9:  else
  1751                           
  1752                           
  1753                           ;lcd4.c: 10:   RD2 = 0;
  1754  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1755  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1756  04D4  1108               	bcf	8,2	;volatile
  1757  04D5                     l88:	
  1758                           
  1759                           ;lcd4.c: 12:  if(a & 2)
  1760  04D5  1CF0               	btfss	Lcd_Port@a,1
  1761  04D6  2CD9               	goto	l89
  1762                           
  1763                           ;lcd4.c: 13:   RD3 = 1;
  1764  04D7  1588               	bsf	8,3	;volatile
  1765  04D8  2CDA               	goto	l90
  1766  04D9                     l89:	
  1767                           ;lcd4.c: 14:  else
  1768                           
  1769                           
  1770                           ;lcd4.c: 15:   RD3 = 0;
  1771  04D9  1188               	bcf	8,3	;volatile
  1772  04DA                     l90:	
  1773                           
  1774                           ;lcd4.c: 17:  if(a & 4)
  1775  04DA  1D70               	btfss	Lcd_Port@a,2
  1776  04DB  2CDE               	goto	l91
  1777                           
  1778                           ;lcd4.c: 18:   RD4 = 1;
  1779  04DC  1608               	bsf	8,4	;volatile
  1780  04DD  2CDF               	goto	l92
  1781  04DE                     l91:	
  1782                           ;lcd4.c: 19:  else
  1783                           
  1784                           
  1785                           ;lcd4.c: 20:   RD4 = 0;
  1786  04DE  1208               	bcf	8,4	;volatile
  1787  04DF                     l92:	
  1788                           
  1789                           ;lcd4.c: 22:  if(a & 8)
  1790  04DF  1DF0               	btfss	Lcd_Port@a,3
  1791  04E0  2CE3               	goto	l93
  1792                           
  1793                           ;lcd4.c: 23:   RD5 = 1;
  1794  04E1  1688               	bsf	8,5	;volatile
  1795  04E2  0008               	return
  1796  04E3                     l93:	
  1797                           ;lcd4.c: 24:  else
  1798                           
  1799                           
  1800                           ;lcd4.c: 25:   RD5 = 0;
  1801  04E3  1288               	bcf	8,5	;volatile
  1802  04E4  0008               	return
  1803  04E5                     __end_of_Lcd_Port:	
  1804                           
  1805                           	psect	text11
  1806  04B3                     __ptext11:	
  1807 ;; *************** function _ADC_Init *****************
  1808 ;; Defined at:
  1809 ;;		line 41 in file "Joystick.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		None
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1823 ;;      Params:         0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0
  1825 ;;      Temps:          0       0       0       0       0
  1826 ;;      Totals:         0       0       0       0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		_main
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           
  1837                           ;psect for function _ADC_Init
  1838  04B3                     _ADC_Init:	
  1839                           
  1840                           ;Joystick.c: 44:     PCFG0 = 0;
  1841                           
  1842                           ;incstack = 0
  1843                           ; Regs used in _ADC_Init: []
  1844  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  1845  04B4  1303               	bcf	3,6	;RP1=0, select bank1
  1846  04B5  101F               	bcf	31,0	;volatile
  1847                           
  1848                           ;Joystick.c: 45:     PCFG1 = 0;
  1849  04B6  109F               	bcf	31,1	;volatile
  1850                           
  1851                           ;Joystick.c: 46:     PCFG2 = 0;
  1852  04B7  111F               	bcf	31,2	;volatile
  1853                           
  1854                           ;Joystick.c: 47:     PCFG3 = 0;
  1855  04B8  119F               	bcf	31,3	;volatile
  1856                           
  1857                           ;Joystick.c: 49:     ADCS0 = 1;
  1858  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1859  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1860  04BB  171F               	bsf	31,6	;volatile
  1861                           
  1862                           ;Joystick.c: 50:     ADCS1 = 0;
  1863  04BC  139F               	bcf	31,7	;volatile
  1864                           
  1865                           ;Joystick.c: 51:     ADCS2 = 1;
  1866  04BD  1683               	bsf	3,5	;RP0=1, select bank1
  1867  04BE  1303               	bcf	3,6	;RP1=0, select bank1
  1868  04BF  171F               	bsf	31,6	;volatile
  1869                           
  1870                           ;Joystick.c: 53:     ADFM = 1;
  1871  04C0  179F               	bsf	31,7	;volatile
  1872                           
  1873                           ;Joystick.c: 55:     ADON = 1;
  1874  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  1875  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  1876  04C3  141F               	bsf	31,0	;volatile
  1877                           
  1878                           ;Joystick.c: 57:     ADIE = 0;
  1879  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  1880  04C5  1303               	bcf	3,6	;RP1=0, select bank1
  1881  04C6  130C               	bcf	12,6	;volatile
  1882                           
  1883                           ;Joystick.c: 58:     ADIF = 0;
  1884  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1885  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1886  04C9  130C               	bcf	12,6	;volatile
  1887  04CA  0008               	return
  1888  04CB                     __end_of_ADC_Init:	
  1889  007E                     btemp	set	126	;btemp
  1890  007E                     wtemp0	set	126


Data Sizes:
    Strings     22
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Display->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Lcd_Display

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    4536
                                              5 BANK0      7     7      0
                           _ADC_Init
                        _Lcd_Display
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _Read_ADC                                             9     7      2      45
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     334
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Display                                          5     1      4    3259
                                              0 BANK0      5     1      4
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4    1071
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    1074
                                              6 COMMON     8     4      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     608
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _Lcd_Display
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Read_ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       C       5       15.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat May 18 21:17:20 2019

                        pc 0002                __CFG_CP$OFF 0000                         l64 05AC  
                       l90 04DA                         l91 04DE                         l92 04DF  
                       l93 04E3                         l87 04D2                         l88 04D5  
                       l89 04D9                         fsr 0004                        l923 0628  
                      l971 05F3                        l963 05CF                        l965 05DD  
                      l975 05FE                        l993 0543                        l987 0527  
                      l989 0535                        l997 054E                        _RD0 0040  
                      _RD1 0041                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        u315 060F  
                      u405 05F4                        u335 0634                        u345 0564  
             __CFG_CPD$OFF 0000                        u435 052A                        u365 05D2  
                      u517 0684                        u455 053B                        u527 05A4  
                      u385 05DE                        u465 0544                        u537 06AF  
                      u395 05EA                        u547 06BE                        u557 06CD  
                      u567 0574                        u495 0596                        u577 0585  
                      u587 04F6                        fsr0 0004               __CFG_FOSC$HS 0000  
      __end_of_Lcd_Display 07FC               __CFG_LVP$OFF 0000                       l1019 0502  
                     l1051 0670                       _ADIE 0466                       _ADIF 0066  
                     _ADFM 04FF                       _ADON 00F8                       STR_1 0009  
                     STR_2 0014               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 064D                       btemp 007E           __end_of_ADC_Init 04CB  
              main@x_value 0026                main@y_value 0028                       start 0000  
       ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 04FF                      _ADCS0 00FE  
                    _ADCS1 00FF                      _ADCS2 04FE                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      _PCFG0 04F8                      _PCFG1 04F9  
                    _PCFG2 04FA                      _PCFG3 04FB            __end_of___lwdiv 0603  
          __end_of___lwmod 0553    __size_of_Lcd_Set_Cursor 004A                      _TRISA 0085  
                    _TRISD 0088                      main@a 002A             __CFG_BOREN$OFF 0000  
                    pclath 000A                      status 0003                      wtemp0 007E  
         __end_of_Lcd_Init 0701           __end_of_Lcd_Port 04E5            __initialization 07FC  
             __end_of_main 06A5           __end_of_Read_ADC 05C7                _Lcd_Display 0701  
                   ??_main 0025                     _ADCON0 001F                     _ADRESH 001E  
                   _ADRESL 009E                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039  
           __CFG_PWRTE$OFF 0000            Read_ADC@channel 0078                  ??___lwdiv 007A  
                ??___lwmod 0074                  ?_ADC_Init 0070            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0603  
               ??_ADC_Init 0070                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                ?_Read_ADC 0070                 __pmaintext 064D  __size_of_Lcd_Write_String 0022  
   __end_of_Lcd_Set_Cursor 064D                 ??_Lcd_Init 0074                 ??_Lcd_Port 0070  
               __stringtab 0003                 ??_Read_ADC 0072             _Lcd_Write_Char 0553  
                  _Lcd_Cmd 04E5         Lcd_Display@x_value 0020         Lcd_Display@y_value 0022  
                  ___lwdiv 05C7                    ___lwmod 0521            ?_Lcd_Set_Cursor 0074  
             ?_Lcd_Display 0020                    __ptext1 058C                    __ptext2 04FF  
                  __ptext3 06A5                    __ptext4 0701                    __ptext5 0521  
                  __ptext6 05C7                    __ptext7 0553                    __ptext8 0603  
                  __ptext9 04E5     __end_of_Lcd_Write_Char 058C       end_of_initialization 07FC  
                Lcd_Port@a 0070          __size_of_ADC_Init 0018            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0077          Lcd_Write_String@i 0075                  Read_ADC@N 0076  
         _Lcd_Write_String 04FF        start_initialization 07FC          __size_of_Lcd_Init 005C  
        __size_of_Lcd_Port 001A          __size_of_Read_ADC 003B            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073       __size_of_Lcd_Display 00FB                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070           ___lwdiv@dividend 0078  
         ??_Lcd_Set_Cursor 0075                   ?___lwdiv 0076                   ?___lwmod 0070  
                __pstrings 0003                   _ADC_Init 04B3           ___lwdiv@quotient 007B  
                 Lcd_Cmd@a 0073                   _GO_nDONE 00FA                __stringbase 0008  
         ??_Lcd_Write_Char 0071                   _Lcd_Init 06A5                   _Lcd_Port 04CB  
                 _Read_ADC 058C   __end_of_Lcd_Write_String 0521           __size_of_Lcd_Cmd 001A  
         __size_of___lwdiv 003C           __size_of___lwmod 0032         __end_of__stringtab 0009  
          ___lwdiv@divisor 0076            ___lwdiv@counter 007D                   __ptext10 04CB  
                 __ptext11 04B3              __size_of_main 0058         Lcd_Write_Char@temp 0072  
         ___lwmod@dividend 0072                  stringcode 0003         Lcd_Set_Cursor@temp 007A  
            ??_Lcd_Display 0024            ___lwmod@divisor 0070            ___lwmod@counter 0075  
                 stringdir 0003                   stringtab 0003  
